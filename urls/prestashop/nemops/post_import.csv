post_id,post_name,post_author,post_date,post_type,post_status,post_tags,post_title,post_content,post_category,post_tags,Imagen,posicion
1,"Creating welcome coupons for your clients in PrestaShop",editor@davidberruezo.com,,post,publish,"Creating welcome coupons for your clients in PrestaShop","<div class=""post-content"">
								<p>In this quick tip we will create welcome coupons for our clients, to reward the ones who decide to sign up for an account on our shop.</p>
<p><span id=""more-2861""></span></p>
<p>In order to create a discount code for clients who register new accounts on our store, we must edit the <strong>AuthController</strong> file. As always, the best practice is to create an override for it, so let’s add a new one inside <em>override/controllers/front/</em>, named AuthController.php<br>
Open it up and add some generic override code inside php tags:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
Class AuthController extends AuthControllerCore
{

}
</pre>
<p>The method we are interested in is <strong>sendConfirmationMail</strong>. We can get it straight out of the original controller, and I suggest you take it from yours since it might differ from mine (I am using PrestaShop 1.6.1.6):</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
    protected function sendConfirmationMail(Customer $customer)
    {
        if (!Configuration::get('PS_CUSTOMER_CREATION_EMAIL')) {
            return true;
        }

        return Mail::Send(
            $this-&gt;context-&gt;language-&gt;id,
            'account',
            Mail::l('Welcome!'),
            array(
                '{firstname}' =&gt; $customer-&gt;firstname,
                '{lastname}' =&gt; $customer-&gt;lastname,
                '{email}' =&gt; $customer-&gt;email,
                '{passwd}' =&gt; Tools::getValue('passwd'))
            $customer-&gt;email,
            $customer-&gt;firstname.' '.$customer-&gt;lastname
        );
    }
</pre>
<p>Copy and paste it inside our new override. At this point we can add our code to create the new cart rule, <strong>right before</strong> it returns the Mail::Send method:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
        $cartRuleObj = new CartRule();
        $cartRuleObj-&gt;date_from = date('Y-m-d H:i:s');
        $cartRuleObj-&gt;date_to = '2046-12-12 00:00:00';
        $cartRuleObj-&gt;name[Configuration::get('PS_LANG_DEFAULT')] = 'Welcome coupon';
        $cartRuleObj-&gt;quantity = 1;
        $code = Tools::passwdGen();
        while (CartRule::cartRuleExists($code)) { // let's make sure there is no duplicate
            $code = Tools::passwdGen();
        }
        $cartRuleObj-&gt;code = $code;
        $cartRuleObj-&gt;quantity_per_user = 1;
        $cartRuleObj-&gt;reduction_percent = 20;
        $cartRuleObj-&gt;reduction_amount = 0;
        $cartRuleObj-&gt;free_shipping = 0;
        $cartRuleObj-&gt;active = 1;
        $cartRuleObj-&gt;minimum_amount = 0;
        $cartRuleObj-&gt;id_customer = $customer-&gt;id;
        $cartRuleObj-&gt;add();

</pre>
<p>For this example, I am creating a coupon with discount code that will give 20% off the price, that is going to be valid for a virtually indefinite period of time, with a single usage and restricted to this customer.<br>
Make sure you add the following line:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">

$cartRuleObj-&gt;id_customer = $customer-&gt;id;

</pre>
<p>As it is what binds the rule to the current customer instance. Also notice I am generating a random code, and checking if there is any identical one in the database already using a while loop. While there is, we try creating a new one.</p>
<p>At this point, as soon as the customer accesses his account page, he will see the code in the My coupons section. However, as good practice we should really inform him in the account creation email as well. Let’s therefore amend the Mail:Send call as follows, by passing $code to the list of variables:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
 return Mail::Send(
            $this-&gt;context-&gt;language-&gt;id,
            'account',
            Mail::l('Welcome!'),
            array(
                '{firstname}' =&gt; $customer-&gt;firstname,
                '{lastname}' =&gt; $customer-&gt;lastname,
                '{email}' =&gt; $customer-&gt;email,
                '{passwd}' =&gt; Tools::getValue('passwd')),
                '{coupon}' =&gt; $code,
            $customer-&gt;email,
            $customer-&gt;firstname.' '.$customer-&gt;lastname
        );
</pre>
<p>Great, we are done with php. What we need to do now is edit the corresponding account.html and account.txt emails to reflect the {coupon} variable.<br>
Here is the final php code:</p>
<script>Hola paco</script><pre class=""brush: php; title: ; notranslate"" title="""">
    protected function sendConfirmationMail(Customer $customer)
    {
        if (!Configuration::get('PS_CUSTOMER_CREATION_EMAIL')) {
            return true;
        }

        // nemo tut welcome coupon
        
        $cartRuleObj = new CartRule();
        $cartRuleObj-&gt;date_from = date('Y-m-d H:i:s');
        $cartRuleObj-&gt;date_to = '2046-12-12 00:00:00';
        $cartRuleObj-&gt;name[Configuration::get('PS_LANG_DEFAULT')] = 'Welcome coupon';
        $cartRuleObj-&gt;quantity = 1;
        $code = Tools::passwdGen();
        while (CartRule::cartRuleExists($code)) { // let's make sure there is no duplicate
            $code = Tools::passwdGen();
        }
        $cartRuleObj-&gt;code = $code;
        $cartRuleObj-&gt;quantity_per_user = 1;
        $cartRuleObj-&gt;reduction_percent = 20;
        $cartRuleObj-&gt;reduction_amount = 0;
        $cartRuleObj-&gt;free_shipping = 0;
        $cartRuleObj-&gt;active = 1;
        $cartRuleObj-&gt;minimum_amount = 0;
        $cartRuleObj-&gt;id_customer = $customer-&gt;id;
        $cartRuleObj-&gt;add();


        return Mail::Send(
            $this-&gt;context-&gt;language-&gt;id,
            'account',
            Mail::l('Welcome!'),
            array(
                '{firstname}' =&gt; $customer-&gt;firstname,
                '{lastname}' =&gt; $customer-&gt;lastname,
                '{email}' =&gt; $customer-&gt;email,
                '{passwd}' =&gt; Tools::getValue('passwd')),
                '{coupon}' =&gt; $code
            $customer-&gt;email,
            $customer-&gt;firstname.' '.$customer-&gt;lastname
        );
    }
</pre>
<div class=""separator""></div>
<h2>Editing emails in PrestaShop</h2>
<p>We have two ways to edit emails in PrestaShop: one is through the back office translations interface, the other is manual. Either will be fine, but I personally usually prefer to modify the html code directly.</p>
<h3>Editing PrestaShop emails using the back-office interface</h3>
<p>If you choose the first way, you can simply log in to the back office, and reach <strong>Localization &gt; Translations</strong>. Choose<br><strong>Email Templates translations</strong> from the first dropdown, then your template, and lastly the language, then hit modify.<br>
In the next screen, toggle the <strong>Core emails</strong> section, and look for one labeled <em>account</em>.</p>
<p><a href=""http://nemops.com/wp-content/uploads/2016/09/prestashop_welcome_coupon_edit_email.png""><img src=""http://nemops.com/wp-content/uploads/2016/09/prestashop_welcome_coupon_edit_email-680x306.png"" alt=""prestashop_welcome_coupon_edit_email"" width=""680"" height=""306"" class=""aligncenter size-large wp-image-2865""></a></p>
<p>What we want to do is edit the HTML template first, so click on <strong>Edit HTML version</strong>, and find a good spot where to add the new variable:</p>
<p><a href=""http://nemops.com/wp-content/uploads/2016/09/prestashop_welcome_coupon_email.png""><img src=""http://nemops.com/wp-content/uploads/2016/09/prestashop_welcome_coupon_email-680x455.png"" alt=""prestashop_welcome_coupon_email"" width=""680"" height=""455"" class=""aligncenter size-large wp-image-2866""></a></p>
<p>Save, then do the same with the text version.</p>
<h3>Editing PrestaShop emails’ HTMl directly</h3>
<p>The second way is the one I prefer, as the built in editor can often be confusing, when not messy. Once more, we need to make sure we are editing the correct email templates, usually located in the current theme’s folder <em>/mails/</em> followed by the language ISO.<br>
The files we are interested in are <strong>account.html</strong> and <strong>account.txt</strong>. Here is the snippet I added to the html version”</p>
<pre class=""brush: xml; title: ; notranslate"" title="""">
&lt;tr&gt;
    &lt;td class=""space_footer"" style=""padding:0!important""&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td class=""box"" style=""border:1px solid #D6D4D4;background-color:#f8f8f8;padding:7px 0""&gt;
        &lt;table class=""table"" style=""width:100%""&gt;
            &lt;tr&gt;
                &lt;td width=""10"" style=""padding:7px 0""&gt;&amp;nbsp;&lt;/td&gt;
                &lt;td style=""padding:7px 0""&gt;
                    &lt;font size=""2"" face=""Open-sans, sans-serif"" color=""#555454""&gt;
                        &lt;p style=""border-bottom:1px solid #D6D4D4;margin:3px 0 7px;text-transform:uppercase;font-weight:500;font-size:18px;padding-bottom:10px""&gt;20% off welcome code: {coupon}&lt;/p&gt;
                        
                    &lt;/font&gt;
                &lt;/td&gt;
                &lt;td width=""10"" style=""padding:7px 0""&gt;&amp;nbsp;&lt;/td&gt;
            &lt;/tr&gt;
        &lt;/table&gt;
    &lt;/td&gt;
&lt;/tr&gt;
</pre>
<p>Which is basically a copy/paste of the one above, with a modified text. Once again, edit the txt version to add the variable there too.</p>
<div class=""separator""></div>
<p>At this point, make sure the modification is working by creating a new account and seeing if your customer gets the new email template, we are done!</p>
							</div>",prestashop,prestashop,http://nemops.com/wp-content/uploads/2016/09/prestashop_welcome_coupon-180x180.jpg,left
2,"FREE PrestaShop Module: Product Access",editor@davidberruezo.com,,post,publish,"FREE PrestaShop Module: Product Access","<div class=""post-content"">
								<p>In this quick tip we will create welcome coupons for our clients, to reward the ones who decide to sign up for an account on our shop.</p>
<p><span id=""more-2861""></span></p>
<p>In order to create a discount code for clients who register new accounts on our store, we must edit the <strong>AuthController</strong> file. As always, the best practice is to create an override for it, so let’s add a new one inside <em>override/controllers/front/</em>, named AuthController.php<br>
Open it up and add some generic override code inside php tags:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
Class AuthController extends AuthControllerCore
{

}
</pre>
<p>The method we are interested in is <strong>sendConfirmationMail</strong>. We can get it straight out of the original controller, and I suggest you take it from yours since it might differ from mine (I am using PrestaShop 1.6.1.6):</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
    protected function sendConfirmationMail(Customer $customer)
    {
        if (!Configuration::get('PS_CUSTOMER_CREATION_EMAIL')) {
            return true;
        }

        return Mail::Send(
            $this-&gt;context-&gt;language-&gt;id,
            'account',
            Mail::l('Welcome!'),
            array(
                '{firstname}' =&gt; $customer-&gt;firstname,
                '{lastname}' =&gt; $customer-&gt;lastname,
                '{email}' =&gt; $customer-&gt;email,
                '{passwd}' =&gt; Tools::getValue('passwd'))
            $customer-&gt;email,
            $customer-&gt;firstname.' '.$customer-&gt;lastname
        );
    }
</pre>
<p>Copy and paste it inside our new override. At this point we can add our code to create the new cart rule, <strong>right before</strong> it returns the Mail::Send method:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
        $cartRuleObj = new CartRule();
        $cartRuleObj-&gt;date_from = date('Y-m-d H:i:s');
        $cartRuleObj-&gt;date_to = '2046-12-12 00:00:00';
        $cartRuleObj-&gt;name[Configuration::get('PS_LANG_DEFAULT')] = 'Welcome coupon';
        $cartRuleObj-&gt;quantity = 1;
        $code = Tools::passwdGen();
        while (CartRule::cartRuleExists($code)) { // let's make sure there is no duplicate
            $code = Tools::passwdGen();
        }
        $cartRuleObj-&gt;code = $code;
        $cartRuleObj-&gt;quantity_per_user = 1;
        $cartRuleObj-&gt;reduction_percent = 20;
        $cartRuleObj-&gt;reduction_amount = 0;
        $cartRuleObj-&gt;free_shipping = 0;
        $cartRuleObj-&gt;active = 1;
        $cartRuleObj-&gt;minimum_amount = 0;
        $cartRuleObj-&gt;id_customer = $customer-&gt;id;
        $cartRuleObj-&gt;add();

</pre>
<p>For this example, I am creating a coupon with discount code that will give 20% off the price, that is going to be valid for a virtually indefinite period of time, with a single usage and restricted to this customer.<br>
Make sure you add the following line:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">

$cartRuleObj-&gt;id_customer = $customer-&gt;id;

</pre>
<p>As it is what binds the rule to the current customer instance. Also notice I am generating a random code, and checking if there is any identical one in the database already using a while loop. While there is, we try creating a new one.</p>
<p>At this point, as soon as the customer accesses his account page, he will see the code in the My coupons section. However, as good practice we should really inform him in the account creation email as well. Let’s therefore amend the Mail:Send call as follows, by passing $code to the list of variables:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
 return Mail::Send(
            $this-&gt;context-&gt;language-&gt;id,
            'account',
            Mail::l('Welcome!'),
            array(
                '{firstname}' =&gt; $customer-&gt;firstname,
                '{lastname}' =&gt; $customer-&gt;lastname,
                '{email}' =&gt; $customer-&gt;email,
                '{passwd}' =&gt; Tools::getValue('passwd')),
                '{coupon}' =&gt; $code,
            $customer-&gt;email,
            $customer-&gt;firstname.' '.$customer-&gt;lastname
        );
</pre>
<p>Great, we are done with php. What we need to do now is edit the corresponding account.html and account.txt emails to reflect the {coupon} variable.<br>
Here is the final php code:</p>
<script>Hola paco</script><pre class=""brush: php; title: ; notranslate"" title="""">
    protected function sendConfirmationMail(Customer $customer)
    {
        if (!Configuration::get('PS_CUSTOMER_CREATION_EMAIL')) {
            return true;
        }

        // nemo tut welcome coupon
        
        $cartRuleObj = new CartRule();
        $cartRuleObj-&gt;date_from = date('Y-m-d H:i:s');
        $cartRuleObj-&gt;date_to = '2046-12-12 00:00:00';
        $cartRuleObj-&gt;name[Configuration::get('PS_LANG_DEFAULT')] = 'Welcome coupon';
        $cartRuleObj-&gt;quantity = 1;
        $code = Tools::passwdGen();
        while (CartRule::cartRuleExists($code)) { // let's make sure there is no duplicate
            $code = Tools::passwdGen();
        }
        $cartRuleObj-&gt;code = $code;
        $cartRuleObj-&gt;quantity_per_user = 1;
        $cartRuleObj-&gt;reduction_percent = 20;
        $cartRuleObj-&gt;reduction_amount = 0;
        $cartRuleObj-&gt;free_shipping = 0;
        $cartRuleObj-&gt;active = 1;
        $cartRuleObj-&gt;minimum_amount = 0;
        $cartRuleObj-&gt;id_customer = $customer-&gt;id;
        $cartRuleObj-&gt;add();


        return Mail::Send(
            $this-&gt;context-&gt;language-&gt;id,
            'account',
            Mail::l('Welcome!'),
            array(
                '{firstname}' =&gt; $customer-&gt;firstname,
                '{lastname}' =&gt; $customer-&gt;lastname,
                '{email}' =&gt; $customer-&gt;email,
                '{passwd}' =&gt; Tools::getValue('passwd')),
                '{coupon}' =&gt; $code
            $customer-&gt;email,
            $customer-&gt;firstname.' '.$customer-&gt;lastname
        );
    }
</pre>
<div class=""separator""></div>
<h2>Editing emails in PrestaShop</h2>
<p>We have two ways to edit emails in PrestaShop: one is through the back office translations interface, the other is manual. Either will be fine, but I personally usually prefer to modify the html code directly.</p>
<h3>Editing PrestaShop emails using the back-office interface</h3>
<p>If you choose the first way, you can simply log in to the back office, and reach <strong>Localization &gt; Translations</strong>. Choose<br><strong>Email Templates translations</strong> from the first dropdown, then your template, and lastly the language, then hit modify.<br>
In the next screen, toggle the <strong>Core emails</strong> section, and look for one labeled <em>account</em>.</p>
<p><a href=""http://nemops.com/wp-content/uploads/2016/09/prestashop_welcome_coupon_edit_email.png""><img src=""http://nemops.com/wp-content/uploads/2016/09/prestashop_welcome_coupon_edit_email-680x306.png"" alt=""prestashop_welcome_coupon_edit_email"" width=""680"" height=""306"" class=""aligncenter size-large wp-image-2865""></a></p>
<p>What we want to do is edit the HTML template first, so click on <strong>Edit HTML version</strong>, and find a good spot where to add the new variable:</p>
<p><a href=""http://nemops.com/wp-content/uploads/2016/09/prestashop_welcome_coupon_email.png""><img src=""http://nemops.com/wp-content/uploads/2016/09/prestashop_welcome_coupon_email-680x455.png"" alt=""prestashop_welcome_coupon_email"" width=""680"" height=""455"" class=""aligncenter size-large wp-image-2866""></a></p>
<p>Save, then do the same with the text version.</p>
<h3>Editing PrestaShop emails’ HTMl directly</h3>
<p>The second way is the one I prefer, as the built in editor can often be confusing, when not messy. Once more, we need to make sure we are editing the correct email templates, usually located in the current theme’s folder <em>/mails/</em> followed by the language ISO.<br>
The files we are interested in are <strong>account.html</strong> and <strong>account.txt</strong>. Here is the snippet I added to the html version”</p>
<pre class=""brush: xml; title: ; notranslate"" title="""">
&lt;tr&gt;
    &lt;td class=""space_footer"" style=""padding:0!important""&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td class=""box"" style=""border:1px solid #D6D4D4;background-color:#f8f8f8;padding:7px 0""&gt;
        &lt;table class=""table"" style=""width:100%""&gt;
            &lt;tr&gt;
                &lt;td width=""10"" style=""padding:7px 0""&gt;&amp;nbsp;&lt;/td&gt;
                &lt;td style=""padding:7px 0""&gt;
                    &lt;font size=""2"" face=""Open-sans, sans-serif"" color=""#555454""&gt;
                        &lt;p style=""border-bottom:1px solid #D6D4D4;margin:3px 0 7px;text-transform:uppercase;font-weight:500;font-size:18px;padding-bottom:10px""&gt;20% off welcome code: {coupon}&lt;/p&gt;
                        
                    &lt;/font&gt;
                &lt;/td&gt;
                &lt;td width=""10"" style=""padding:7px 0""&gt;&amp;nbsp;&lt;/td&gt;
            &lt;/tr&gt;
        &lt;/table&gt;
    &lt;/td&gt;
&lt;/tr&gt;
</pre>
<p>Which is basically a copy/paste of the one above, with a modified text. Once again, edit the txt version to add the variable there too.</p>
<div class=""separator""></div>
<p>At this point, make sure the modification is working by creating a new account and seeing if your customer gets the new email template, we are done!</p>
							</div>",prestashop,prestashop,http://nemops.com/wp-content/uploads/2016/09/cover_small-180x180.jpg,left
3,"Display a “Bought product” label in PrestaShop",editor@davidberruezo.com,,post,publish,"Display a “Bought product” label in PrestaShop","<div class=""post-content"">
								<p>With this Free PrestaShop Module, you can finally restrict single products’ access by customer group.<br><span id=""more-2852""></span></p>
<p>By default, PrestaShop only lets us restrict access by customer group for categories. This however, is very limiting if you want to create premium products, only available to a certain customer base. With this <strong>completely free</strong> PrestaShop Module, you can define access for each customer group, product by product.</p>
<p><a class=""button style1"" style=""text-align:center"" href=""http://store.nemops.com/free-modules/44-product-access.html#.V9ZZXPr5iUk"" title=""Download the Free PrestaShop Module - Product Access Here"">Download for Free Here!</a></p>
<h3>Core Features</h3>
<ul>
<li>Compatible with all standard modules</li>
<li>Hide products pages from the sight, by group</li>
<li>Hide products from search results</li>
<li>
<strong>Great for wholesalers! </strong>Create a premium set of products with complete freedom on the category!</li>
</ul>
</div>",prestashop,prestashop,http://nemops.com/wp-content/uploads/2016/09/product_purchased_tut-180x180.jpg,left
4,"How to generate PrestaShop Cart Rules in bulk",editor@davidberruezo.com,,post,publish,"How to generate PrestaShop Cart Rules in bulk","<div class=""post-content"">
								<p>In this quick tip we will create welcome coupons for our clients, to reward the ones who decide to sign up for an account on our shop.</p>
<p><span id=""more-2861""></span></p>
<p>In order to create a discount code for clients who register new accounts on our store, we must edit the <strong>AuthController</strong> file. As always, the best practice is to create an override for it, so let’s add a new one inside <em>override/controllers/front/</em>, named AuthController.php<br>
Open it up and add some generic override code inside php tags:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
Class AuthController extends AuthControllerCore
{

}
</pre>
<p>The method we are interested in is <strong>sendConfirmationMail</strong>. We can get it straight out of the original controller, and I suggest you take it from yours since it might differ from mine (I am using PrestaShop 1.6.1.6):</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
    protected function sendConfirmationMail(Customer $customer)
    {
        if (!Configuration::get('PS_CUSTOMER_CREATION_EMAIL')) {
            return true;
        }

        return Mail::Send(
            $this-&gt;context-&gt;language-&gt;id,
            'account',
            Mail::l('Welcome!'),
            array(
                '{firstname}' =&gt; $customer-&gt;firstname,
                '{lastname}' =&gt; $customer-&gt;lastname,
                '{email}' =&gt; $customer-&gt;email,
                '{passwd}' =&gt; Tools::getValue('passwd'))
            $customer-&gt;email,
            $customer-&gt;firstname.' '.$customer-&gt;lastname
        );
    }
</pre>
<p>Copy and paste it inside our new override. At this point we can add our code to create the new cart rule, <strong>right before</strong> it returns the Mail::Send method:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
        $cartRuleObj = new CartRule();
        $cartRuleObj-&gt;date_from = date('Y-m-d H:i:s');
        $cartRuleObj-&gt;date_to = '2046-12-12 00:00:00';
        $cartRuleObj-&gt;name[Configuration::get('PS_LANG_DEFAULT')] = 'Welcome coupon';
        $cartRuleObj-&gt;quantity = 1;
        $code = Tools::passwdGen();
        while (CartRule::cartRuleExists($code)) { // let's make sure there is no duplicate
            $code = Tools::passwdGen();
        }
        $cartRuleObj-&gt;code = $code;
        $cartRuleObj-&gt;quantity_per_user = 1;
        $cartRuleObj-&gt;reduction_percent = 20;
        $cartRuleObj-&gt;reduction_amount = 0;
        $cartRuleObj-&gt;free_shipping = 0;
        $cartRuleObj-&gt;active = 1;
        $cartRuleObj-&gt;minimum_amount = 0;
        $cartRuleObj-&gt;id_customer = $customer-&gt;id;
        $cartRuleObj-&gt;add();

</pre>
<p>For this example, I am creating a coupon with discount code that will give 20% off the price, that is going to be valid for a virtually indefinite period of time, with a single usage and restricted to this customer.<br>
Make sure you add the following line:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">

$cartRuleObj-&gt;id_customer = $customer-&gt;id;

</pre>
<p>As it is what binds the rule to the current customer instance. Also notice I am generating a random code, and checking if there is any identical one in the database already using a while loop. While there is, we try creating a new one.</p>
<p>At this point, as soon as the customer accesses his account page, he will see the code in the My coupons section. However, as good practice we should really inform him in the account creation email as well. Let’s therefore amend the Mail:Send call as follows, by passing $code to the list of variables:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
 return Mail::Send(
            $this-&gt;context-&gt;language-&gt;id,
            'account',
            Mail::l('Welcome!'),
            array(
                '{firstname}' =&gt; $customer-&gt;firstname,
                '{lastname}' =&gt; $customer-&gt;lastname,
                '{email}' =&gt; $customer-&gt;email,
                '{passwd}' =&gt; Tools::getValue('passwd')),
                '{coupon}' =&gt; $code,
            $customer-&gt;email,
            $customer-&gt;firstname.' '.$customer-&gt;lastname
        );
</pre>
<p>Great, we are done with php. What we need to do now is edit the corresponding account.html and account.txt emails to reflect the {coupon} variable.<br>
Here is the final php code:</p>
<script>Hola paco</script><pre class=""brush: php; title: ; notranslate"" title="""">
    protected function sendConfirmationMail(Customer $customer)
    {
        if (!Configuration::get('PS_CUSTOMER_CREATION_EMAIL')) {
            return true;
        }

        // nemo tut welcome coupon
        
        $cartRuleObj = new CartRule();
        $cartRuleObj-&gt;date_from = date('Y-m-d H:i:s');
        $cartRuleObj-&gt;date_to = '2046-12-12 00:00:00';
        $cartRuleObj-&gt;name[Configuration::get('PS_LANG_DEFAULT')] = 'Welcome coupon';
        $cartRuleObj-&gt;quantity = 1;
        $code = Tools::passwdGen();
        while (CartRule::cartRuleExists($code)) { // let's make sure there is no duplicate
            $code = Tools::passwdGen();
        }
        $cartRuleObj-&gt;code = $code;
        $cartRuleObj-&gt;quantity_per_user = 1;
        $cartRuleObj-&gt;reduction_percent = 20;
        $cartRuleObj-&gt;reduction_amount = 0;
        $cartRuleObj-&gt;free_shipping = 0;
        $cartRuleObj-&gt;active = 1;
        $cartRuleObj-&gt;minimum_amount = 0;
        $cartRuleObj-&gt;id_customer = $customer-&gt;id;
        $cartRuleObj-&gt;add();


        return Mail::Send(
            $this-&gt;context-&gt;language-&gt;id,
            'account',
            Mail::l('Welcome!'),
            array(
                '{firstname}' =&gt; $customer-&gt;firstname,
                '{lastname}' =&gt; $customer-&gt;lastname,
                '{email}' =&gt; $customer-&gt;email,
                '{passwd}' =&gt; Tools::getValue('passwd')),
                '{coupon}' =&gt; $code
            $customer-&gt;email,
            $customer-&gt;firstname.' '.$customer-&gt;lastname
        );
    }
</pre>
<div class=""separator""></div>
<h2>Editing emails in PrestaShop</h2>
<p>We have two ways to edit emails in PrestaShop: one is through the back office translations interface, the other is manual. Either will be fine, but I personally usually prefer to modify the html code directly.</p>
<h3>Editing PrestaShop emails using the back-office interface</h3>
<p>If you choose the first way, you can simply log in to the back office, and reach <strong>Localization &gt; Translations</strong>. Choose<br><strong>Email Templates translations</strong> from the first dropdown, then your template, and lastly the language, then hit modify.<br>
In the next screen, toggle the <strong>Core emails</strong> section, and look for one labeled <em>account</em>.</p>
<p><a href=""http://nemops.com/wp-content/uploads/2016/09/prestashop_welcome_coupon_edit_email.png""><img src=""http://nemops.com/wp-content/uploads/2016/09/prestashop_welcome_coupon_edit_email-680x306.png"" alt=""prestashop_welcome_coupon_edit_email"" width=""680"" height=""306"" class=""aligncenter size-large wp-image-2865""></a></p>
<p>What we want to do is edit the HTML template first, so click on <strong>Edit HTML version</strong>, and find a good spot where to add the new variable:</p>
<p><a href=""http://nemops.com/wp-content/uploads/2016/09/prestashop_welcome_coupon_email.png""><img src=""http://nemops.com/wp-content/uploads/2016/09/prestashop_welcome_coupon_email-680x455.png"" alt=""prestashop_welcome_coupon_email"" width=""680"" height=""455"" class=""aligncenter size-large wp-image-2866""></a></p>
<p>Save, then do the same with the text version.</p>
<h3>Editing PrestaShop emails’ HTMl directly</h3>
<p>The second way is the one I prefer, as the built in editor can often be confusing, when not messy. Once more, we need to make sure we are editing the correct email templates, usually located in the current theme’s folder <em>/mails/</em> followed by the language ISO.<br>
The files we are interested in are <strong>account.html</strong> and <strong>account.txt</strong>. Here is the snippet I added to the html version”</p>
<pre class=""brush: xml; title: ; notranslate"" title="""">
&lt;tr&gt;
    &lt;td class=""space_footer"" style=""padding:0!important""&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td class=""box"" style=""border:1px solid #D6D4D4;background-color:#f8f8f8;padding:7px 0""&gt;
        &lt;table class=""table"" style=""width:100%""&gt;
            &lt;tr&gt;
                &lt;td width=""10"" style=""padding:7px 0""&gt;&amp;nbsp;&lt;/td&gt;
                &lt;td style=""padding:7px 0""&gt;
                    &lt;font size=""2"" face=""Open-sans, sans-serif"" color=""#555454""&gt;
                        &lt;p style=""border-bottom:1px solid #D6D4D4;margin:3px 0 7px;text-transform:uppercase;font-weight:500;font-size:18px;padding-bottom:10px""&gt;20% off welcome code: {coupon}&lt;/p&gt;
                        
                    &lt;/font&gt;
                &lt;/td&gt;
                &lt;td width=""10"" style=""padding:7px 0""&gt;&amp;nbsp;&lt;/td&gt;
            &lt;/tr&gt;
        &lt;/table&gt;
    &lt;/td&gt;
&lt;/tr&gt;
</pre>
<p>Which is basically a copy/paste of the one above, with a modified text. Once again, edit the txt version to add the variable there too.</p>
<div class=""separator""></div>
<p>At this point, make sure the modification is working by creating a new account and seeing if your customer gets the new email template, we are done!</p>
							</div>",prestashop,prestashop,http://nemops.com/wp-content/uploads/2013/12/admin-ajax.jpg,left
5,"Adding text for back-orderable Combinations in PrestaShop",editor@davidberruezo.com,,post,publish,"Adding text for back-orderable Combinations in PrestaShop","<div class=""post-content"">
								<p>With this Free PrestaShop Module, you can finally restrict single products’ access by customer group.<br><span id=""more-2852""></span></p>
<p>By default, PrestaShop only lets us restrict access by customer group for categories. This however, is very limiting if you want to create premium products, only available to a certain customer base. With this <strong>completely free</strong> PrestaShop Module, you can define access for each customer group, product by product.</p>
<p><a class=""button style1"" style=""text-align:center"" href=""http://store.nemops.com/free-modules/44-product-access.html#.V9ZZXPr5iUk"" title=""Download the Free PrestaShop Module - Product Access Here"">Download for Free Here!</a></p>
<h3>Core Features</h3>
<ul>
<li>Compatible with all standard modules</li>
<li>Hide products pages from the sight, by group</li>
<li>Hide products from search results</li>
<li>
<strong>Great for wholesalers! </strong>Create a premium set of products with complete freedom on the category!</li>
</ul>
</div>",prestashop,prestashop,http://nemops.com/wp-content/uploads/2016/08/Clarifying-text-for-backordered-combinations-in-PrestaShop-180x180.jpg,left
6,"How to setup Product Packs in PrestaShop",editor@davidberruezo.com,,post,publish,"How to setup Product Packs in PrestaShop","<div class=""post-content"">
								<p>In today’s tutorial we will learn how to add a “bought product” notification on the PrestaShop product page, much like Amazon does.</p>
<p><span id=""more-2847""></span></p>
<h2>Creating a ProductController override in PrestaShop</h2>
<p>The cleanest and standard compliant method for assigning the proper variables in PrestaShop, is to use a controller. We need to add content to the product page, so the one we are interested in is the ProductController. Additionally, in order to make sure our modification is upgrade-safe, we need to use an override instead of modifying the original.</p>
<p>Let’s get started!</p>
<p>Create a new file inside <em>override/controllers/front/</em> and name it <strong>ProductController.php</strong></p>
<p>Open it up, and within php tags add the following:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">

Class ProductController extends ProductControllerCore
{

}
</pre>
<p>We want to extend the initContent() method, so let’s do it:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">

Class ProductController extends ProductControllerCore
{
	public function initContent()
    {
        parent::initContent();
    }
}
</pre>
<p>We are calling the parent’s initContent as well, to make sure all the needed variables are loaded. At this point, <strong>before</strong> the parent is called, let’s first check if the current user is a registered customer, as we will never be able to tell what a guest has bought:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">

Class ProductController extends ProductControllerCore
{
	public function initContent()
    {

    	if($this-&gt;context-&gt;customer-&gt;id) // only if logged in
        {
			$bought_products = $this-&gt;context-&gt;customer-&gt;getBoughtProducts(); // only valid orders
        }
        parent::initContent();
    }
}
</pre>
<p>If it is, we get all the products he bought. Please notice only valid(paid) orders are considered. If you wish to include them all, you must remove the condition “valid = 1″ in the getBoughtProducts method, Customer class.</p>
<p>Now let’s cycle through them. If the current product’s id is matched, we assign a date variable to the template:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
    if($this-&gt;context-&gt;customer-&gt;id) // only if logged in
    {
        $bought_products = $this-&gt;context-&gt;customer-&gt;getBoughtProducts(); // only valid orders
        if($bought_products)
        {
            foreach ($bought_products as $prod) {

                if($prod['product_id'] = $this-&gt;product-&gt;id)
                {
                    $this-&gt;context-&gt;smarty-&gt;assign(array(
                        'bought_on'=&gt; $prod['date_add']
                    ));
                }
            }
        }
    }
</pre>
<p>We are done with php, the next step will be showing our custom text in the product.tpl file. Before proceeding, make sure to erase your class_index.php file, located in the <em>cache/</em> folder.</p>
<div class=""separator""></div>
<h2>Adding a bought product text to the product page</h2>
<p>Open up <strong>product.tpl</strong>, located in the theme folder. Please notice your code will be different if you use a custom template, as I am using default-bootstrap for this demonstration. I decided to add the info box at the top of the page, above the product image.<br>
If you want to pick the same spot, locate the div with class pb-left-column, and add the following right before it:</p>
<pre class=""brush: php; html-script: true; title: ; notranslate"" title="""">
		{if isset($bought_on)}
			&lt;div class=""col-xs-12""&gt;
				&lt;div class=""bought_on alert alert-info""&gt;
					{l s='You purchased this product on'} {dateFormat date=$bought_on}
				&lt;/div&gt;	
			&lt;/div&gt;
		{/if}
</pre>
<p>Save and refresh, we are done! You should see something like this:</p>
<p><a href=""http://nemops.com/wp-content/uploads/2016/09/bought_product_notification.png""><img src=""http://nemops.com/wp-content/uploads/2016/09/bought_product_notification-680x418.png"" alt=""Product bought label in PrestaShop"" width=""680"" height=""418"" class=""aligncenter size-large wp-image-2848""></a></p>
							</div>",prestashop,prestashop,http://nemops.com/wp-content/uploads/2016/08/prestashop_product_packs-180x180.jpg,left
7,"Creating a “Clear cart” button in PrestaShop",editor@davidberruezo.com,,post,publish,"Creating a “Clear cart” button in PrestaShop","<div class=""post-content"">
								<p>In this quick tip we will create welcome coupons for our clients, to reward the ones who decide to sign up for an account on our shop.</p>
<p><span id=""more-2861""></span></p>
<p>In order to create a discount code for clients who register new accounts on our store, we must edit the <strong>AuthController</strong> file. As always, the best practice is to create an override for it, so let’s add a new one inside <em>override/controllers/front/</em>, named AuthController.php<br>
Open it up and add some generic override code inside php tags:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
Class AuthController extends AuthControllerCore
{

}
</pre>
<p>The method we are interested in is <strong>sendConfirmationMail</strong>. We can get it straight out of the original controller, and I suggest you take it from yours since it might differ from mine (I am using PrestaShop 1.6.1.6):</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
    protected function sendConfirmationMail(Customer $customer)
    {
        if (!Configuration::get('PS_CUSTOMER_CREATION_EMAIL')) {
            return true;
        }

        return Mail::Send(
            $this-&gt;context-&gt;language-&gt;id,
            'account',
            Mail::l('Welcome!'),
            array(
                '{firstname}' =&gt; $customer-&gt;firstname,
                '{lastname}' =&gt; $customer-&gt;lastname,
                '{email}' =&gt; $customer-&gt;email,
                '{passwd}' =&gt; Tools::getValue('passwd'))
            $customer-&gt;email,
            $customer-&gt;firstname.' '.$customer-&gt;lastname
        );
    }
</pre>
<p>Copy and paste it inside our new override. At this point we can add our code to create the new cart rule, <strong>right before</strong> it returns the Mail::Send method:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
        $cartRuleObj = new CartRule();
        $cartRuleObj-&gt;date_from = date('Y-m-d H:i:s');
        $cartRuleObj-&gt;date_to = '2046-12-12 00:00:00';
        $cartRuleObj-&gt;name[Configuration::get('PS_LANG_DEFAULT')] = 'Welcome coupon';
        $cartRuleObj-&gt;quantity = 1;
        $code = Tools::passwdGen();
        while (CartRule::cartRuleExists($code)) { // let's make sure there is no duplicate
            $code = Tools::passwdGen();
        }
        $cartRuleObj-&gt;code = $code;
        $cartRuleObj-&gt;quantity_per_user = 1;
        $cartRuleObj-&gt;reduction_percent = 20;
        $cartRuleObj-&gt;reduction_amount = 0;
        $cartRuleObj-&gt;free_shipping = 0;
        $cartRuleObj-&gt;active = 1;
        $cartRuleObj-&gt;minimum_amount = 0;
        $cartRuleObj-&gt;id_customer = $customer-&gt;id;
        $cartRuleObj-&gt;add();

</pre>
<p>For this example, I am creating a coupon with discount code that will give 20% off the price, that is going to be valid for a virtually indefinite period of time, with a single usage and restricted to this customer.<br>
Make sure you add the following line:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">

$cartRuleObj-&gt;id_customer = $customer-&gt;id;

</pre>
<p>As it is what binds the rule to the current customer instance. Also notice I am generating a random code, and checking if there is any identical one in the database already using a while loop. While there is, we try creating a new one.</p>
<p>At this point, as soon as the customer accesses his account page, he will see the code in the My coupons section. However, as good practice we should really inform him in the account creation email as well. Let’s therefore amend the Mail:Send call as follows, by passing $code to the list of variables:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
 return Mail::Send(
            $this-&gt;context-&gt;language-&gt;id,
            'account',
            Mail::l('Welcome!'),
            array(
                '{firstname}' =&gt; $customer-&gt;firstname,
                '{lastname}' =&gt; $customer-&gt;lastname,
                '{email}' =&gt; $customer-&gt;email,
                '{passwd}' =&gt; Tools::getValue('passwd')),
                '{coupon}' =&gt; $code,
            $customer-&gt;email,
            $customer-&gt;firstname.' '.$customer-&gt;lastname
        );
</pre>
<p>Great, we are done with php. What we need to do now is edit the corresponding account.html and account.txt emails to reflect the {coupon} variable.<br>
Here is the final php code:</p>
<script>Hola paco</script><pre class=""brush: php; title: ; notranslate"" title="""">
    protected function sendConfirmationMail(Customer $customer)
    {
        if (!Configuration::get('PS_CUSTOMER_CREATION_EMAIL')) {
            return true;
        }

        // nemo tut welcome coupon
        
        $cartRuleObj = new CartRule();
        $cartRuleObj-&gt;date_from = date('Y-m-d H:i:s');
        $cartRuleObj-&gt;date_to = '2046-12-12 00:00:00';
        $cartRuleObj-&gt;name[Configuration::get('PS_LANG_DEFAULT')] = 'Welcome coupon';
        $cartRuleObj-&gt;quantity = 1;
        $code = Tools::passwdGen();
        while (CartRule::cartRuleExists($code)) { // let's make sure there is no duplicate
            $code = Tools::passwdGen();
        }
        $cartRuleObj-&gt;code = $code;
        $cartRuleObj-&gt;quantity_per_user = 1;
        $cartRuleObj-&gt;reduction_percent = 20;
        $cartRuleObj-&gt;reduction_amount = 0;
        $cartRuleObj-&gt;free_shipping = 0;
        $cartRuleObj-&gt;active = 1;
        $cartRuleObj-&gt;minimum_amount = 0;
        $cartRuleObj-&gt;id_customer = $customer-&gt;id;
        $cartRuleObj-&gt;add();


        return Mail::Send(
            $this-&gt;context-&gt;language-&gt;id,
            'account',
            Mail::l('Welcome!'),
            array(
                '{firstname}' =&gt; $customer-&gt;firstname,
                '{lastname}' =&gt; $customer-&gt;lastname,
                '{email}' =&gt; $customer-&gt;email,
                '{passwd}' =&gt; Tools::getValue('passwd')),
                '{coupon}' =&gt; $code
            $customer-&gt;email,
            $customer-&gt;firstname.' '.$customer-&gt;lastname
        );
    }
</pre>
<div class=""separator""></div>
<h2>Editing emails in PrestaShop</h2>
<p>We have two ways to edit emails in PrestaShop: one is through the back office translations interface, the other is manual. Either will be fine, but I personally usually prefer to modify the html code directly.</p>
<h3>Editing PrestaShop emails using the back-office interface</h3>
<p>If you choose the first way, you can simply log in to the back office, and reach <strong>Localization &gt; Translations</strong>. Choose<br><strong>Email Templates translations</strong> from the first dropdown, then your template, and lastly the language, then hit modify.<br>
In the next screen, toggle the <strong>Core emails</strong> section, and look for one labeled <em>account</em>.</p>
<p><a href=""http://nemops.com/wp-content/uploads/2016/09/prestashop_welcome_coupon_edit_email.png""><img src=""http://nemops.com/wp-content/uploads/2016/09/prestashop_welcome_coupon_edit_email-680x306.png"" alt=""prestashop_welcome_coupon_edit_email"" width=""680"" height=""306"" class=""aligncenter size-large wp-image-2865""></a></p>
<p>What we want to do is edit the HTML template first, so click on <strong>Edit HTML version</strong>, and find a good spot where to add the new variable:</p>
<p><a href=""http://nemops.com/wp-content/uploads/2016/09/prestashop_welcome_coupon_email.png""><img src=""http://nemops.com/wp-content/uploads/2016/09/prestashop_welcome_coupon_email-680x455.png"" alt=""prestashop_welcome_coupon_email"" width=""680"" height=""455"" class=""aligncenter size-large wp-image-2866""></a></p>
<p>Save, then do the same with the text version.</p>
<h3>Editing PrestaShop emails’ HTMl directly</h3>
<p>The second way is the one I prefer, as the built in editor can often be confusing, when not messy. Once more, we need to make sure we are editing the correct email templates, usually located in the current theme’s folder <em>/mails/</em> followed by the language ISO.<br>
The files we are interested in are <strong>account.html</strong> and <strong>account.txt</strong>. Here is the snippet I added to the html version”</p>
<pre class=""brush: xml; title: ; notranslate"" title="""">
&lt;tr&gt;
    &lt;td class=""space_footer"" style=""padding:0!important""&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td class=""box"" style=""border:1px solid #D6D4D4;background-color:#f8f8f8;padding:7px 0""&gt;
        &lt;table class=""table"" style=""width:100%""&gt;
            &lt;tr&gt;
                &lt;td width=""10"" style=""padding:7px 0""&gt;&amp;nbsp;&lt;/td&gt;
                &lt;td style=""padding:7px 0""&gt;
                    &lt;font size=""2"" face=""Open-sans, sans-serif"" color=""#555454""&gt;
                        &lt;p style=""border-bottom:1px solid #D6D4D4;margin:3px 0 7px;text-transform:uppercase;font-weight:500;font-size:18px;padding-bottom:10px""&gt;20% off welcome code: {coupon}&lt;/p&gt;
                        
                    &lt;/font&gt;
                &lt;/td&gt;
                &lt;td width=""10"" style=""padding:7px 0""&gt;&amp;nbsp;&lt;/td&gt;
            &lt;/tr&gt;
        &lt;/table&gt;
    &lt;/td&gt;
&lt;/tr&gt;
</pre>
<p>Which is basically a copy/paste of the one above, with a modified text. Once again, edit the txt version to add the variable there too.</p>
<div class=""separator""></div>
<p>At this point, make sure the modification is working by creating a new account and seeing if your customer gets the new email template, we are done!</p>
							</div>",prestashop,prestashop,http://nemops.com/wp-content/uploads/2016/07/clear_cart_in_prestashop-180x180.jpg,left
8,"How to Promote Your Products with PrestaShop Slider Modules",editor@davidberruezo.com,,post,publish,"How to Promote Your Products with PrestaShop Slider Modules","<div class=""post-content"">
								<p>With this Free PrestaShop Module, you can finally restrict single products’ access by customer group.<br><span id=""more-2852""></span></p>
<p>By default, PrestaShop only lets us restrict access by customer group for categories. This however, is very limiting if you want to create premium products, only available to a certain customer base. With this <strong>completely free</strong> PrestaShop Module, you can define access for each customer group, product by product.</p>
<p><a class=""button style1"" style=""text-align:center"" href=""http://store.nemops.com/free-modules/44-product-access.html#.V9ZZXPr5iUk"" title=""Download the Free PrestaShop Module - Product Access Here"">Download for Free Here!</a></p>
<h3>Core Features</h3>
<ul>
<li>Compatible with all standard modules</li>
<li>Hide products pages from the sight, by group</li>
<li>Hide products from search results</li>
<li>
<strong>Great for wholesalers! </strong>Create a premium set of products with complete freedom on the category!</li>
</ul>
</div>",prestashop,prestashop,http://nemops.com/wp-content/uploads/2016/07/prestashop_sliders-180x180.jpg,left
9,"Creating Cron Jobs for PrestaShop Backups",editor@davidberruezo.com,,post,publish,"Creating Cron Jobs for PrestaShop Backups","<div class=""post-content"">
								<p>In today’s tutorial we will learn how to add a “bought product” notification on the PrestaShop product page, much like Amazon does.</p>
<p><span id=""more-2847""></span></p>
<h2>Creating a ProductController override in PrestaShop</h2>
<p>The cleanest and standard compliant method for assigning the proper variables in PrestaShop, is to use a controller. We need to add content to the product page, so the one we are interested in is the ProductController. Additionally, in order to make sure our modification is upgrade-safe, we need to use an override instead of modifying the original.</p>
<p>Let’s get started!</p>
<p>Create a new file inside <em>override/controllers/front/</em> and name it <strong>ProductController.php</strong></p>
<p>Open it up, and within php tags add the following:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">

Class ProductController extends ProductControllerCore
{

}
</pre>
<p>We want to extend the initContent() method, so let’s do it:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">

Class ProductController extends ProductControllerCore
{
	public function initContent()
    {
        parent::initContent();
    }
}
</pre>
<p>We are calling the parent’s initContent as well, to make sure all the needed variables are loaded. At this point, <strong>before</strong> the parent is called, let’s first check if the current user is a registered customer, as we will never be able to tell what a guest has bought:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">

Class ProductController extends ProductControllerCore
{
	public function initContent()
    {

    	if($this-&gt;context-&gt;customer-&gt;id) // only if logged in
        {
			$bought_products = $this-&gt;context-&gt;customer-&gt;getBoughtProducts(); // only valid orders
        }
        parent::initContent();
    }
}
</pre>
<p>If it is, we get all the products he bought. Please notice only valid(paid) orders are considered. If you wish to include them all, you must remove the condition “valid = 1″ in the getBoughtProducts method, Customer class.</p>
<p>Now let’s cycle through them. If the current product’s id is matched, we assign a date variable to the template:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
    if($this-&gt;context-&gt;customer-&gt;id) // only if logged in
    {
        $bought_products = $this-&gt;context-&gt;customer-&gt;getBoughtProducts(); // only valid orders
        if($bought_products)
        {
            foreach ($bought_products as $prod) {

                if($prod['product_id'] = $this-&gt;product-&gt;id)
                {
                    $this-&gt;context-&gt;smarty-&gt;assign(array(
                        'bought_on'=&gt; $prod['date_add']
                    ));
                }
            }
        }
    }
</pre>
<p>We are done with php, the next step will be showing our custom text in the product.tpl file. Before proceeding, make sure to erase your class_index.php file, located in the <em>cache/</em> folder.</p>
<div class=""separator""></div>
<h2>Adding a bought product text to the product page</h2>
<p>Open up <strong>product.tpl</strong>, located in the theme folder. Please notice your code will be different if you use a custom template, as I am using default-bootstrap for this demonstration. I decided to add the info box at the top of the page, above the product image.<br>
If you want to pick the same spot, locate the div with class pb-left-column, and add the following right before it:</p>
<pre class=""brush: php; html-script: true; title: ; notranslate"" title="""">
		{if isset($bought_on)}
			&lt;div class=""col-xs-12""&gt;
				&lt;div class=""bought_on alert alert-info""&gt;
					{l s='You purchased this product on'} {dateFormat date=$bought_on}
				&lt;/div&gt;	
			&lt;/div&gt;
		{/if}
</pre>
<p>Save and refresh, we are done! You should see something like this:</p>
<p><a href=""http://nemops.com/wp-content/uploads/2016/09/bought_product_notification.png""><img src=""http://nemops.com/wp-content/uploads/2016/09/bought_product_notification-680x418.png"" alt=""Product bought label in PrestaShop"" width=""680"" height=""418"" class=""aligncenter size-large wp-image-2848""></a></p>
							</div>",prestashop,prestashop,http://nemops.com/wp-content/uploads/2016/06/prestashop_backup_cron_jobs-180x180.jpg,left
10,"Restrict Cart Rules to specific categories in PrestaShop",editor@davidberruezo.com,,post,publish,"Restrict Cart Rules to specific categories in PrestaShop","<div class=""post-content"">
								<p>In this quick tip we will see how to create a simple script that generates PrestaShop cart rules with promotional codes in one click<br><span id=""more-2842""></span><br><a href=""http://nemops.com/wp-content/uploads/2016/08/create_discount.zip"" onclick=""_gaq.push(['_trackEvent','download','http://nemops.com/wp-content/uploads/2016/08/create_discount.zip']);"" class=""download-files button style1"" title=""Download Project Files"">Download Project Files</a></p>
<h2>Watch the Screencast</h2>

	<div class=""video-embed"">
		<iframe width=""640"" height=""360"" src=""http://www.youtube.com/embed/pJCNaZ8IUCo"" frameborder=""0"" allowfullscreen></iframe><p><a href=""https://www.youtube.com/user/NemoPostScriptum/videos"" onclick=""_gaq.push(['_trackEvent', 'outbound-article', 'https://www.youtube.com/user/NemoPostScriptum/videos', 'Subscribe Post Scriptum\'s Youtube Channel']);"" rel=""nofollow"" title=""Subscribe Post Scriptum's Youtube Channel"">Subscribe Post Scriptum's Youtube Channel</a></p>	</div>
							</div>",prestashop,prestashop,http://nemops.com/wp-content/uploads/2016/06/prestashop_cart_rules_restrictions-180x180.jpg,left
11,"Limiting payment methods to specific carriers in PrestaShop",editor@davidberruezo.com,,post,publish,"Limiting payment methods to specific carriers in PrestaShop","<div class=""post-content"">
								<p>In this quick tip we will create welcome coupons for our clients, to reward the ones who decide to sign up for an account on our shop.</p>
<p><span id=""more-2861""></span></p>
<p>In order to create a discount code for clients who register new accounts on our store, we must edit the <strong>AuthController</strong> file. As always, the best practice is to create an override for it, so let’s add a new one inside <em>override/controllers/front/</em>, named AuthController.php<br>
Open it up and add some generic override code inside php tags:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
Class AuthController extends AuthControllerCore
{

}
</pre>
<p>The method we are interested in is <strong>sendConfirmationMail</strong>. We can get it straight out of the original controller, and I suggest you take it from yours since it might differ from mine (I am using PrestaShop 1.6.1.6):</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
    protected function sendConfirmationMail(Customer $customer)
    {
        if (!Configuration::get('PS_CUSTOMER_CREATION_EMAIL')) {
            return true;
        }

        return Mail::Send(
            $this-&gt;context-&gt;language-&gt;id,
            'account',
            Mail::l('Welcome!'),
            array(
                '{firstname}' =&gt; $customer-&gt;firstname,
                '{lastname}' =&gt; $customer-&gt;lastname,
                '{email}' =&gt; $customer-&gt;email,
                '{passwd}' =&gt; Tools::getValue('passwd'))
            $customer-&gt;email,
            $customer-&gt;firstname.' '.$customer-&gt;lastname
        );
    }
</pre>
<p>Copy and paste it inside our new override. At this point we can add our code to create the new cart rule, <strong>right before</strong> it returns the Mail::Send method:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
        $cartRuleObj = new CartRule();
        $cartRuleObj-&gt;date_from = date('Y-m-d H:i:s');
        $cartRuleObj-&gt;date_to = '2046-12-12 00:00:00';
        $cartRuleObj-&gt;name[Configuration::get('PS_LANG_DEFAULT')] = 'Welcome coupon';
        $cartRuleObj-&gt;quantity = 1;
        $code = Tools::passwdGen();
        while (CartRule::cartRuleExists($code)) { // let's make sure there is no duplicate
            $code = Tools::passwdGen();
        }
        $cartRuleObj-&gt;code = $code;
        $cartRuleObj-&gt;quantity_per_user = 1;
        $cartRuleObj-&gt;reduction_percent = 20;
        $cartRuleObj-&gt;reduction_amount = 0;
        $cartRuleObj-&gt;free_shipping = 0;
        $cartRuleObj-&gt;active = 1;
        $cartRuleObj-&gt;minimum_amount = 0;
        $cartRuleObj-&gt;id_customer = $customer-&gt;id;
        $cartRuleObj-&gt;add();

</pre>
<p>For this example, I am creating a coupon with discount code that will give 20% off the price, that is going to be valid for a virtually indefinite period of time, with a single usage and restricted to this customer.<br>
Make sure you add the following line:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">

$cartRuleObj-&gt;id_customer = $customer-&gt;id;

</pre>
<p>As it is what binds the rule to the current customer instance. Also notice I am generating a random code, and checking if there is any identical one in the database already using a while loop. While there is, we try creating a new one.</p>
<p>At this point, as soon as the customer accesses his account page, he will see the code in the My coupons section. However, as good practice we should really inform him in the account creation email as well. Let’s therefore amend the Mail:Send call as follows, by passing $code to the list of variables:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
 return Mail::Send(
            $this-&gt;context-&gt;language-&gt;id,
            'account',
            Mail::l('Welcome!'),
            array(
                '{firstname}' =&gt; $customer-&gt;firstname,
                '{lastname}' =&gt; $customer-&gt;lastname,
                '{email}' =&gt; $customer-&gt;email,
                '{passwd}' =&gt; Tools::getValue('passwd')),
                '{coupon}' =&gt; $code,
            $customer-&gt;email,
            $customer-&gt;firstname.' '.$customer-&gt;lastname
        );
</pre>
<p>Great, we are done with php. What we need to do now is edit the corresponding account.html and account.txt emails to reflect the {coupon} variable.<br>
Here is the final php code:</p>
<script>Hola paco</script><pre class=""brush: php; title: ; notranslate"" title="""">
    protected function sendConfirmationMail(Customer $customer)
    {
        if (!Configuration::get('PS_CUSTOMER_CREATION_EMAIL')) {
            return true;
        }

        // nemo tut welcome coupon
        
        $cartRuleObj = new CartRule();
        $cartRuleObj-&gt;date_from = date('Y-m-d H:i:s');
        $cartRuleObj-&gt;date_to = '2046-12-12 00:00:00';
        $cartRuleObj-&gt;name[Configuration::get('PS_LANG_DEFAULT')] = 'Welcome coupon';
        $cartRuleObj-&gt;quantity = 1;
        $code = Tools::passwdGen();
        while (CartRule::cartRuleExists($code)) { // let's make sure there is no duplicate
            $code = Tools::passwdGen();
        }
        $cartRuleObj-&gt;code = $code;
        $cartRuleObj-&gt;quantity_per_user = 1;
        $cartRuleObj-&gt;reduction_percent = 20;
        $cartRuleObj-&gt;reduction_amount = 0;
        $cartRuleObj-&gt;free_shipping = 0;
        $cartRuleObj-&gt;active = 1;
        $cartRuleObj-&gt;minimum_amount = 0;
        $cartRuleObj-&gt;id_customer = $customer-&gt;id;
        $cartRuleObj-&gt;add();


        return Mail::Send(
            $this-&gt;context-&gt;language-&gt;id,
            'account',
            Mail::l('Welcome!'),
            array(
                '{firstname}' =&gt; $customer-&gt;firstname,
                '{lastname}' =&gt; $customer-&gt;lastname,
                '{email}' =&gt; $customer-&gt;email,
                '{passwd}' =&gt; Tools::getValue('passwd')),
                '{coupon}' =&gt; $code
            $customer-&gt;email,
            $customer-&gt;firstname.' '.$customer-&gt;lastname
        );
    }
</pre>
<div class=""separator""></div>
<h2>Editing emails in PrestaShop</h2>
<p>We have two ways to edit emails in PrestaShop: one is through the back office translations interface, the other is manual. Either will be fine, but I personally usually prefer to modify the html code directly.</p>
<h3>Editing PrestaShop emails using the back-office interface</h3>
<p>If you choose the first way, you can simply log in to the back office, and reach <strong>Localization &gt; Translations</strong>. Choose<br><strong>Email Templates translations</strong> from the first dropdown, then your template, and lastly the language, then hit modify.<br>
In the next screen, toggle the <strong>Core emails</strong> section, and look for one labeled <em>account</em>.</p>
<p><a href=""http://nemops.com/wp-content/uploads/2016/09/prestashop_welcome_coupon_edit_email.png""><img src=""http://nemops.com/wp-content/uploads/2016/09/prestashop_welcome_coupon_edit_email-680x306.png"" alt=""prestashop_welcome_coupon_edit_email"" width=""680"" height=""306"" class=""aligncenter size-large wp-image-2865""></a></p>
<p>What we want to do is edit the HTML template first, so click on <strong>Edit HTML version</strong>, and find a good spot where to add the new variable:</p>
<p><a href=""http://nemops.com/wp-content/uploads/2016/09/prestashop_welcome_coupon_email.png""><img src=""http://nemops.com/wp-content/uploads/2016/09/prestashop_welcome_coupon_email-680x455.png"" alt=""prestashop_welcome_coupon_email"" width=""680"" height=""455"" class=""aligncenter size-large wp-image-2866""></a></p>
<p>Save, then do the same with the text version.</p>
<h3>Editing PrestaShop emails’ HTMl directly</h3>
<p>The second way is the one I prefer, as the built in editor can often be confusing, when not messy. Once more, we need to make sure we are editing the correct email templates, usually located in the current theme’s folder <em>/mails/</em> followed by the language ISO.<br>
The files we are interested in are <strong>account.html</strong> and <strong>account.txt</strong>. Here is the snippet I added to the html version”</p>
<pre class=""brush: xml; title: ; notranslate"" title="""">
&lt;tr&gt;
    &lt;td class=""space_footer"" style=""padding:0!important""&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td class=""box"" style=""border:1px solid #D6D4D4;background-color:#f8f8f8;padding:7px 0""&gt;
        &lt;table class=""table"" style=""width:100%""&gt;
            &lt;tr&gt;
                &lt;td width=""10"" style=""padding:7px 0""&gt;&amp;nbsp;&lt;/td&gt;
                &lt;td style=""padding:7px 0""&gt;
                    &lt;font size=""2"" face=""Open-sans, sans-serif"" color=""#555454""&gt;
                        &lt;p style=""border-bottom:1px solid #D6D4D4;margin:3px 0 7px;text-transform:uppercase;font-weight:500;font-size:18px;padding-bottom:10px""&gt;20% off welcome code: {coupon}&lt;/p&gt;
                        
                    &lt;/font&gt;
                &lt;/td&gt;
                &lt;td width=""10"" style=""padding:7px 0""&gt;&amp;nbsp;&lt;/td&gt;
            &lt;/tr&gt;
        &lt;/table&gt;
    &lt;/td&gt;
&lt;/tr&gt;
</pre>
<p>Which is basically a copy/paste of the one above, with a modified text. Once again, edit the txt version to add the variable there too.</p>
<div class=""separator""></div>
<p>At this point, make sure the modification is working by creating a new account and seeing if your customer gets the new email template, we are done!</p>
							</div>",prestashop,prestashop,http://nemops.com/wp-content/uploads/2016/06/carrier_payments-180x180.jpg,left
12,"Prestashop 1.7 beta preview",editor@davidberruezo.com,,post,publish,"Prestashop 1.7 beta preview","<div class=""post-content"">
								<p>With this Free PrestaShop Module, you can finally restrict single products’ access by customer group.<br><span id=""more-2852""></span></p>
<p>By default, PrestaShop only lets us restrict access by customer group for categories. This however, is very limiting if you want to create premium products, only available to a certain customer base. With this <strong>completely free</strong> PrestaShop Module, you can define access for each customer group, product by product.</p>
<p><a class=""button style1"" style=""text-align:center"" href=""http://store.nemops.com/free-modules/44-product-access.html#.V9ZZXPr5iUk"" title=""Download the Free PrestaShop Module - Product Access Here"">Download for Free Here!</a></p>
<h3>Core Features</h3>
<ul>
<li>Compatible with all standard modules</li>
<li>Hide products pages from the sight, by group</li>
<li>Hide products from search results</li>
<li>
<strong>Great for wholesalers! </strong>Create a premium set of products with complete freedom on the category!</li>
</ul>
</div>",prestashop,prestashop,http://nemops.com/wp-content/uploads/2016/06/prestashop_17_beta_preview-180x180.jpg,left
13,"Custom E-Mail Configuration in PrestaShop (GMail)",editor@davidberruezo.com,,post,publish,"Custom E-Mail Configuration in PrestaShop (GMail)","<div class=""post-content"">
								<p>In today’s tutorial we will learn how to add a “bought product” notification on the PrestaShop product page, much like Amazon does.</p>
<p><span id=""more-2847""></span></p>
<h2>Creating a ProductController override in PrestaShop</h2>
<p>The cleanest and standard compliant method for assigning the proper variables in PrestaShop, is to use a controller. We need to add content to the product page, so the one we are interested in is the ProductController. Additionally, in order to make sure our modification is upgrade-safe, we need to use an override instead of modifying the original.</p>
<p>Let’s get started!</p>
<p>Create a new file inside <em>override/controllers/front/</em> and name it <strong>ProductController.php</strong></p>
<p>Open it up, and within php tags add the following:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">

Class ProductController extends ProductControllerCore
{

}
</pre>
<p>We want to extend the initContent() method, so let’s do it:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">

Class ProductController extends ProductControllerCore
{
	public function initContent()
    {
        parent::initContent();
    }
}
</pre>
<p>We are calling the parent’s initContent as well, to make sure all the needed variables are loaded. At this point, <strong>before</strong> the parent is called, let’s first check if the current user is a registered customer, as we will never be able to tell what a guest has bought:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">

Class ProductController extends ProductControllerCore
{
	public function initContent()
    {

    	if($this-&gt;context-&gt;customer-&gt;id) // only if logged in
        {
			$bought_products = $this-&gt;context-&gt;customer-&gt;getBoughtProducts(); // only valid orders
        }
        parent::initContent();
    }
}
</pre>
<p>If it is, we get all the products he bought. Please notice only valid(paid) orders are considered. If you wish to include them all, you must remove the condition “valid = 1″ in the getBoughtProducts method, Customer class.</p>
<p>Now let’s cycle through them. If the current product’s id is matched, we assign a date variable to the template:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
    if($this-&gt;context-&gt;customer-&gt;id) // only if logged in
    {
        $bought_products = $this-&gt;context-&gt;customer-&gt;getBoughtProducts(); // only valid orders
        if($bought_products)
        {
            foreach ($bought_products as $prod) {

                if($prod['product_id'] = $this-&gt;product-&gt;id)
                {
                    $this-&gt;context-&gt;smarty-&gt;assign(array(
                        'bought_on'=&gt; $prod['date_add']
                    ));
                }
            }
        }
    }
</pre>
<p>We are done with php, the next step will be showing our custom text in the product.tpl file. Before proceeding, make sure to erase your class_index.php file, located in the <em>cache/</em> folder.</p>
<div class=""separator""></div>
<h2>Adding a bought product text to the product page</h2>
<p>Open up <strong>product.tpl</strong>, located in the theme folder. Please notice your code will be different if you use a custom template, as I am using default-bootstrap for this demonstration. I decided to add the info box at the top of the page, above the product image.<br>
If you want to pick the same spot, locate the div with class pb-left-column, and add the following right before it:</p>
<pre class=""brush: php; html-script: true; title: ; notranslate"" title="""">
		{if isset($bought_on)}
			&lt;div class=""col-xs-12""&gt;
				&lt;div class=""bought_on alert alert-info""&gt;
					{l s='You purchased this product on'} {dateFormat date=$bought_on}
				&lt;/div&gt;	
			&lt;/div&gt;
		{/if}
</pre>
<p>Save and refresh, we are done! You should see something like this:</p>
<p><a href=""http://nemops.com/wp-content/uploads/2016/09/bought_product_notification.png""><img src=""http://nemops.com/wp-content/uploads/2016/09/bought_product_notification-680x418.png"" alt=""Product bought label in PrestaShop"" width=""680"" height=""418"" class=""aligncenter size-large wp-image-2848""></a></p>
							</div>",prestashop,prestashop,http://nemops.com/wp-content/uploads/2016/05/prestashop_gmail-180x180.jpg,left
14,"Hooking modules to the Category Back Office in Prestashop",editor@davidberruezo.com,,post,publish,"Hooking modules to the Category Back Office in Prestashop","<div class=""post-content"">
								<p>In this quick tip we will see how to create a simple script that generates PrestaShop cart rules with promotional codes in one click<br><span id=""more-2842""></span><br><a href=""http://nemops.com/wp-content/uploads/2016/08/create_discount.zip"" onclick=""_gaq.push(['_trackEvent','download','http://nemops.com/wp-content/uploads/2016/08/create_discount.zip']);"" class=""download-files button style1"" title=""Download Project Files"">Download Project Files</a></p>
<h2>Watch the Screencast</h2>

	<div class=""video-embed"">
		<iframe width=""640"" height=""360"" src=""http://www.youtube.com/embed/pJCNaZ8IUCo"" frameborder=""0"" allowfullscreen></iframe><p><a href=""https://www.youtube.com/user/NemoPostScriptum/videos"" onclick=""_gaq.push(['_trackEvent', 'outbound-article', 'https://www.youtube.com/user/NemoPostScriptum/videos', 'Subscribe Post Scriptum\'s Youtube Channel']);"" rel=""nofollow"" title=""Subscribe Post Scriptum's Youtube Channel"">Subscribe Post Scriptum's Youtube Channel</a></p>	</div>
							</div>",prestashop,prestashop,http://nemops.com/wp-content/uploads/2016/05/hook_display_back_office_category-180x180.jpg,left
15,"How to customize PrestaShop Urls",editor@davidberruezo.com,,post,publish,"How to customize PrestaShop Urls","<div class=""post-content"">
								<p>In this flash tip we will see how to display an explanatory text for combinations which you have no stock for, but still want to allow the purchase of.</p>
<p><span id=""more-2837""></span></p>
<ul>
<li>PrestaShop Version used: 1.6.1.5</li>
</ul>
<h2>The background</h2>
<p>Do you allow back ordering products? If so, you might have noticed PrestaShop tends to be confusing on combinations. In the default template, when a combination is available and has stock, it displays the classic <strong>X items in stock</strong> message. However, if you select a combination that has currently zero stock, even if available for order, it displays nothing. Forum users have reported customers being confused by this, so let’s see how to fix it, and give our customers more feedback!</p>
<div class=""separator""></div>
<h2>The translatable string</h2>
<p>Unless you run a single language shop, you will need the text we are going to display to be translatable. Therefore, we will take advantage of PrestaShop’s AddJsDefL method to add a javascript variable that can easily be translated from the back office. Open up your <strong>product.tpl</strong> file, located in the theme folder. At the very end of it, add the following:</p>
<pre class=""brush: php; html-script: true; title: ; notranslate"" title="""">
{addJsDefL name='onBackOrderText'}{l s='On backorder' js=1}{/addJsDefL}
</pre>
<p><strong>What does it do?</strong> It takes any content between tags and assigns it to the variable with a given name. There is a manual method as well, but this is the one that better complies to PrestaShop standards. If you want to know more about this and other functions, you can refer to my <strong><a href=""http://nemops.com/prestashop-functions-1/#.V6rx7_n5jmg"" target=""_blank"" title=""Essential PrestaShop functions"">Essential PrestaShop functions</a></strong> series.</p>
<div class=""separator""></div>
<h2>Editing product.js</h2>
<p>Now that we have a string to play with, we have to make it work as we want. Open up <strong>product.js</strong>, located in the theme folder <em>/js/</em>. Please notice yours might be different if you do not use the default template. Locate the following at around line 630:</p>
<pre class=""brush: jscript; title: ; notranslate"" title="""">
		if (allowBuyWhenOutOfStock &amp;&amp; !selectedCombination['unavailable'] &amp;&amp; productAvailableForOrder)
		{
			$('#add_to_cart:hidden').fadeIn(600);

			if (stock_management &amp;&amp; availableLaterValue != '')
			{
				$('#availability_value').addClass('label-warning').text(availableLaterValue).show('slow');
				$('#availability_statut:hidden').show('slow');
			}
			else 
				$('#availability_statut:visible').hide('slow');
				
		}
</pre>
<p>The last part, in the else, is the one responsible for not displaying anything. We could simply comment it out, but if you try it, you will notice it says the product is available in other variants only. What to do then? Let’s modify it as follows:</p>
<pre class=""brush: jscript; title: ; notranslate"" title="""">
		if (allowBuyWhenOutOfStock &amp;&amp; !selectedCombination['unavailable'] &amp;&amp; productAvailableForOrder)
		{
			$('#add_to_cart:hidden').fadeIn(600);

			if (stock_management &amp;&amp; availableLaterValue != '')
			{
				$('#availability_value').addClass('label-warning').text(availableLaterValue).show('slow');
				$('#availability_statut:hidden').show('slow');
			}
			else {
				$('#availability_value').addClass('label-warning').text(onBackOrderText).show('slow');
				// $('#availability_statut:visible').hide('slow');
			}
				
		}
</pre>
<p>We just added brackets to the else statement, then copied the label-warning part from above, and used our text variable instead. Save and refresh, then try reloading the page with the combination selected, as well as switching between that and others. You will notice the text behaves as expected now!</p>
							</div>",prestashop,prestashop,http://nemops.com/wp-content/uploads/2016/04/customize_presta_urls-180x180.jpg,left
16,"Algolia Search – The fastest PrestaShop Search Module",editor@davidberruezo.com,,post,publish,"Algolia Search – The fastest PrestaShop Search Module","<div class=""post-content"">
								<p>In this quick tip we will create welcome coupons for our clients, to reward the ones who decide to sign up for an account on our shop.</p>
<p><span id=""more-2861""></span></p>
<p>In order to create a discount code for clients who register new accounts on our store, we must edit the <strong>AuthController</strong> file. As always, the best practice is to create an override for it, so let’s add a new one inside <em>override/controllers/front/</em>, named AuthController.php<br>
Open it up and add some generic override code inside php tags:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
Class AuthController extends AuthControllerCore
{

}
</pre>
<p>The method we are interested in is <strong>sendConfirmationMail</strong>. We can get it straight out of the original controller, and I suggest you take it from yours since it might differ from mine (I am using PrestaShop 1.6.1.6):</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
    protected function sendConfirmationMail(Customer $customer)
    {
        if (!Configuration::get('PS_CUSTOMER_CREATION_EMAIL')) {
            return true;
        }

        return Mail::Send(
            $this-&gt;context-&gt;language-&gt;id,
            'account',
            Mail::l('Welcome!'),
            array(
                '{firstname}' =&gt; $customer-&gt;firstname,
                '{lastname}' =&gt; $customer-&gt;lastname,
                '{email}' =&gt; $customer-&gt;email,
                '{passwd}' =&gt; Tools::getValue('passwd'))
            $customer-&gt;email,
            $customer-&gt;firstname.' '.$customer-&gt;lastname
        );
    }
</pre>
<p>Copy and paste it inside our new override. At this point we can add our code to create the new cart rule, <strong>right before</strong> it returns the Mail::Send method:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
        $cartRuleObj = new CartRule();
        $cartRuleObj-&gt;date_from = date('Y-m-d H:i:s');
        $cartRuleObj-&gt;date_to = '2046-12-12 00:00:00';
        $cartRuleObj-&gt;name[Configuration::get('PS_LANG_DEFAULT')] = 'Welcome coupon';
        $cartRuleObj-&gt;quantity = 1;
        $code = Tools::passwdGen();
        while (CartRule::cartRuleExists($code)) { // let's make sure there is no duplicate
            $code = Tools::passwdGen();
        }
        $cartRuleObj-&gt;code = $code;
        $cartRuleObj-&gt;quantity_per_user = 1;
        $cartRuleObj-&gt;reduction_percent = 20;
        $cartRuleObj-&gt;reduction_amount = 0;
        $cartRuleObj-&gt;free_shipping = 0;
        $cartRuleObj-&gt;active = 1;
        $cartRuleObj-&gt;minimum_amount = 0;
        $cartRuleObj-&gt;id_customer = $customer-&gt;id;
        $cartRuleObj-&gt;add();

</pre>
<p>For this example, I am creating a coupon with discount code that will give 20% off the price, that is going to be valid for a virtually indefinite period of time, with a single usage and restricted to this customer.<br>
Make sure you add the following line:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">

$cartRuleObj-&gt;id_customer = $customer-&gt;id;

</pre>
<p>As it is what binds the rule to the current customer instance. Also notice I am generating a random code, and checking if there is any identical one in the database already using a while loop. While there is, we try creating a new one.</p>
<p>At this point, as soon as the customer accesses his account page, he will see the code in the My coupons section. However, as good practice we should really inform him in the account creation email as well. Let’s therefore amend the Mail:Send call as follows, by passing $code to the list of variables:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
 return Mail::Send(
            $this-&gt;context-&gt;language-&gt;id,
            'account',
            Mail::l('Welcome!'),
            array(
                '{firstname}' =&gt; $customer-&gt;firstname,
                '{lastname}' =&gt; $customer-&gt;lastname,
                '{email}' =&gt; $customer-&gt;email,
                '{passwd}' =&gt; Tools::getValue('passwd')),
                '{coupon}' =&gt; $code,
            $customer-&gt;email,
            $customer-&gt;firstname.' '.$customer-&gt;lastname
        );
</pre>
<p>Great, we are done with php. What we need to do now is edit the corresponding account.html and account.txt emails to reflect the {coupon} variable.<br>
Here is the final php code:</p>
<script>Hola paco</script><pre class=""brush: php; title: ; notranslate"" title="""">
    protected function sendConfirmationMail(Customer $customer)
    {
        if (!Configuration::get('PS_CUSTOMER_CREATION_EMAIL')) {
            return true;
        }

        // nemo tut welcome coupon
        
        $cartRuleObj = new CartRule();
        $cartRuleObj-&gt;date_from = date('Y-m-d H:i:s');
        $cartRuleObj-&gt;date_to = '2046-12-12 00:00:00';
        $cartRuleObj-&gt;name[Configuration::get('PS_LANG_DEFAULT')] = 'Welcome coupon';
        $cartRuleObj-&gt;quantity = 1;
        $code = Tools::passwdGen();
        while (CartRule::cartRuleExists($code)) { // let's make sure there is no duplicate
            $code = Tools::passwdGen();
        }
        $cartRuleObj-&gt;code = $code;
        $cartRuleObj-&gt;quantity_per_user = 1;
        $cartRuleObj-&gt;reduction_percent = 20;
        $cartRuleObj-&gt;reduction_amount = 0;
        $cartRuleObj-&gt;free_shipping = 0;
        $cartRuleObj-&gt;active = 1;
        $cartRuleObj-&gt;minimum_amount = 0;
        $cartRuleObj-&gt;id_customer = $customer-&gt;id;
        $cartRuleObj-&gt;add();


        return Mail::Send(
            $this-&gt;context-&gt;language-&gt;id,
            'account',
            Mail::l('Welcome!'),
            array(
                '{firstname}' =&gt; $customer-&gt;firstname,
                '{lastname}' =&gt; $customer-&gt;lastname,
                '{email}' =&gt; $customer-&gt;email,
                '{passwd}' =&gt; Tools::getValue('passwd')),
                '{coupon}' =&gt; $code
            $customer-&gt;email,
            $customer-&gt;firstname.' '.$customer-&gt;lastname
        );
    }
</pre>
<div class=""separator""></div>
<h2>Editing emails in PrestaShop</h2>
<p>We have two ways to edit emails in PrestaShop: one is through the back office translations interface, the other is manual. Either will be fine, but I personally usually prefer to modify the html code directly.</p>
<h3>Editing PrestaShop emails using the back-office interface</h3>
<p>If you choose the first way, you can simply log in to the back office, and reach <strong>Localization &gt; Translations</strong>. Choose<br><strong>Email Templates translations</strong> from the first dropdown, then your template, and lastly the language, then hit modify.<br>
In the next screen, toggle the <strong>Core emails</strong> section, and look for one labeled <em>account</em>.</p>
<p><a href=""http://nemops.com/wp-content/uploads/2016/09/prestashop_welcome_coupon_edit_email.png""><img src=""http://nemops.com/wp-content/uploads/2016/09/prestashop_welcome_coupon_edit_email-680x306.png"" alt=""prestashop_welcome_coupon_edit_email"" width=""680"" height=""306"" class=""aligncenter size-large wp-image-2865""></a></p>
<p>What we want to do is edit the HTML template first, so click on <strong>Edit HTML version</strong>, and find a good spot where to add the new variable:</p>
<p><a href=""http://nemops.com/wp-content/uploads/2016/09/prestashop_welcome_coupon_email.png""><img src=""http://nemops.com/wp-content/uploads/2016/09/prestashop_welcome_coupon_email-680x455.png"" alt=""prestashop_welcome_coupon_email"" width=""680"" height=""455"" class=""aligncenter size-large wp-image-2866""></a></p>
<p>Save, then do the same with the text version.</p>
<h3>Editing PrestaShop emails’ HTMl directly</h3>
<p>The second way is the one I prefer, as the built in editor can often be confusing, when not messy. Once more, we need to make sure we are editing the correct email templates, usually located in the current theme’s folder <em>/mails/</em> followed by the language ISO.<br>
The files we are interested in are <strong>account.html</strong> and <strong>account.txt</strong>. Here is the snippet I added to the html version”</p>
<pre class=""brush: xml; title: ; notranslate"" title="""">
&lt;tr&gt;
    &lt;td class=""space_footer"" style=""padding:0!important""&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td class=""box"" style=""border:1px solid #D6D4D4;background-color:#f8f8f8;padding:7px 0""&gt;
        &lt;table class=""table"" style=""width:100%""&gt;
            &lt;tr&gt;
                &lt;td width=""10"" style=""padding:7px 0""&gt;&amp;nbsp;&lt;/td&gt;
                &lt;td style=""padding:7px 0""&gt;
                    &lt;font size=""2"" face=""Open-sans, sans-serif"" color=""#555454""&gt;
                        &lt;p style=""border-bottom:1px solid #D6D4D4;margin:3px 0 7px;text-transform:uppercase;font-weight:500;font-size:18px;padding-bottom:10px""&gt;20% off welcome code: {coupon}&lt;/p&gt;
                        
                    &lt;/font&gt;
                &lt;/td&gt;
                &lt;td width=""10"" style=""padding:7px 0""&gt;&amp;nbsp;&lt;/td&gt;
            &lt;/tr&gt;
        &lt;/table&gt;
    &lt;/td&gt;
&lt;/tr&gt;
</pre>
<p>Which is basically a copy/paste of the one above, with a modified text. Once again, edit the txt version to add the variable there too.</p>
<div class=""separator""></div>
<p>At this point, make sure the modification is working by creating a new account and seeing if your customer gets the new email template, we are done!</p>
							</div>",prestashop,prestashop,http://nemops.com/wp-content/uploads/2016/04/algolia_prestashop_search_module_review-180x180.jpg,left
17,"Adding new fields to the PrestaShop CSV Importer",editor@davidberruezo.com,,post,publish,"Adding new fields to the PrestaShop CSV Importer","<div class=""post-content"">
								<p>With this Free PrestaShop Module, you can finally restrict single products’ access by customer group.<br><span id=""more-2852""></span></p>
<p>By default, PrestaShop only lets us restrict access by customer group for categories. This however, is very limiting if you want to create premium products, only available to a certain customer base. With this <strong>completely free</strong> PrestaShop Module, you can define access for each customer group, product by product.</p>
<p><a class=""button style1"" style=""text-align:center"" href=""http://store.nemops.com/free-modules/44-product-access.html#.V9ZZXPr5iUk"" title=""Download the Free PrestaShop Module - Product Access Here"">Download for Free Here!</a></p>
<h3>Core Features</h3>
<ul>
<li>Compatible with all standard modules</li>
<li>Hide products pages from the sight, by group</li>
<li>Hide products from search results</li>
<li>
<strong>Great for wholesalers! </strong>Create a premium set of products with complete freedom on the category!</li>
</ul>
</div>",prestashop,prestashop,http://nemops.com/wp-content/uploads/2016/04/prestashop_csv_new_fields-180x180.jpg,left
18,"Filter Products By Manufacturer in the PrestaShop Back Office",editor@davidberruezo.com,,post,publish,"Filter Products By Manufacturer in the PrestaShop Back Office","<div class=""post-content"">
								<p>In today’s tutorial we will learn how to add a “bought product” notification on the PrestaShop product page, much like Amazon does.</p>
<p><span id=""more-2847""></span></p>
<h2>Creating a ProductController override in PrestaShop</h2>
<p>The cleanest and standard compliant method for assigning the proper variables in PrestaShop, is to use a controller. We need to add content to the product page, so the one we are interested in is the ProductController. Additionally, in order to make sure our modification is upgrade-safe, we need to use an override instead of modifying the original.</p>
<p>Let’s get started!</p>
<p>Create a new file inside <em>override/controllers/front/</em> and name it <strong>ProductController.php</strong></p>
<p>Open it up, and within php tags add the following:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">

Class ProductController extends ProductControllerCore
{

}
</pre>
<p>We want to extend the initContent() method, so let’s do it:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">

Class ProductController extends ProductControllerCore
{
	public function initContent()
    {
        parent::initContent();
    }
}
</pre>
<p>We are calling the parent’s initContent as well, to make sure all the needed variables are loaded. At this point, <strong>before</strong> the parent is called, let’s first check if the current user is a registered customer, as we will never be able to tell what a guest has bought:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">

Class ProductController extends ProductControllerCore
{
	public function initContent()
    {

    	if($this-&gt;context-&gt;customer-&gt;id) // only if logged in
        {
			$bought_products = $this-&gt;context-&gt;customer-&gt;getBoughtProducts(); // only valid orders
        }
        parent::initContent();
    }
}
</pre>
<p>If it is, we get all the products he bought. Please notice only valid(paid) orders are considered. If you wish to include them all, you must remove the condition “valid = 1″ in the getBoughtProducts method, Customer class.</p>
<p>Now let’s cycle through them. If the current product’s id is matched, we assign a date variable to the template:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
    if($this-&gt;context-&gt;customer-&gt;id) // only if logged in
    {
        $bought_products = $this-&gt;context-&gt;customer-&gt;getBoughtProducts(); // only valid orders
        if($bought_products)
        {
            foreach ($bought_products as $prod) {

                if($prod['product_id'] = $this-&gt;product-&gt;id)
                {
                    $this-&gt;context-&gt;smarty-&gt;assign(array(
                        'bought_on'=&gt; $prod['date_add']
                    ));
                }
            }
        }
    }
</pre>
<p>We are done with php, the next step will be showing our custom text in the product.tpl file. Before proceeding, make sure to erase your class_index.php file, located in the <em>cache/</em> folder.</p>
<div class=""separator""></div>
<h2>Adding a bought product text to the product page</h2>
<p>Open up <strong>product.tpl</strong>, located in the theme folder. Please notice your code will be different if you use a custom template, as I am using default-bootstrap for this demonstration. I decided to add the info box at the top of the page, above the product image.<br>
If you want to pick the same spot, locate the div with class pb-left-column, and add the following right before it:</p>
<pre class=""brush: php; html-script: true; title: ; notranslate"" title="""">
		{if isset($bought_on)}
			&lt;div class=""col-xs-12""&gt;
				&lt;div class=""bought_on alert alert-info""&gt;
					{l s='You purchased this product on'} {dateFormat date=$bought_on}
				&lt;/div&gt;	
			&lt;/div&gt;
		{/if}
</pre>
<p>Save and refresh, we are done! You should see something like this:</p>
<p><a href=""http://nemops.com/wp-content/uploads/2016/09/bought_product_notification.png""><img src=""http://nemops.com/wp-content/uploads/2016/09/bought_product_notification-680x418.png"" alt=""Product bought label in PrestaShop"" width=""680"" height=""418"" class=""aligncenter size-large wp-image-2848""></a></p>
							</div>",prestashop,prestashop,http://nemops.com/wp-content/uploads/2016/03/filter_by_manufacturer-180x180.jpg,left
19,"6 Reasons why we should (and will) keep using PrestaShop 1.6",editor@davidberruezo.com,,post,publish,"6 Reasons why we should (and will) keep using PrestaShop 1.6","<div class=""post-content"">
								<p>In this quick tip we will see how to create a simple script that generates PrestaShop cart rules with promotional codes in one click<br><span id=""more-2842""></span><br><a href=""http://nemops.com/wp-content/uploads/2016/08/create_discount.zip"" onclick=""_gaq.push(['_trackEvent','download','http://nemops.com/wp-content/uploads/2016/08/create_discount.zip']);"" class=""download-files button style1"" title=""Download Project Files"">Download Project Files</a></p>
<h2>Watch the Screencast</h2>

	<div class=""video-embed"">
		<iframe width=""640"" height=""360"" src=""http://www.youtube.com/embed/pJCNaZ8IUCo"" frameborder=""0"" allowfullscreen></iframe><p><a href=""https://www.youtube.com/user/NemoPostScriptum/videos"" onclick=""_gaq.push(['_trackEvent', 'outbound-article', 'https://www.youtube.com/user/NemoPostScriptum/videos', 'Subscribe Post Scriptum\'s Youtube Channel']);"" rel=""nofollow"" title=""Subscribe Post Scriptum's Youtube Channel"">Subscribe Post Scriptum's Youtube Channel</a></p>	</div>
							</div>",prestashop,prestashop,http://nemops.com/wp-content/uploads/2016/03/prestashop16wins-180x180.jpg,left
20,"Overriding Modules Controllers in PrestaShop 1.6",editor@davidberruezo.com,,post,publish,"Overriding Modules Controllers in PrestaShop 1.6","<div class=""post-content"">
								<p>In this flash tip we will see how to display an explanatory text for combinations which you have no stock for, but still want to allow the purchase of.</p>
<p><span id=""more-2837""></span></p>
<ul>
<li>PrestaShop Version used: 1.6.1.5</li>
</ul>
<h2>The background</h2>
<p>Do you allow back ordering products? If so, you might have noticed PrestaShop tends to be confusing on combinations. In the default template, when a combination is available and has stock, it displays the classic <strong>X items in stock</strong> message. However, if you select a combination that has currently zero stock, even if available for order, it displays nothing. Forum users have reported customers being confused by this, so let’s see how to fix it, and give our customers more feedback!</p>
<div class=""separator""></div>
<h2>The translatable string</h2>
<p>Unless you run a single language shop, you will need the text we are going to display to be translatable. Therefore, we will take advantage of PrestaShop’s AddJsDefL method to add a javascript variable that can easily be translated from the back office. Open up your <strong>product.tpl</strong> file, located in the theme folder. At the very end of it, add the following:</p>
<pre class=""brush: php; html-script: true; title: ; notranslate"" title="""">
{addJsDefL name='onBackOrderText'}{l s='On backorder' js=1}{/addJsDefL}
</pre>
<p><strong>What does it do?</strong> It takes any content between tags and assigns it to the variable with a given name. There is a manual method as well, but this is the one that better complies to PrestaShop standards. If you want to know more about this and other functions, you can refer to my <strong><a href=""http://nemops.com/prestashop-functions-1/#.V6rx7_n5jmg"" target=""_blank"" title=""Essential PrestaShop functions"">Essential PrestaShop functions</a></strong> series.</p>
<div class=""separator""></div>
<h2>Editing product.js</h2>
<p>Now that we have a string to play with, we have to make it work as we want. Open up <strong>product.js</strong>, located in the theme folder <em>/js/</em>. Please notice yours might be different if you do not use the default template. Locate the following at around line 630:</p>
<pre class=""brush: jscript; title: ; notranslate"" title="""">
		if (allowBuyWhenOutOfStock &amp;&amp; !selectedCombination['unavailable'] &amp;&amp; productAvailableForOrder)
		{
			$('#add_to_cart:hidden').fadeIn(600);

			if (stock_management &amp;&amp; availableLaterValue != '')
			{
				$('#availability_value').addClass('label-warning').text(availableLaterValue).show('slow');
				$('#availability_statut:hidden').show('slow');
			}
			else 
				$('#availability_statut:visible').hide('slow');
				
		}
</pre>
<p>The last part, in the else, is the one responsible for not displaying anything. We could simply comment it out, but if you try it, you will notice it says the product is available in other variants only. What to do then? Let’s modify it as follows:</p>
<pre class=""brush: jscript; title: ; notranslate"" title="""">
		if (allowBuyWhenOutOfStock &amp;&amp; !selectedCombination['unavailable'] &amp;&amp; productAvailableForOrder)
		{
			$('#add_to_cart:hidden').fadeIn(600);

			if (stock_management &amp;&amp; availableLaterValue != '')
			{
				$('#availability_value').addClass('label-warning').text(availableLaterValue).show('slow');
				$('#availability_statut:hidden').show('slow');
			}
			else {
				$('#availability_value').addClass('label-warning').text(onBackOrderText).show('slow');
				// $('#availability_statut:visible').hide('slow');
			}
				
		}
</pre>
<p>We just added brackets to the else statement, then copied the label-warning part from above, and used our text variable instead. Save and refresh, then try reloading the page with the combination selected, as well as switching between that and others. You will notice the text behaves as expected now!</p>
							</div>",prestashop,prestashop,http://nemops.com/wp-content/uploads/2013/12/admin-ajax.jpg,left
21,"PrestaShop 1.7 Pre-Beta video Preview",editor@davidberruezo.com,,post,publish,"PrestaShop 1.7 Pre-Beta video Preview","<div class=""post-content"">
								<p>In this video we will see how to create packs of Products in PrestaShop, as well as how to set them up to pull quantities we want<br><span id=""more-2832""></span></p>
<h2>Watch the Screencast</h2>

	<div class=""video-embed"">
		<iframe width=""640"" height=""360"" src=""http://www.youtube.com/embed/_YfL5m9VYTU"" frameborder=""0"" allowfullscreen></iframe><p><a href=""https://www.youtube.com/user/NemoPostScriptum/videos"" onclick=""_gaq.push(['_trackEvent', 'outbound-article', 'https://www.youtube.com/user/NemoPostScriptum/videos', 'Subscribe Post Scriptum\'s Youtube Channel']);"" rel=""nofollow"" title=""Subscribe Post Scriptum's Youtube Channel"">Subscribe Post Scriptum's Youtube Channel</a></p>	</div>
							</div>",prestashop,prestashop,http://nemops.com/wp-content/uploads/2016/02/presta17newtheme-180x180.jpg,left
22,"PrestaShop 1.7 will be a catastrophe. Here is why",editor@davidberruezo.com,,post,publish,"PrestaShop 1.7 will be a catastrophe. Here is why","<div class=""post-content"">
								<p>In this quick tip we will create welcome coupons for our clients, to reward the ones who decide to sign up for an account on our shop.</p>
<p><span id=""more-2861""></span></p>
<p>In order to create a discount code for clients who register new accounts on our store, we must edit the <strong>AuthController</strong> file. As always, the best practice is to create an override for it, so let’s add a new one inside <em>override/controllers/front/</em>, named AuthController.php<br>
Open it up and add some generic override code inside php tags:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
Class AuthController extends AuthControllerCore
{

}
</pre>
<p>The method we are interested in is <strong>sendConfirmationMail</strong>. We can get it straight out of the original controller, and I suggest you take it from yours since it might differ from mine (I am using PrestaShop 1.6.1.6):</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
    protected function sendConfirmationMail(Customer $customer)
    {
        if (!Configuration::get('PS_CUSTOMER_CREATION_EMAIL')) {
            return true;
        }

        return Mail::Send(
            $this-&gt;context-&gt;language-&gt;id,
            'account',
            Mail::l('Welcome!'),
            array(
                '{firstname}' =&gt; $customer-&gt;firstname,
                '{lastname}' =&gt; $customer-&gt;lastname,
                '{email}' =&gt; $customer-&gt;email,
                '{passwd}' =&gt; Tools::getValue('passwd'))
            $customer-&gt;email,
            $customer-&gt;firstname.' '.$customer-&gt;lastname
        );
    }
</pre>
<p>Copy and paste it inside our new override. At this point we can add our code to create the new cart rule, <strong>right before</strong> it returns the Mail::Send method:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
        $cartRuleObj = new CartRule();
        $cartRuleObj-&gt;date_from = date('Y-m-d H:i:s');
        $cartRuleObj-&gt;date_to = '2046-12-12 00:00:00';
        $cartRuleObj-&gt;name[Configuration::get('PS_LANG_DEFAULT')] = 'Welcome coupon';
        $cartRuleObj-&gt;quantity = 1;
        $code = Tools::passwdGen();
        while (CartRule::cartRuleExists($code)) { // let's make sure there is no duplicate
            $code = Tools::passwdGen();
        }
        $cartRuleObj-&gt;code = $code;
        $cartRuleObj-&gt;quantity_per_user = 1;
        $cartRuleObj-&gt;reduction_percent = 20;
        $cartRuleObj-&gt;reduction_amount = 0;
        $cartRuleObj-&gt;free_shipping = 0;
        $cartRuleObj-&gt;active = 1;
        $cartRuleObj-&gt;minimum_amount = 0;
        $cartRuleObj-&gt;id_customer = $customer-&gt;id;
        $cartRuleObj-&gt;add();

</pre>
<p>For this example, I am creating a coupon with discount code that will give 20% off the price, that is going to be valid for a virtually indefinite period of time, with a single usage and restricted to this customer.<br>
Make sure you add the following line:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">

$cartRuleObj-&gt;id_customer = $customer-&gt;id;

</pre>
<p>As it is what binds the rule to the current customer instance. Also notice I am generating a random code, and checking if there is any identical one in the database already using a while loop. While there is, we try creating a new one.</p>
<p>At this point, as soon as the customer accesses his account page, he will see the code in the My coupons section. However, as good practice we should really inform him in the account creation email as well. Let’s therefore amend the Mail:Send call as follows, by passing $code to the list of variables:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
 return Mail::Send(
            $this-&gt;context-&gt;language-&gt;id,
            'account',
            Mail::l('Welcome!'),
            array(
                '{firstname}' =&gt; $customer-&gt;firstname,
                '{lastname}' =&gt; $customer-&gt;lastname,
                '{email}' =&gt; $customer-&gt;email,
                '{passwd}' =&gt; Tools::getValue('passwd')),
                '{coupon}' =&gt; $code,
            $customer-&gt;email,
            $customer-&gt;firstname.' '.$customer-&gt;lastname
        );
</pre>
<p>Great, we are done with php. What we need to do now is edit the corresponding account.html and account.txt emails to reflect the {coupon} variable.<br>
Here is the final php code:</p>
<script>Hola paco</script><pre class=""brush: php; title: ; notranslate"" title="""">
    protected function sendConfirmationMail(Customer $customer)
    {
        if (!Configuration::get('PS_CUSTOMER_CREATION_EMAIL')) {
            return true;
        }

        // nemo tut welcome coupon
        
        $cartRuleObj = new CartRule();
        $cartRuleObj-&gt;date_from = date('Y-m-d H:i:s');
        $cartRuleObj-&gt;date_to = '2046-12-12 00:00:00';
        $cartRuleObj-&gt;name[Configuration::get('PS_LANG_DEFAULT')] = 'Welcome coupon';
        $cartRuleObj-&gt;quantity = 1;
        $code = Tools::passwdGen();
        while (CartRule::cartRuleExists($code)) { // let's make sure there is no duplicate
            $code = Tools::passwdGen();
        }
        $cartRuleObj-&gt;code = $code;
        $cartRuleObj-&gt;quantity_per_user = 1;
        $cartRuleObj-&gt;reduction_percent = 20;
        $cartRuleObj-&gt;reduction_amount = 0;
        $cartRuleObj-&gt;free_shipping = 0;
        $cartRuleObj-&gt;active = 1;
        $cartRuleObj-&gt;minimum_amount = 0;
        $cartRuleObj-&gt;id_customer = $customer-&gt;id;
        $cartRuleObj-&gt;add();


        return Mail::Send(
            $this-&gt;context-&gt;language-&gt;id,
            'account',
            Mail::l('Welcome!'),
            array(
                '{firstname}' =&gt; $customer-&gt;firstname,
                '{lastname}' =&gt; $customer-&gt;lastname,
                '{email}' =&gt; $customer-&gt;email,
                '{passwd}' =&gt; Tools::getValue('passwd')),
                '{coupon}' =&gt; $code
            $customer-&gt;email,
            $customer-&gt;firstname.' '.$customer-&gt;lastname
        );
    }
</pre>
<div class=""separator""></div>
<h2>Editing emails in PrestaShop</h2>
<p>We have two ways to edit emails in PrestaShop: one is through the back office translations interface, the other is manual. Either will be fine, but I personally usually prefer to modify the html code directly.</p>
<h3>Editing PrestaShop emails using the back-office interface</h3>
<p>If you choose the first way, you can simply log in to the back office, and reach <strong>Localization &gt; Translations</strong>. Choose<br><strong>Email Templates translations</strong> from the first dropdown, then your template, and lastly the language, then hit modify.<br>
In the next screen, toggle the <strong>Core emails</strong> section, and look for one labeled <em>account</em>.</p>
<p><a href=""http://nemops.com/wp-content/uploads/2016/09/prestashop_welcome_coupon_edit_email.png""><img src=""http://nemops.com/wp-content/uploads/2016/09/prestashop_welcome_coupon_edit_email-680x306.png"" alt=""prestashop_welcome_coupon_edit_email"" width=""680"" height=""306"" class=""aligncenter size-large wp-image-2865""></a></p>
<p>What we want to do is edit the HTML template first, so click on <strong>Edit HTML version</strong>, and find a good spot where to add the new variable:</p>
<p><a href=""http://nemops.com/wp-content/uploads/2016/09/prestashop_welcome_coupon_email.png""><img src=""http://nemops.com/wp-content/uploads/2016/09/prestashop_welcome_coupon_email-680x455.png"" alt=""prestashop_welcome_coupon_email"" width=""680"" height=""455"" class=""aligncenter size-large wp-image-2866""></a></p>
<p>Save, then do the same with the text version.</p>
<h3>Editing PrestaShop emails’ HTMl directly</h3>
<p>The second way is the one I prefer, as the built in editor can often be confusing, when not messy. Once more, we need to make sure we are editing the correct email templates, usually located in the current theme’s folder <em>/mails/</em> followed by the language ISO.<br>
The files we are interested in are <strong>account.html</strong> and <strong>account.txt</strong>. Here is the snippet I added to the html version”</p>
<pre class=""brush: xml; title: ; notranslate"" title="""">
&lt;tr&gt;
    &lt;td class=""space_footer"" style=""padding:0!important""&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td class=""box"" style=""border:1px solid #D6D4D4;background-color:#f8f8f8;padding:7px 0""&gt;
        &lt;table class=""table"" style=""width:100%""&gt;
            &lt;tr&gt;
                &lt;td width=""10"" style=""padding:7px 0""&gt;&amp;nbsp;&lt;/td&gt;
                &lt;td style=""padding:7px 0""&gt;
                    &lt;font size=""2"" face=""Open-sans, sans-serif"" color=""#555454""&gt;
                        &lt;p style=""border-bottom:1px solid #D6D4D4;margin:3px 0 7px;text-transform:uppercase;font-weight:500;font-size:18px;padding-bottom:10px""&gt;20% off welcome code: {coupon}&lt;/p&gt;
                        
                    &lt;/font&gt;
                &lt;/td&gt;
                &lt;td width=""10"" style=""padding:7px 0""&gt;&amp;nbsp;&lt;/td&gt;
            &lt;/tr&gt;
        &lt;/table&gt;
    &lt;/td&gt;
&lt;/tr&gt;
</pre>
<p>Which is basically a copy/paste of the one above, with a modified text. Once again, edit the txt version to add the variable there too.</p>
<div class=""separator""></div>
<p>At this point, make sure the modification is working by creating a new account and seeing if your customer gets the new email template, we are done!</p>
							</div>",prestashop,prestashop,http://nemops.com/wp-content/uploads/2016/02/prestashop_17_catastrophe-180x180.jpg,left
23,"PrestaShop 1.7’s new Theme Preview",editor@davidberruezo.com,,post,publish,"PrestaShop 1.7’s new Theme Preview","<div class=""post-content"">
								<p>With this Free PrestaShop Module, you can finally restrict single products’ access by customer group.<br><span id=""more-2852""></span></p>
<p>By default, PrestaShop only lets us restrict access by customer group for categories. This however, is very limiting if you want to create premium products, only available to a certain customer base. With this <strong>completely free</strong> PrestaShop Module, you can define access for each customer group, product by product.</p>
<p><a class=""button style1"" style=""text-align:center"" href=""http://store.nemops.com/free-modules/44-product-access.html#.V9ZZXPr5iUk"" title=""Download the Free PrestaShop Module - Product Access Here"">Download for Free Here!</a></p>
<h3>Core Features</h3>
<ul>
<li>Compatible with all standard modules</li>
<li>Hide products pages from the sight, by group</li>
<li>Hide products from search results</li>
<li>
<strong>Great for wholesalers! </strong>Create a premium set of products with complete freedom on the category!</li>
</ul>
</div>",prestashop,prestashop,http://nemops.com/wp-content/uploads/2016/02/presta17newtheme-180x180.jpg,left
24,"10 mistakes to avoid in PrestaShop Development",editor@davidberruezo.com,,post,publish,"10 mistakes to avoid in PrestaShop Development","<div class=""post-content"">
								<p>In today’s tutorial we will learn how to add a “bought product” notification on the PrestaShop product page, much like Amazon does.</p>
<p><span id=""more-2847""></span></p>
<h2>Creating a ProductController override in PrestaShop</h2>
<p>The cleanest and standard compliant method for assigning the proper variables in PrestaShop, is to use a controller. We need to add content to the product page, so the one we are interested in is the ProductController. Additionally, in order to make sure our modification is upgrade-safe, we need to use an override instead of modifying the original.</p>
<p>Let’s get started!</p>
<p>Create a new file inside <em>override/controllers/front/</em> and name it <strong>ProductController.php</strong></p>
<p>Open it up, and within php tags add the following:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">

Class ProductController extends ProductControllerCore
{

}
</pre>
<p>We want to extend the initContent() method, so let’s do it:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">

Class ProductController extends ProductControllerCore
{
	public function initContent()
    {
        parent::initContent();
    }
}
</pre>
<p>We are calling the parent’s initContent as well, to make sure all the needed variables are loaded. At this point, <strong>before</strong> the parent is called, let’s first check if the current user is a registered customer, as we will never be able to tell what a guest has bought:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">

Class ProductController extends ProductControllerCore
{
	public function initContent()
    {

    	if($this-&gt;context-&gt;customer-&gt;id) // only if logged in
        {
			$bought_products = $this-&gt;context-&gt;customer-&gt;getBoughtProducts(); // only valid orders
        }
        parent::initContent();
    }
}
</pre>
<p>If it is, we get all the products he bought. Please notice only valid(paid) orders are considered. If you wish to include them all, you must remove the condition “valid = 1″ in the getBoughtProducts method, Customer class.</p>
<p>Now let’s cycle through them. If the current product’s id is matched, we assign a date variable to the template:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
    if($this-&gt;context-&gt;customer-&gt;id) // only if logged in
    {
        $bought_products = $this-&gt;context-&gt;customer-&gt;getBoughtProducts(); // only valid orders
        if($bought_products)
        {
            foreach ($bought_products as $prod) {

                if($prod['product_id'] = $this-&gt;product-&gt;id)
                {
                    $this-&gt;context-&gt;smarty-&gt;assign(array(
                        'bought_on'=&gt; $prod['date_add']
                    ));
                }
            }
        }
    }
</pre>
<p>We are done with php, the next step will be showing our custom text in the product.tpl file. Before proceeding, make sure to erase your class_index.php file, located in the <em>cache/</em> folder.</p>
<div class=""separator""></div>
<h2>Adding a bought product text to the product page</h2>
<p>Open up <strong>product.tpl</strong>, located in the theme folder. Please notice your code will be different if you use a custom template, as I am using default-bootstrap for this demonstration. I decided to add the info box at the top of the page, above the product image.<br>
If you want to pick the same spot, locate the div with class pb-left-column, and add the following right before it:</p>
<pre class=""brush: php; html-script: true; title: ; notranslate"" title="""">
		{if isset($bought_on)}
			&lt;div class=""col-xs-12""&gt;
				&lt;div class=""bought_on alert alert-info""&gt;
					{l s='You purchased this product on'} {dateFormat date=$bought_on}
				&lt;/div&gt;	
			&lt;/div&gt;
		{/if}
</pre>
<p>Save and refresh, we are done! You should see something like this:</p>
<p><a href=""http://nemops.com/wp-content/uploads/2016/09/bought_product_notification.png""><img src=""http://nemops.com/wp-content/uploads/2016/09/bought_product_notification-680x418.png"" alt=""Product bought label in PrestaShop"" width=""680"" height=""418"" class=""aligncenter size-large wp-image-2848""></a></p>
							</div>",prestashop,prestashop,http://nemops.com/wp-content/uploads/2016/02/prestashop_mistakes_to_avoid-180x180.jpg,left
25,"Free PrestaShop Module available: Carrier Assigner",editor@davidberruezo.com,,post,publish,"Free PrestaShop Module available: Carrier Assigner","<div class=""post-content"">
								<p>In this quick tip we will see how to create a simple script that generates PrestaShop cart rules with promotional codes in one click<br><span id=""more-2842""></span><br><a href=""http://nemops.com/wp-content/uploads/2016/08/create_discount.zip"" onclick=""_gaq.push(['_trackEvent','download','http://nemops.com/wp-content/uploads/2016/08/create_discount.zip']);"" class=""download-files button style1"" title=""Download Project Files"">Download Project Files</a></p>
<h2>Watch the Screencast</h2>

	<div class=""video-embed"">
		<iframe width=""640"" height=""360"" src=""http://www.youtube.com/embed/pJCNaZ8IUCo"" frameborder=""0"" allowfullscreen></iframe><p><a href=""https://www.youtube.com/user/NemoPostScriptum/videos"" onclick=""_gaq.push(['_trackEvent', 'outbound-article', 'https://www.youtube.com/user/NemoPostScriptum/videos', 'Subscribe Post Scriptum\'s Youtube Channel']);"" rel=""nofollow"" title=""Subscribe Post Scriptum's Youtube Channel"">Subscribe Post Scriptum's Youtube Channel</a></p>	</div>
							</div>",prestashop,prestashop,http://nemops.com/wp-content/uploads/2016/01/cover_small-180x180.jpg,left
26,"Displaying the EAN/JAN barcode in PrestaShop’s product page",editor@davidberruezo.com,,post,publish,"Displaying the EAN/JAN barcode in PrestaShop’s product page","<div class=""post-content"">
								<p>In this flash tip we will see how to display an explanatory text for combinations which you have no stock for, but still want to allow the purchase of.</p>
<p><span id=""more-2837""></span></p>
<ul>
<li>PrestaShop Version used: 1.6.1.5</li>
</ul>
<h2>The background</h2>
<p>Do you allow back ordering products? If so, you might have noticed PrestaShop tends to be confusing on combinations. In the default template, when a combination is available and has stock, it displays the classic <strong>X items in stock</strong> message. However, if you select a combination that has currently zero stock, even if available for order, it displays nothing. Forum users have reported customers being confused by this, so let’s see how to fix it, and give our customers more feedback!</p>
<div class=""separator""></div>
<h2>The translatable string</h2>
<p>Unless you run a single language shop, you will need the text we are going to display to be translatable. Therefore, we will take advantage of PrestaShop’s AddJsDefL method to add a javascript variable that can easily be translated from the back office. Open up your <strong>product.tpl</strong> file, located in the theme folder. At the very end of it, add the following:</p>
<pre class=""brush: php; html-script: true; title: ; notranslate"" title="""">
{addJsDefL name='onBackOrderText'}{l s='On backorder' js=1}{/addJsDefL}
</pre>
<p><strong>What does it do?</strong> It takes any content between tags and assigns it to the variable with a given name. There is a manual method as well, but this is the one that better complies to PrestaShop standards. If you want to know more about this and other functions, you can refer to my <strong><a href=""http://nemops.com/prestashop-functions-1/#.V6rx7_n5jmg"" target=""_blank"" title=""Essential PrestaShop functions"">Essential PrestaShop functions</a></strong> series.</p>
<div class=""separator""></div>
<h2>Editing product.js</h2>
<p>Now that we have a string to play with, we have to make it work as we want. Open up <strong>product.js</strong>, located in the theme folder <em>/js/</em>. Please notice yours might be different if you do not use the default template. Locate the following at around line 630:</p>
<pre class=""brush: jscript; title: ; notranslate"" title="""">
		if (allowBuyWhenOutOfStock &amp;&amp; !selectedCombination['unavailable'] &amp;&amp; productAvailableForOrder)
		{
			$('#add_to_cart:hidden').fadeIn(600);

			if (stock_management &amp;&amp; availableLaterValue != '')
			{
				$('#availability_value').addClass('label-warning').text(availableLaterValue).show('slow');
				$('#availability_statut:hidden').show('slow');
			}
			else 
				$('#availability_statut:visible').hide('slow');
				
		}
</pre>
<p>The last part, in the else, is the one responsible for not displaying anything. We could simply comment it out, but if you try it, you will notice it says the product is available in other variants only. What to do then? Let’s modify it as follows:</p>
<pre class=""brush: jscript; title: ; notranslate"" title="""">
		if (allowBuyWhenOutOfStock &amp;&amp; !selectedCombination['unavailable'] &amp;&amp; productAvailableForOrder)
		{
			$('#add_to_cart:hidden').fadeIn(600);

			if (stock_management &amp;&amp; availableLaterValue != '')
			{
				$('#availability_value').addClass('label-warning').text(availableLaterValue).show('slow');
				$('#availability_statut:hidden').show('slow');
			}
			else {
				$('#availability_value').addClass('label-warning').text(onBackOrderText).show('slow');
				// $('#availability_statut:visible').hide('slow');
			}
				
		}
</pre>
<p>We just added brackets to the else statement, then copied the label-warning part from above, and used our text variable instead. Save and refresh, then try reloading the page with the combination selected, as well as switching between that and others. You will notice the text behaves as expected now!</p>
							</div>",prestashop,prestashop,http://nemops.com/wp-content/uploads/2016/01/adding_ean13-180x180.jpg,left
27,"Remove the site name from your Meta Title in PrestaShop",editor@davidberruezo.com,,post,publish,"Remove the site name from your Meta Title in PrestaShop","<div class=""post-content"">
								<p>In this video we will see how to create packs of Products in PrestaShop, as well as how to set them up to pull quantities we want<br><span id=""more-2832""></span></p>
<h2>Watch the Screencast</h2>

	<div class=""video-embed"">
		<iframe width=""640"" height=""360"" src=""http://www.youtube.com/embed/_YfL5m9VYTU"" frameborder=""0"" allowfullscreen></iframe><p><a href=""https://www.youtube.com/user/NemoPostScriptum/videos"" onclick=""_gaq.push(['_trackEvent', 'outbound-article', 'https://www.youtube.com/user/NemoPostScriptum/videos', 'Subscribe Post Scriptum\'s Youtube Channel']);"" rel=""nofollow"" title=""Subscribe Post Scriptum's Youtube Channel"">Subscribe Post Scriptum's Youtube Channel</a></p>	</div>
							</div>",prestashop,prestashop,http://nemops.com/wp-content/uploads/2013/12/admin-ajax.jpg,left
28,"Google Pagespeed Tricks for PrestaShop",editor@davidberruezo.com,,post,publish,"Google Pagespeed Tricks for PrestaShop","<div class=""post-content"">
								<p>In this tutorial, we will see how to add a button to empty the PrestaShop Cart in one click.<br><span id=""more-2824""></span></p>
<h2>Adding the button to the cart page</h2>
<p>The first thing we need is, of course, a button to play with. The ideal place where to add it is <strong>shopping-cart.tpl</strong>, specifically right after the order summary table. THerefore, open un the file, located in the theme folder, and read the end of the table, around line 454 of the default template:</p>
<pre class=""brush: php; html-script: true; title: ; notranslate"" title="""">
					{/foreach}
				&lt;/tbody&gt;
			{/if}
		&lt;/table&gt;
</pre>
<p>Right after the table, let’s add a simple button:</p>
<pre class=""brush: xml; title: ; notranslate"" title="""">
		&lt;a class=""btn btn-default pull-right"" id=""removeAll"" href=""javascript:void(0)""&gt;
			Empty Cart
		&lt;/a&gt;
</pre>
<p>Then, we need it to do something. We could use a submit, inside a form, but modern standards require speed, and nothing beats ajax in this.<br>
Right after the button, let’s add a script tag:</p>
<pre class=""brush: xml; title: ; notranslate"" title="""">
&lt;script&gt;
			$(document).ready(function() {
				$('#removeAll').click(function(e) {
				});
			});
				
&lt;/script&gt;
</pre>
<p>We want to target the click event of our new button, and fire an ajax request to the cart controller:</p>
<pre class=""brush: jscript; title: ; notranslate"" title="""">
$(document).ready(function() {
	$('#removeAll').click(function(e) {
		e.preventDefault()
		$.ajax({
			type: 'POST',
			headers: { ""cache-control"": ""no-cache"" },
			url: baseUri + '?rand=' + new Date().getTime(),
			async: true,
			cache: false,
			dataType : ""json"",
			data: 'controller=cart&amp;deleteAll=1&amp;token=' + static_token + '&amp;ajax=true',
			success: function(data){
				$('.opc-main-block, .step-num, #HOOK_SHOPPING_CART_EXTRA').fadeOut('fast');
				$('#order-detail-content').fadeOut('fast', function() {
					$('#emptyCartWarning').fadeIn('slow');	
				});
				ajaxCart.refresh();
			}
		})
	});
});
</pre>
<p><strong>Explanation:</strong> The url we call is simply the base one, plus a random value with the date, to avoid the request being cached. In terms of data, we need to pass in the controller (cart), and action (deleteAll, which doesn’t exist yet, but we will create in a second), the security token, and then ajax=true.<br>
On success, we fade out the page content, making sure any stuff from the One Page Checkout is hidden as well, and we also refresh the cart block.</p>
<p>The next step is to create something to handle the new deleteAll command.</p>
<div class=""separator""></div>
<h2>Editing the CartController</h2>
<p>As always, instead of modifying the core file, make sure you use an override for this method. The function we are interested in is <strong>postProcess</strong>:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
    public function postProcess()
    {
        // Update the cart ONLY if $this-&gt;cookies are available, in order to avoid ghost carts created by bots
        if ($this-&gt;context-&gt;cookie-&gt;exists() &amp;&amp; !$this-&gt;errors &amp;&amp; !($this-&gt;context-&gt;customer-&gt;isLogged() &amp;&amp; !$this-&gt;isTokenValid())) {
            if (Tools::getIsset('add') || Tools::getIsset('update')) {
                $this-&gt;processChangeProductInCart();
            } elseif (Tools::getIsset('delete')) {
                $this-&gt;processDeleteProductInCart();
            } elseif (Tools::getIsset('changeAddressDelivery')) {
                $this-&gt;processChangeProductAddressDelivery();
            } elseif (Tools::getIsset('allowSeperatedPackage')) {
                $this-&gt;processAllowSeperatedPackage();
            } elseif (Tools::getIsset('duplicate')) {
                $this-&gt;processDuplicateProduct();
            }
            // Make redirection
            if (!$this-&gt;errors &amp;&amp; !$this-&gt;ajax) {
                $queryString = Tools::safeOutput(Tools::getValue('query', null));
                if ($queryString &amp;&amp; !Configuration::get('PS_CART_REDIRECT')) {
                    Tools::redirect('index.php?controller=search&amp;search='.$queryString);
                }

                // Redirect to previous page
                if (isset($_SERVER['HTTP_REFERER'])) {
                    preg_match('!http(s?)://(.*)/(.*)!', $_SERVER['HTTP_REFERER'], $regs);
                    if (isset($regs[3]) &amp;&amp; !Configuration::get('PS_CART_REDIRECT')) {
                        $url = preg_replace('/(\?)+content_only=1/', '', $_SERVER['HTTP_REFERER']);
                        Tools::redirect($url);
                    }
                }

                Tools::redirect('index.php?controller=order&amp;'.(isset($this-&gt;id_product) ? 'ipa='.$this-&gt;id_product : ''));
            }
        } elseif (!$this-&gt;isTokenValid()) {
            Tools::redirect('index.php');
        }
    }
</pre>
<p>See all those <strong>elseif</strong>s? We need another condition to target our deleteAll command. Therefore, at the end of the stack, add another:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
...
} elseif (Tools::getIsset('duplicate')) {
    $this-&gt;processDuplicateProduct();
} elseif (Tools::getIsset('deleteAll')) {

}
// Make redirection
if (!$this-&gt;errors &amp;&amp; !$this-&gt;ajax) {
...
</pre>
<p>Inside it, we do not need fancy stuff, only:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
elseif (Tools::getIsset('deleteAll')) {
                
    $this-&gt;context-&gt;cart-&gt;delete();
    $this-&gt;context-&gt;cookie-&gt;id_cart = 0;
    die(1);


}
</pre>
<p>This will clear the cart for good, and reset the id for the current user. You can also avoid resetting it, if you prefer.<br>
Save and test the button now. Make sure you clear the class_index.php file inside <em>cache/</em>, if you used an override.<br>
We are done!</p>
							</div>",prestashop,prestashop,http://nemops.com/wp-content/uploads/2015/12/google_pagespeed-180x180.jpg,left
29,"Displaying all Categories of a Product in PrestaShop",editor@davidberruezo.com,,post,publish,"Displaying all Categories of a Product in PrestaShop","<div class=""post-content"">
								<p>In this quick tip we will create welcome coupons for our clients, to reward the ones who decide to sign up for an account on our shop.</p>
<p><span id=""more-2861""></span></p>
<p>In order to create a discount code for clients who register new accounts on our store, we must edit the <strong>AuthController</strong> file. As always, the best practice is to create an override for it, so let’s add a new one inside <em>override/controllers/front/</em>, named AuthController.php<br>
Open it up and add some generic override code inside php tags:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
Class AuthController extends AuthControllerCore
{

}
</pre>
<p>The method we are interested in is <strong>sendConfirmationMail</strong>. We can get it straight out of the original controller, and I suggest you take it from yours since it might differ from mine (I am using PrestaShop 1.6.1.6):</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
    protected function sendConfirmationMail(Customer $customer)
    {
        if (!Configuration::get('PS_CUSTOMER_CREATION_EMAIL')) {
            return true;
        }

        return Mail::Send(
            $this-&gt;context-&gt;language-&gt;id,
            'account',
            Mail::l('Welcome!'),
            array(
                '{firstname}' =&gt; $customer-&gt;firstname,
                '{lastname}' =&gt; $customer-&gt;lastname,
                '{email}' =&gt; $customer-&gt;email,
                '{passwd}' =&gt; Tools::getValue('passwd'))
            $customer-&gt;email,
            $customer-&gt;firstname.' '.$customer-&gt;lastname
        );
    }
</pre>
<p>Copy and paste it inside our new override. At this point we can add our code to create the new cart rule, <strong>right before</strong> it returns the Mail::Send method:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
        $cartRuleObj = new CartRule();
        $cartRuleObj-&gt;date_from = date('Y-m-d H:i:s');
        $cartRuleObj-&gt;date_to = '2046-12-12 00:00:00';
        $cartRuleObj-&gt;name[Configuration::get('PS_LANG_DEFAULT')] = 'Welcome coupon';
        $cartRuleObj-&gt;quantity = 1;
        $code = Tools::passwdGen();
        while (CartRule::cartRuleExists($code)) { // let's make sure there is no duplicate
            $code = Tools::passwdGen();
        }
        $cartRuleObj-&gt;code = $code;
        $cartRuleObj-&gt;quantity_per_user = 1;
        $cartRuleObj-&gt;reduction_percent = 20;
        $cartRuleObj-&gt;reduction_amount = 0;
        $cartRuleObj-&gt;free_shipping = 0;
        $cartRuleObj-&gt;active = 1;
        $cartRuleObj-&gt;minimum_amount = 0;
        $cartRuleObj-&gt;id_customer = $customer-&gt;id;
        $cartRuleObj-&gt;add();

</pre>
<p>For this example, I am creating a coupon with discount code that will give 20% off the price, that is going to be valid for a virtually indefinite period of time, with a single usage and restricted to this customer.<br>
Make sure you add the following line:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">

$cartRuleObj-&gt;id_customer = $customer-&gt;id;

</pre>
<p>As it is what binds the rule to the current customer instance. Also notice I am generating a random code, and checking if there is any identical one in the database already using a while loop. While there is, we try creating a new one.</p>
<p>At this point, as soon as the customer accesses his account page, he will see the code in the My coupons section. However, as good practice we should really inform him in the account creation email as well. Let’s therefore amend the Mail:Send call as follows, by passing $code to the list of variables:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
 return Mail::Send(
            $this-&gt;context-&gt;language-&gt;id,
            'account',
            Mail::l('Welcome!'),
            array(
                '{firstname}' =&gt; $customer-&gt;firstname,
                '{lastname}' =&gt; $customer-&gt;lastname,
                '{email}' =&gt; $customer-&gt;email,
                '{passwd}' =&gt; Tools::getValue('passwd')),
                '{coupon}' =&gt; $code,
            $customer-&gt;email,
            $customer-&gt;firstname.' '.$customer-&gt;lastname
        );
</pre>
<p>Great, we are done with php. What we need to do now is edit the corresponding account.html and account.txt emails to reflect the {coupon} variable.<br>
Here is the final php code:</p>
<script>Hola paco</script><pre class=""brush: php; title: ; notranslate"" title="""">
    protected function sendConfirmationMail(Customer $customer)
    {
        if (!Configuration::get('PS_CUSTOMER_CREATION_EMAIL')) {
            return true;
        }

        // nemo tut welcome coupon
        
        $cartRuleObj = new CartRule();
        $cartRuleObj-&gt;date_from = date('Y-m-d H:i:s');
        $cartRuleObj-&gt;date_to = '2046-12-12 00:00:00';
        $cartRuleObj-&gt;name[Configuration::get('PS_LANG_DEFAULT')] = 'Welcome coupon';
        $cartRuleObj-&gt;quantity = 1;
        $code = Tools::passwdGen();
        while (CartRule::cartRuleExists($code)) { // let's make sure there is no duplicate
            $code = Tools::passwdGen();
        }
        $cartRuleObj-&gt;code = $code;
        $cartRuleObj-&gt;quantity_per_user = 1;
        $cartRuleObj-&gt;reduction_percent = 20;
        $cartRuleObj-&gt;reduction_amount = 0;
        $cartRuleObj-&gt;free_shipping = 0;
        $cartRuleObj-&gt;active = 1;
        $cartRuleObj-&gt;minimum_amount = 0;
        $cartRuleObj-&gt;id_customer = $customer-&gt;id;
        $cartRuleObj-&gt;add();


        return Mail::Send(
            $this-&gt;context-&gt;language-&gt;id,
            'account',
            Mail::l('Welcome!'),
            array(
                '{firstname}' =&gt; $customer-&gt;firstname,
                '{lastname}' =&gt; $customer-&gt;lastname,
                '{email}' =&gt; $customer-&gt;email,
                '{passwd}' =&gt; Tools::getValue('passwd')),
                '{coupon}' =&gt; $code
            $customer-&gt;email,
            $customer-&gt;firstname.' '.$customer-&gt;lastname
        );
    }
</pre>
<div class=""separator""></div>
<h2>Editing emails in PrestaShop</h2>
<p>We have two ways to edit emails in PrestaShop: one is through the back office translations interface, the other is manual. Either will be fine, but I personally usually prefer to modify the html code directly.</p>
<h3>Editing PrestaShop emails using the back-office interface</h3>
<p>If you choose the first way, you can simply log in to the back office, and reach <strong>Localization &gt; Translations</strong>. Choose<br><strong>Email Templates translations</strong> from the first dropdown, then your template, and lastly the language, then hit modify.<br>
In the next screen, toggle the <strong>Core emails</strong> section, and look for one labeled <em>account</em>.</p>
<p><a href=""http://nemops.com/wp-content/uploads/2016/09/prestashop_welcome_coupon_edit_email.png""><img src=""http://nemops.com/wp-content/uploads/2016/09/prestashop_welcome_coupon_edit_email-680x306.png"" alt=""prestashop_welcome_coupon_edit_email"" width=""680"" height=""306"" class=""aligncenter size-large wp-image-2865""></a></p>
<p>What we want to do is edit the HTML template first, so click on <strong>Edit HTML version</strong>, and find a good spot where to add the new variable:</p>
<p><a href=""http://nemops.com/wp-content/uploads/2016/09/prestashop_welcome_coupon_email.png""><img src=""http://nemops.com/wp-content/uploads/2016/09/prestashop_welcome_coupon_email-680x455.png"" alt=""prestashop_welcome_coupon_email"" width=""680"" height=""455"" class=""aligncenter size-large wp-image-2866""></a></p>
<p>Save, then do the same with the text version.</p>
<h3>Editing PrestaShop emails’ HTMl directly</h3>
<p>The second way is the one I prefer, as the built in editor can often be confusing, when not messy. Once more, we need to make sure we are editing the correct email templates, usually located in the current theme’s folder <em>/mails/</em> followed by the language ISO.<br>
The files we are interested in are <strong>account.html</strong> and <strong>account.txt</strong>. Here is the snippet I added to the html version”</p>
<pre class=""brush: xml; title: ; notranslate"" title="""">
&lt;tr&gt;
    &lt;td class=""space_footer"" style=""padding:0!important""&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td class=""box"" style=""border:1px solid #D6D4D4;background-color:#f8f8f8;padding:7px 0""&gt;
        &lt;table class=""table"" style=""width:100%""&gt;
            &lt;tr&gt;
                &lt;td width=""10"" style=""padding:7px 0""&gt;&amp;nbsp;&lt;/td&gt;
                &lt;td style=""padding:7px 0""&gt;
                    &lt;font size=""2"" face=""Open-sans, sans-serif"" color=""#555454""&gt;
                        &lt;p style=""border-bottom:1px solid #D6D4D4;margin:3px 0 7px;text-transform:uppercase;font-weight:500;font-size:18px;padding-bottom:10px""&gt;20% off welcome code: {coupon}&lt;/p&gt;
                        
                    &lt;/font&gt;
                &lt;/td&gt;
                &lt;td width=""10"" style=""padding:7px 0""&gt;&amp;nbsp;&lt;/td&gt;
            &lt;/tr&gt;
        &lt;/table&gt;
    &lt;/td&gt;
&lt;/tr&gt;
</pre>
<p>Which is basically a copy/paste of the one above, with a modified text. Once again, edit the txt version to add the variable there too.</p>
<div class=""separator""></div>
<p>At this point, make sure the modification is working by creating a new account and seeing if your customer gets the new email template, we are done!</p>
							</div>",prestashop,prestashop,http://nemops.com/wp-content/uploads/2013/12/admin-ajax.jpg,left
30,"Prestashop 1.7, Symfony and Twig",editor@davidberruezo.com,,post,publish,"Prestashop 1.7, Symfony and Twig","<div class=""post-content"">
								<p>With this Free PrestaShop Module, you can finally restrict single products’ access by customer group.<br><span id=""more-2852""></span></p>
<p>By default, PrestaShop only lets us restrict access by customer group for categories. This however, is very limiting if you want to create premium products, only available to a certain customer base. With this <strong>completely free</strong> PrestaShop Module, you can define access for each customer group, product by product.</p>
<p><a class=""button style1"" style=""text-align:center"" href=""http://store.nemops.com/free-modules/44-product-access.html#.V9ZZXPr5iUk"" title=""Download the Free PrestaShop Module - Product Access Here"">Download for Free Here!</a></p>
<h3>Core Features</h3>
<ul>
<li>Compatible with all standard modules</li>
<li>Hide products pages from the sight, by group</li>
<li>Hide products from search results</li>
<li>
<strong>Great for wholesalers! </strong>Create a premium set of products with complete freedom on the category!</li>
</ul>
</div>",prestashop,prestashop,http://nemops.com/wp-content/uploads/2015/12/prestashop_symfony-180x180.jpg,left
31,"PrestaShop Modules Development Course – Now available!",editor@davidberruezo.com,,post,publish,"PrestaShop Modules Development Course – Now available!","<div class=""post-content"">
								<p>In today’s tutorial we will learn how to add a “bought product” notification on the PrestaShop product page, much like Amazon does.</p>
<p><span id=""more-2847""></span></p>
<h2>Creating a ProductController override in PrestaShop</h2>
<p>The cleanest and standard compliant method for assigning the proper variables in PrestaShop, is to use a controller. We need to add content to the product page, so the one we are interested in is the ProductController. Additionally, in order to make sure our modification is upgrade-safe, we need to use an override instead of modifying the original.</p>
<p>Let’s get started!</p>
<p>Create a new file inside <em>override/controllers/front/</em> and name it <strong>ProductController.php</strong></p>
<p>Open it up, and within php tags add the following:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">

Class ProductController extends ProductControllerCore
{

}
</pre>
<p>We want to extend the initContent() method, so let’s do it:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">

Class ProductController extends ProductControllerCore
{
	public function initContent()
    {
        parent::initContent();
    }
}
</pre>
<p>We are calling the parent’s initContent as well, to make sure all the needed variables are loaded. At this point, <strong>before</strong> the parent is called, let’s first check if the current user is a registered customer, as we will never be able to tell what a guest has bought:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">

Class ProductController extends ProductControllerCore
{
	public function initContent()
    {

    	if($this-&gt;context-&gt;customer-&gt;id) // only if logged in
        {
			$bought_products = $this-&gt;context-&gt;customer-&gt;getBoughtProducts(); // only valid orders
        }
        parent::initContent();
    }
}
</pre>
<p>If it is, we get all the products he bought. Please notice only valid(paid) orders are considered. If you wish to include them all, you must remove the condition “valid = 1″ in the getBoughtProducts method, Customer class.</p>
<p>Now let’s cycle through them. If the current product’s id is matched, we assign a date variable to the template:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
    if($this-&gt;context-&gt;customer-&gt;id) // only if logged in
    {
        $bought_products = $this-&gt;context-&gt;customer-&gt;getBoughtProducts(); // only valid orders
        if($bought_products)
        {
            foreach ($bought_products as $prod) {

                if($prod['product_id'] = $this-&gt;product-&gt;id)
                {
                    $this-&gt;context-&gt;smarty-&gt;assign(array(
                        'bought_on'=&gt; $prod['date_add']
                    ));
                }
            }
        }
    }
</pre>
<p>We are done with php, the next step will be showing our custom text in the product.tpl file. Before proceeding, make sure to erase your class_index.php file, located in the <em>cache/</em> folder.</p>
<div class=""separator""></div>
<h2>Adding a bought product text to the product page</h2>
<p>Open up <strong>product.tpl</strong>, located in the theme folder. Please notice your code will be different if you use a custom template, as I am using default-bootstrap for this demonstration. I decided to add the info box at the top of the page, above the product image.<br>
If you want to pick the same spot, locate the div with class pb-left-column, and add the following right before it:</p>
<pre class=""brush: php; html-script: true; title: ; notranslate"" title="""">
		{if isset($bought_on)}
			&lt;div class=""col-xs-12""&gt;
				&lt;div class=""bought_on alert alert-info""&gt;
					{l s='You purchased this product on'} {dateFormat date=$bought_on}
				&lt;/div&gt;	
			&lt;/div&gt;
		{/if}
</pre>
<p>Save and refresh, we are done! You should see something like this:</p>
<p><a href=""http://nemops.com/wp-content/uploads/2016/09/bought_product_notification.png""><img src=""http://nemops.com/wp-content/uploads/2016/09/bought_product_notification-680x418.png"" alt=""Product bought label in PrestaShop"" width=""680"" height=""418"" class=""aligncenter size-large wp-image-2848""></a></p>
							</div>",prestashop,prestashop,http://nemops.com/wp-content/uploads/2015/11/nemops-180x180.jpg,left
32,"Cyber Monday! All modules 50% off till tomorrow!",editor@davidberruezo.com,,post,publish,"Cyber Monday! All modules 50% off till tomorrow!","<div class=""post-content"">
								<p>In this quick tip we will see how to create a simple script that generates PrestaShop cart rules with promotional codes in one click<br><span id=""more-2842""></span><br><a href=""http://nemops.com/wp-content/uploads/2016/08/create_discount.zip"" onclick=""_gaq.push(['_trackEvent','download','http://nemops.com/wp-content/uploads/2016/08/create_discount.zip']);"" class=""download-files button style1"" title=""Download Project Files"">Download Project Files</a></p>
<h2>Watch the Screencast</h2>

	<div class=""video-embed"">
		<iframe width=""640"" height=""360"" src=""http://www.youtube.com/embed/pJCNaZ8IUCo"" frameborder=""0"" allowfullscreen></iframe><p><a href=""https://www.youtube.com/user/NemoPostScriptum/videos"" onclick=""_gaq.push(['_trackEvent', 'outbound-article', 'https://www.youtube.com/user/NemoPostScriptum/videos', 'Subscribe Post Scriptum\'s Youtube Channel']);"" rel=""nofollow"" title=""Subscribe Post Scriptum's Youtube Channel"">Subscribe Post Scriptum's Youtube Channel</a></p>	</div>
							</div>",prestashop,prestashop,http://nemops.com/wp-content/uploads/2015/11/nemops-180x180.jpg,left
33,"Removing links from the top level in the PrestaShop top Menu",editor@davidberruezo.com,,post,publish,"Removing links from the top level in the PrestaShop top Menu","<div class=""post-content"">
								<p>In this flash tip we will see how to display an explanatory text for combinations which you have no stock for, but still want to allow the purchase of.</p>
<p><span id=""more-2837""></span></p>
<ul>
<li>PrestaShop Version used: 1.6.1.5</li>
</ul>
<h2>The background</h2>
<p>Do you allow back ordering products? If so, you might have noticed PrestaShop tends to be confusing on combinations. In the default template, when a combination is available and has stock, it displays the classic <strong>X items in stock</strong> message. However, if you select a combination that has currently zero stock, even if available for order, it displays nothing. Forum users have reported customers being confused by this, so let’s see how to fix it, and give our customers more feedback!</p>
<div class=""separator""></div>
<h2>The translatable string</h2>
<p>Unless you run a single language shop, you will need the text we are going to display to be translatable. Therefore, we will take advantage of PrestaShop’s AddJsDefL method to add a javascript variable that can easily be translated from the back office. Open up your <strong>product.tpl</strong> file, located in the theme folder. At the very end of it, add the following:</p>
<pre class=""brush: php; html-script: true; title: ; notranslate"" title="""">
{addJsDefL name='onBackOrderText'}{l s='On backorder' js=1}{/addJsDefL}
</pre>
<p><strong>What does it do?</strong> It takes any content between tags and assigns it to the variable with a given name. There is a manual method as well, but this is the one that better complies to PrestaShop standards. If you want to know more about this and other functions, you can refer to my <strong><a href=""http://nemops.com/prestashop-functions-1/#.V6rx7_n5jmg"" target=""_blank"" title=""Essential PrestaShop functions"">Essential PrestaShop functions</a></strong> series.</p>
<div class=""separator""></div>
<h2>Editing product.js</h2>
<p>Now that we have a string to play with, we have to make it work as we want. Open up <strong>product.js</strong>, located in the theme folder <em>/js/</em>. Please notice yours might be different if you do not use the default template. Locate the following at around line 630:</p>
<pre class=""brush: jscript; title: ; notranslate"" title="""">
		if (allowBuyWhenOutOfStock &amp;&amp; !selectedCombination['unavailable'] &amp;&amp; productAvailableForOrder)
		{
			$('#add_to_cart:hidden').fadeIn(600);

			if (stock_management &amp;&amp; availableLaterValue != '')
			{
				$('#availability_value').addClass('label-warning').text(availableLaterValue).show('slow');
				$('#availability_statut:hidden').show('slow');
			}
			else 
				$('#availability_statut:visible').hide('slow');
				
		}
</pre>
<p>The last part, in the else, is the one responsible for not displaying anything. We could simply comment it out, but if you try it, you will notice it says the product is available in other variants only. What to do then? Let’s modify it as follows:</p>
<pre class=""brush: jscript; title: ; notranslate"" title="""">
		if (allowBuyWhenOutOfStock &amp;&amp; !selectedCombination['unavailable'] &amp;&amp; productAvailableForOrder)
		{
			$('#add_to_cart:hidden').fadeIn(600);

			if (stock_management &amp;&amp; availableLaterValue != '')
			{
				$('#availability_value').addClass('label-warning').text(availableLaterValue).show('slow');
				$('#availability_statut:hidden').show('slow');
			}
			else {
				$('#availability_value').addClass('label-warning').text(onBackOrderText).show('slow');
				// $('#availability_statut:visible').hide('slow');
			}
				
		}
</pre>
<p>We just added brackets to the else statement, then copied the label-warning part from above, and used our text variable instead. Save and refresh, then try reloading the page with the combination selected, as well as switching between that and others. You will notice the text behaves as expected now!</p>
							</div>",prestashop,prestashop,http://nemops.com/wp-content/uploads/2015/11/remove_links-180x180.jpg,left
34,"Displaying more Supplier information on the Product Page in PrestaShop",editor@davidberruezo.com,,post,publish,"Displaying more Supplier information on the Product Page in PrestaShop","<div class=""post-content"">
								<p>In this video we will see how to create packs of Products in PrestaShop, as well as how to set them up to pull quantities we want<br><span id=""more-2832""></span></p>
<h2>Watch the Screencast</h2>

	<div class=""video-embed"">
		<iframe width=""640"" height=""360"" src=""http://www.youtube.com/embed/_YfL5m9VYTU"" frameborder=""0"" allowfullscreen></iframe><p><a href=""https://www.youtube.com/user/NemoPostScriptum/videos"" onclick=""_gaq.push(['_trackEvent', 'outbound-article', 'https://www.youtube.com/user/NemoPostScriptum/videos', 'Subscribe Post Scriptum\'s Youtube Channel']);"" rel=""nofollow"" title=""Subscribe Post Scriptum's Youtube Channel"">Subscribe Post Scriptum's Youtube Channel</a></p>	</div>
							</div>",prestashop,prestashop,http://nemops.com/wp-content/uploads/2015/11/supplier_info_feat-180x180.jpg,left
35,"Adding page-specific CSS and Javascript in PrestaShop",editor@davidberruezo.com,,post,publish,"Adding page-specific CSS and Javascript in PrestaShop","<div class=""post-content"">
								<p>In this tutorial, we will see how to add a button to empty the PrestaShop Cart in one click.<br><span id=""more-2824""></span></p>
<h2>Adding the button to the cart page</h2>
<p>The first thing we need is, of course, a button to play with. The ideal place where to add it is <strong>shopping-cart.tpl</strong>, specifically right after the order summary table. THerefore, open un the file, located in the theme folder, and read the end of the table, around line 454 of the default template:</p>
<pre class=""brush: php; html-script: true; title: ; notranslate"" title="""">
					{/foreach}
				&lt;/tbody&gt;
			{/if}
		&lt;/table&gt;
</pre>
<p>Right after the table, let’s add a simple button:</p>
<pre class=""brush: xml; title: ; notranslate"" title="""">
		&lt;a class=""btn btn-default pull-right"" id=""removeAll"" href=""javascript:void(0)""&gt;
			Empty Cart
		&lt;/a&gt;
</pre>
<p>Then, we need it to do something. We could use a submit, inside a form, but modern standards require speed, and nothing beats ajax in this.<br>
Right after the button, let’s add a script tag:</p>
<pre class=""brush: xml; title: ; notranslate"" title="""">
&lt;script&gt;
			$(document).ready(function() {
				$('#removeAll').click(function(e) {
				});
			});
				
&lt;/script&gt;
</pre>
<p>We want to target the click event of our new button, and fire an ajax request to the cart controller:</p>
<pre class=""brush: jscript; title: ; notranslate"" title="""">
$(document).ready(function() {
	$('#removeAll').click(function(e) {
		e.preventDefault()
		$.ajax({
			type: 'POST',
			headers: { ""cache-control"": ""no-cache"" },
			url: baseUri + '?rand=' + new Date().getTime(),
			async: true,
			cache: false,
			dataType : ""json"",
			data: 'controller=cart&amp;deleteAll=1&amp;token=' + static_token + '&amp;ajax=true',
			success: function(data){
				$('.opc-main-block, .step-num, #HOOK_SHOPPING_CART_EXTRA').fadeOut('fast');
				$('#order-detail-content').fadeOut('fast', function() {
					$('#emptyCartWarning').fadeIn('slow');	
				});
				ajaxCart.refresh();
			}
		})
	});
});
</pre>
<p><strong>Explanation:</strong> The url we call is simply the base one, plus a random value with the date, to avoid the request being cached. In terms of data, we need to pass in the controller (cart), and action (deleteAll, which doesn’t exist yet, but we will create in a second), the security token, and then ajax=true.<br>
On success, we fade out the page content, making sure any stuff from the One Page Checkout is hidden as well, and we also refresh the cart block.</p>
<p>The next step is to create something to handle the new deleteAll command.</p>
<div class=""separator""></div>
<h2>Editing the CartController</h2>
<p>As always, instead of modifying the core file, make sure you use an override for this method. The function we are interested in is <strong>postProcess</strong>:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
    public function postProcess()
    {
        // Update the cart ONLY if $this-&gt;cookies are available, in order to avoid ghost carts created by bots
        if ($this-&gt;context-&gt;cookie-&gt;exists() &amp;&amp; !$this-&gt;errors &amp;&amp; !($this-&gt;context-&gt;customer-&gt;isLogged() &amp;&amp; !$this-&gt;isTokenValid())) {
            if (Tools::getIsset('add') || Tools::getIsset('update')) {
                $this-&gt;processChangeProductInCart();
            } elseif (Tools::getIsset('delete')) {
                $this-&gt;processDeleteProductInCart();
            } elseif (Tools::getIsset('changeAddressDelivery')) {
                $this-&gt;processChangeProductAddressDelivery();
            } elseif (Tools::getIsset('allowSeperatedPackage')) {
                $this-&gt;processAllowSeperatedPackage();
            } elseif (Tools::getIsset('duplicate')) {
                $this-&gt;processDuplicateProduct();
            }
            // Make redirection
            if (!$this-&gt;errors &amp;&amp; !$this-&gt;ajax) {
                $queryString = Tools::safeOutput(Tools::getValue('query', null));
                if ($queryString &amp;&amp; !Configuration::get('PS_CART_REDIRECT')) {
                    Tools::redirect('index.php?controller=search&amp;search='.$queryString);
                }

                // Redirect to previous page
                if (isset($_SERVER['HTTP_REFERER'])) {
                    preg_match('!http(s?)://(.*)/(.*)!', $_SERVER['HTTP_REFERER'], $regs);
                    if (isset($regs[3]) &amp;&amp; !Configuration::get('PS_CART_REDIRECT')) {
                        $url = preg_replace('/(\?)+content_only=1/', '', $_SERVER['HTTP_REFERER']);
                        Tools::redirect($url);
                    }
                }

                Tools::redirect('index.php?controller=order&amp;'.(isset($this-&gt;id_product) ? 'ipa='.$this-&gt;id_product : ''));
            }
        } elseif (!$this-&gt;isTokenValid()) {
            Tools::redirect('index.php');
        }
    }
</pre>
<p>See all those <strong>elseif</strong>s? We need another condition to target our deleteAll command. Therefore, at the end of the stack, add another:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
...
} elseif (Tools::getIsset('duplicate')) {
    $this-&gt;processDuplicateProduct();
} elseif (Tools::getIsset('deleteAll')) {

}
// Make redirection
if (!$this-&gt;errors &amp;&amp; !$this-&gt;ajax) {
...
</pre>
<p>Inside it, we do not need fancy stuff, only:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
elseif (Tools::getIsset('deleteAll')) {
                
    $this-&gt;context-&gt;cart-&gt;delete();
    $this-&gt;context-&gt;cookie-&gt;id_cart = 0;
    die(1);


}
</pre>
<p>This will clear the cart for good, and reset the id for the current user. You can also avoid resetting it, if you prefer.<br>
Save and test the button now. Make sure you clear the class_index.php file inside <em>cache/</em>, if you used an override.<br>
We are done!</p>
							</div>",prestashop,prestashop,http://nemops.com/wp-content/uploads/2013/09/Bolt.jpg,left
36,"Testing Paypal in PrestaShop",editor@davidberruezo.com,,post,publish,"Testing Paypal in PrestaShop","<div class=""post-content"">
								<p>In this article written by <a href=""https://twitter.com/mainoxa"" onclick=""_gaq.push(['_trackEvent', 'outbound-article', 'https://twitter.com/mainoxa', 'Ann Taylor']);"" title=""Ann Taylor""><strong>Ann Taylor</strong></a>, we will see how you can use sliders to promote your business, and review which ones will do best with PrestaShop<br><span id=""more-2813""></span></p>
<p>An online shop slider is no longer a gimmick, agree? Probably this is the reason you still don’t have it on your PrestaShop website. A slideshow is a traditional attention-grabbing tool, various types of which are constantly improved with new great features. A traditional tool with a lot opportunities, which very often becomes a kind of organic marketing channel for promoting your best or pushing underselling products. Think of it, there are no chances it can have a bad influence on your traffic and sales.</p>
<p>It’s a not a big task to build a catchy slider and track right visitors to the right products, mostly all types of a PrestaShop slider can do that, but still each one has its own features, functions, and, of course, pricing. If you create a slider with a special tone and style, it can have a power of a well-written nifty word helping you engage much more people. And engaging people often lead to sales. Probably it’s hard to make a completely different exclusive slider, but a bit of personalization, attractiveness and your of course quality products are your best weapon.</p>
<p>How to achieve the best results in building a slider with PrestaShop module? Good question. I’d like to give some humble tips, hope they’ll sound fresh for you:</p>
<p> </p>
<p><strong>Images.</strong> Slider is a gallery of images. Try to make it a kind of art gallery, namely, reduce useless elements. What does that mean? What’s really interesting in product images, they never lie and never say the truth, it’s your chance to be more genuine and open to your customers: risk to show only images or even a slider in a full-screen mode, where the photos are presented in close-up details. They can even go without additional description and compelling calls-to-action, so the visitors are curious to go to the product’s page and find all important info about it. Though it should not be applied to the announcements of deals, offers and sales, where text messages are the most important.</p>
<p> </p>
<p><strong>Ads.</strong> Don’t advertise too much, people are not interested in ads, they are interested in particular products and want to know more details about it: instead of saying ‘superb belt’ you can better put some useful info about it in short: brand name, material, design, uniqueness, etc. (a quick hint: the best description of your products and services can be found among positive customer feedbacks!).</p>
<p> </p>
<p><strong>Quantity.</strong> Yes, you want to sell as more products as possible. But that should not mean putting 20 images into one slider – it can load for a long time or even freeze on some devices. Limit it to 5 – 7 slides. You still have a lot of abilities to create several sliders and put it on different pages or simply replace some slides in your main slider from time to time to monitor which ones have higher conversion and product sales.</p>
<p>Hope that helps. Let’s now revises some of the available popular&amp;fresh PrestaShop slider modules that come with some standout features.</p>
<div class=""separator""></div>
<h2><strong>Featured Products Slider module</strong></h2>
<p><a href=""http://addons.prestashop.com/en/8732-featured-products-slider.html"" onclick=""_gaq.push(['_trackEvent', 'outbound-article', 'http://addons.prestashop.com/en/8732-featured-products-slider.html', 'http://addons.prestashop.com/en/8732-featured-products-slider.html']);"">http://addons.prestashop.com/en/8732-featured-products-slider.html</a></p>
<p><a href=""http://nemops.com/wp-content/uploads/2016/07/Featured-Products-Slider.png""><img class=""aligncenter size-full wp-image-2816"" src=""http://nemops.com/wp-content/uploads/2016/07/Featured-Products-Slider.png"" alt=""PrestaShop Slider: Featured Products Slider"" width=""640"" height=""513""></a></p>
<p>Using this module you can create a stunning slider for featuring your products on Home, Category and Products page. Let’s count the options able to help you maximum personalize the slider:</p>
<ul>
<li>Ability to choose a slider position (center, column, none)</li>
<li>Setting width and height of the slider</li>
<li>Timing of pauses</li>
<li>Sorting the products (Random, Top sellers, Most viewed, Recently added)</li>
<li>Showing/hiding: a product title, description, price, ‘add to cart button’, navigation buttons/arrows</li>
<li>Customizable colors, background, product limits and count, a number of scrolled products</li>
<li>Well-documented module.</li>
</ul>
<div class=""separator""></div>
<h2><strong>Layer Slider </strong></h2>
<p><a href=""http://addons.prestashop.com/en/19062-layer-slider-responsive-slideshow.html"" onclick=""_gaq.push(['_trackEvent', 'outbound-article', 'http://addons.prestashop.com/en/19062-layer-slider-responsive-slideshow.html', 'http://addons.prestashop.com/en/19062-layer-slider-responsive-slideshow.html']);"">http://addons.prestashop.com/en/19062-layer-slider-responsive-slideshow.html</a></p>
<p><a href=""http://nemops.com/wp-content/uploads/2016/07/Layer-slider.png""><img class=""aligncenter size-full wp-image-2817"" src=""http://nemops.com/wp-content/uploads/2016/07/Layer-slider.png"" alt=""PrestaShop Slider: Layer slider"" width=""640"" height=""424""></a></p>
<p>One of the most popular PrestaShop sliders with very good customers’ review. It’s a fully responsive multipurpose tool that comes with 200 presets, 2D and 3D slide transition. Using this module, you are provided with numerous advantages:</p>
<p> </p>
<ul>
<li>Admin tools with drag-and-drop nature</li>
<li>Real-time slide preview</li>
<li>Swipe navigation support</li>
<li>Lazy-loads for better slider performance</li>
<li>All types of content layers (text, image, video)</li>
<li>Compatibility with old browsers</li>
<li>Multiple sliders on a single page</li>
<li>full-width, full size or fixed dimensions layouts are available</li>
<li>Optional auto-start of the slideshow</li>
<li>Pauses control</li>
<li>Optional random slideshow</li>
<li>Opportunity to link any layer to a particular URL.</li>
</ul>
<div class=""separator""></div>
<h2><strong>MotoPress Slider Module</strong></h2>
<p><a href=""http://addons.prestashop.com/en/21880-motopress-slider.html"" onclick=""_gaq.push(['_trackEvent', 'outbound-article', 'http://addons.prestashop.com/en/21880-motopress-slider.html', 'http://addons.prestashop.com/en/21880-motopress-slider.html']);"">http://addons.prestashop.com/en/21880-motopress-slider.html</a></p>
<p><a href=""http://nemops.com/wp-content/uploads/2016/07/MotoPress-slider-module.png""><img class=""aligncenter size-full wp-image-2818"" src=""http://nemops.com/wp-content/uploads/2016/07/MotoPress-slider-module.png"" alt=""PrestaShop Slider: MotoPress slider module"" width=""640"" height=""287""></a></p>
<p>This module is 3 in 1 solution: image, video and product slider, so it can become your ultimate tool in building diverse sliders. The admin tools look like ones of the most user-friendly with simple animated layers (text, image, video, etc), visual style builder and many auto-embeds of your content. The main advantages include:</p>
<p> </p>
<ul>
<li>Fully responsive and retina-ready design</li>
<li>Supports swipe navigation</li>
<li>Visually customizable fonts, background, and other slider design elements</li>
<li>Ability to preview slider in backend</li>
<li>Saving and reusing your custom styles</li>
<li>Full-screen slider support plus options for manual slider width/height settings</li>
<li>Animation effects and ability to preview them before applying</li>
<li>Safe import/export of your data</li>
<li>Showing products in the slider using macros (auto-embedded slider elements) like Price, Add to cart button, etc.</li>
<li>Enabling slideshow on different website widget areas</li>
<li>Ability to display the products by categories, tags, in-stock products, on-sale items, including/excluding the products by ID.</li>
<li>Link a slide to URL ability.</li>
</ul>
<div class=""separator""></div>
<h2><strong>Slider and Push Products</strong></h2>
<p><a href=""http://addons.prestashop.com/en/4780-slider-push-products-2-in-1.html"" onclick=""_gaq.push(['_trackEvent', 'outbound-article', 'http://addons.prestashop.com/en/4780-slider-push-products-2-in-1.html', 'http://addons.prestashop.com/en/4780-slider-push-products-2-in-1.html']);"">http://addons.prestashop.com/en/4780-slider-push-products-2-in-1.html</a></p>
<p><a href=""http://nemops.com/wp-content/uploads/2016/07/Slider-and-Push-Products.png""><img class=""aligncenter size-full wp-image-2819"" src=""http://nemops.com/wp-content/uploads/2016/07/Slider-and-Push-Products.png"" alt=""PrestaShop Slider: Slider and Push Products"" width=""640"" height=""464""></a></p>
<p>The slider developed by Prestashop, which can mean a good reliable product.. It’s a 2 in 1 solution: you can create a slideshow and push the needed products of your online store. The main features include:</p>
<p> </p>
<ul>
<li>Shop format adaptation: display both slideshow and push products in two or three-column layout</li>
<li>Fully customizable: 9 predefined layouts (among them 5 come with slideshow)</li>
<li>Ability to display different images for different language speakers</li>
<li>Option to link a slide to an external website</li>
</ul>
<p> </p>
<h2><strong>Slider by Category Module</strong></h2>
<p><a href=""http://addons.prestashop.com/en/17308-slider-by-category.html"" onclick=""_gaq.push(['_trackEvent', 'outbound-article', 'http://addons.prestashop.com/en/17308-slider-by-category.html', 'http://addons.prestashop.com/en/17308-slider-by-category.html']);"">http://addons.prestashop.com/en/17308-slider-by-category.html</a></p>
<p><a href=""http://nemops.com/wp-content/uploads/2016/07/Slider-by-category.png""><img class=""aligncenter size-full wp-image-2820"" src=""http://nemops.com/wp-content/uploads/2016/07/Slider-by-category.png"" alt=""PrestaShop Slider: Slider by category"" width=""640"" height=""520""></a></p>
<p>Despite its limit of displaying the products by category only, this fact can become your advantage as you won’t need to deal with numerous of additional settings. What options does website administrator have? Let’s see:</p>
<ul>
<li>Customizable height and width of the slider</li>
<li>Control over slides timing and speed</li>
<li>Selectable categories for adding, enabling, editing or deleting slides.</li>
</ul>
<p> </p>
<p>Do you probably use any other PrestaShop slider module that can provide users with more customization freedom and more possibilities? Don’t hide this info then!</p>
<div class=""separator""></div>
<h3>Author bio</h3>
<p>Ann is an open source and folk music lover. She likes blogging and learning SEO techniques.</p>
<p>Find Ann on Twitter: <a href=""https://twitter.com/mainoxa"" onclick=""_gaq.push(['_trackEvent', 'outbound-article', 'https://twitter.com/mainoxa', 'https://twitter.com/mainoxa']);"">https://twitter.com/mainoxa</a></p>
<p> </p>
<p> </p>
							</div>",prestashop,prestashop,http://nemops.com/wp-content/uploads/2015/10/testing_paypal_prestashop-180x180.jpg,left
37,"Top 10 Free PrestaShop Modules",editor@davidberruezo.com,,post,publish,"Top 10 Free PrestaShop Modules","<div class=""post-content"">
								<p>In this quick tip we will create welcome coupons for our clients, to reward the ones who decide to sign up for an account on our shop.</p>
<p><span id=""more-2861""></span></p>
<p>In order to create a discount code for clients who register new accounts on our store, we must edit the <strong>AuthController</strong> file. As always, the best practice is to create an override for it, so let’s add a new one inside <em>override/controllers/front/</em>, named AuthController.php<br>
Open it up and add some generic override code inside php tags:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
Class AuthController extends AuthControllerCore
{

}
</pre>
<p>The method we are interested in is <strong>sendConfirmationMail</strong>. We can get it straight out of the original controller, and I suggest you take it from yours since it might differ from mine (I am using PrestaShop 1.6.1.6):</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
    protected function sendConfirmationMail(Customer $customer)
    {
        if (!Configuration::get('PS_CUSTOMER_CREATION_EMAIL')) {
            return true;
        }

        return Mail::Send(
            $this-&gt;context-&gt;language-&gt;id,
            'account',
            Mail::l('Welcome!'),
            array(
                '{firstname}' =&gt; $customer-&gt;firstname,
                '{lastname}' =&gt; $customer-&gt;lastname,
                '{email}' =&gt; $customer-&gt;email,
                '{passwd}' =&gt; Tools::getValue('passwd'))
            $customer-&gt;email,
            $customer-&gt;firstname.' '.$customer-&gt;lastname
        );
    }
</pre>
<p>Copy and paste it inside our new override. At this point we can add our code to create the new cart rule, <strong>right before</strong> it returns the Mail::Send method:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
        $cartRuleObj = new CartRule();
        $cartRuleObj-&gt;date_from = date('Y-m-d H:i:s');
        $cartRuleObj-&gt;date_to = '2046-12-12 00:00:00';
        $cartRuleObj-&gt;name[Configuration::get('PS_LANG_DEFAULT')] = 'Welcome coupon';
        $cartRuleObj-&gt;quantity = 1;
        $code = Tools::passwdGen();
        while (CartRule::cartRuleExists($code)) { // let's make sure there is no duplicate
            $code = Tools::passwdGen();
        }
        $cartRuleObj-&gt;code = $code;
        $cartRuleObj-&gt;quantity_per_user = 1;
        $cartRuleObj-&gt;reduction_percent = 20;
        $cartRuleObj-&gt;reduction_amount = 0;
        $cartRuleObj-&gt;free_shipping = 0;
        $cartRuleObj-&gt;active = 1;
        $cartRuleObj-&gt;minimum_amount = 0;
        $cartRuleObj-&gt;id_customer = $customer-&gt;id;
        $cartRuleObj-&gt;add();

</pre>
<p>For this example, I am creating a coupon with discount code that will give 20% off the price, that is going to be valid for a virtually indefinite period of time, with a single usage and restricted to this customer.<br>
Make sure you add the following line:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">

$cartRuleObj-&gt;id_customer = $customer-&gt;id;

</pre>
<p>As it is what binds the rule to the current customer instance. Also notice I am generating a random code, and checking if there is any identical one in the database already using a while loop. While there is, we try creating a new one.</p>
<p>At this point, as soon as the customer accesses his account page, he will see the code in the My coupons section. However, as good practice we should really inform him in the account creation email as well. Let’s therefore amend the Mail:Send call as follows, by passing $code to the list of variables:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
 return Mail::Send(
            $this-&gt;context-&gt;language-&gt;id,
            'account',
            Mail::l('Welcome!'),
            array(
                '{firstname}' =&gt; $customer-&gt;firstname,
                '{lastname}' =&gt; $customer-&gt;lastname,
                '{email}' =&gt; $customer-&gt;email,
                '{passwd}' =&gt; Tools::getValue('passwd')),
                '{coupon}' =&gt; $code,
            $customer-&gt;email,
            $customer-&gt;firstname.' '.$customer-&gt;lastname
        );
</pre>
<p>Great, we are done with php. What we need to do now is edit the corresponding account.html and account.txt emails to reflect the {coupon} variable.<br>
Here is the final php code:</p>
<script>Hola paco</script><pre class=""brush: php; title: ; notranslate"" title="""">
    protected function sendConfirmationMail(Customer $customer)
    {
        if (!Configuration::get('PS_CUSTOMER_CREATION_EMAIL')) {
            return true;
        }

        // nemo tut welcome coupon
        
        $cartRuleObj = new CartRule();
        $cartRuleObj-&gt;date_from = date('Y-m-d H:i:s');
        $cartRuleObj-&gt;date_to = '2046-12-12 00:00:00';
        $cartRuleObj-&gt;name[Configuration::get('PS_LANG_DEFAULT')] = 'Welcome coupon';
        $cartRuleObj-&gt;quantity = 1;
        $code = Tools::passwdGen();
        while (CartRule::cartRuleExists($code)) { // let's make sure there is no duplicate
            $code = Tools::passwdGen();
        }
        $cartRuleObj-&gt;code = $code;
        $cartRuleObj-&gt;quantity_per_user = 1;
        $cartRuleObj-&gt;reduction_percent = 20;
        $cartRuleObj-&gt;reduction_amount = 0;
        $cartRuleObj-&gt;free_shipping = 0;
        $cartRuleObj-&gt;active = 1;
        $cartRuleObj-&gt;minimum_amount = 0;
        $cartRuleObj-&gt;id_customer = $customer-&gt;id;
        $cartRuleObj-&gt;add();


        return Mail::Send(
            $this-&gt;context-&gt;language-&gt;id,
            'account',
            Mail::l('Welcome!'),
            array(
                '{firstname}' =&gt; $customer-&gt;firstname,
                '{lastname}' =&gt; $customer-&gt;lastname,
                '{email}' =&gt; $customer-&gt;email,
                '{passwd}' =&gt; Tools::getValue('passwd')),
                '{coupon}' =&gt; $code
            $customer-&gt;email,
            $customer-&gt;firstname.' '.$customer-&gt;lastname
        );
    }
</pre>
<div class=""separator""></div>
<h2>Editing emails in PrestaShop</h2>
<p>We have two ways to edit emails in PrestaShop: one is through the back office translations interface, the other is manual. Either will be fine, but I personally usually prefer to modify the html code directly.</p>
<h3>Editing PrestaShop emails using the back-office interface</h3>
<p>If you choose the first way, you can simply log in to the back office, and reach <strong>Localization &gt; Translations</strong>. Choose<br><strong>Email Templates translations</strong> from the first dropdown, then your template, and lastly the language, then hit modify.<br>
In the next screen, toggle the <strong>Core emails</strong> section, and look for one labeled <em>account</em>.</p>
<p><a href=""http://nemops.com/wp-content/uploads/2016/09/prestashop_welcome_coupon_edit_email.png""><img src=""http://nemops.com/wp-content/uploads/2016/09/prestashop_welcome_coupon_edit_email-680x306.png"" alt=""prestashop_welcome_coupon_edit_email"" width=""680"" height=""306"" class=""aligncenter size-large wp-image-2865""></a></p>
<p>What we want to do is edit the HTML template first, so click on <strong>Edit HTML version</strong>, and find a good spot where to add the new variable:</p>
<p><a href=""http://nemops.com/wp-content/uploads/2016/09/prestashop_welcome_coupon_email.png""><img src=""http://nemops.com/wp-content/uploads/2016/09/prestashop_welcome_coupon_email-680x455.png"" alt=""prestashop_welcome_coupon_email"" width=""680"" height=""455"" class=""aligncenter size-large wp-image-2866""></a></p>
<p>Save, then do the same with the text version.</p>
<h3>Editing PrestaShop emails’ HTMl directly</h3>
<p>The second way is the one I prefer, as the built in editor can often be confusing, when not messy. Once more, we need to make sure we are editing the correct email templates, usually located in the current theme’s folder <em>/mails/</em> followed by the language ISO.<br>
The files we are interested in are <strong>account.html</strong> and <strong>account.txt</strong>. Here is the snippet I added to the html version”</p>
<pre class=""brush: xml; title: ; notranslate"" title="""">
&lt;tr&gt;
    &lt;td class=""space_footer"" style=""padding:0!important""&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td class=""box"" style=""border:1px solid #D6D4D4;background-color:#f8f8f8;padding:7px 0""&gt;
        &lt;table class=""table"" style=""width:100%""&gt;
            &lt;tr&gt;
                &lt;td width=""10"" style=""padding:7px 0""&gt;&amp;nbsp;&lt;/td&gt;
                &lt;td style=""padding:7px 0""&gt;
                    &lt;font size=""2"" face=""Open-sans, sans-serif"" color=""#555454""&gt;
                        &lt;p style=""border-bottom:1px solid #D6D4D4;margin:3px 0 7px;text-transform:uppercase;font-weight:500;font-size:18px;padding-bottom:10px""&gt;20% off welcome code: {coupon}&lt;/p&gt;
                        
                    &lt;/font&gt;
                &lt;/td&gt;
                &lt;td width=""10"" style=""padding:7px 0""&gt;&amp;nbsp;&lt;/td&gt;
            &lt;/tr&gt;
        &lt;/table&gt;
    &lt;/td&gt;
&lt;/tr&gt;
</pre>
<p>Which is basically a copy/paste of the one above, with a modified text. Once again, edit the txt version to add the variable there too.</p>
<div class=""separator""></div>
<p>At this point, make sure the modification is working by creating a new account and seeing if your customer gets the new email template, we are done!</p>
							</div>",prestashop,prestashop,http://nemops.com/wp-content/uploads/2015/10/free_prestashop_modules-180x180.jpg,left
38,"Customizing PrestaShop PDF files (invoices, slips…)",editor@davidberruezo.com,,post,publish,"Customizing PrestaShop PDF files (invoices, slips…)","<div class=""post-content"">
								<p>With this Free PrestaShop Module, you can finally restrict single products’ access by customer group.<br><span id=""more-2852""></span></p>
<p>By default, PrestaShop only lets us restrict access by customer group for categories. This however, is very limiting if you want to create premium products, only available to a certain customer base. With this <strong>completely free</strong> PrestaShop Module, you can define access for each customer group, product by product.</p>
<p><a class=""button style1"" style=""text-align:center"" href=""http://store.nemops.com/free-modules/44-product-access.html#.V9ZZXPr5iUk"" title=""Download the Free PrestaShop Module - Product Access Here"">Download for Free Here!</a></p>
<h3>Core Features</h3>
<ul>
<li>Compatible with all standard modules</li>
<li>Hide products pages from the sight, by group</li>
<li>Hide products from search results</li>
<li>
<strong>Great for wholesalers! </strong>Create a premium set of products with complete freedom on the category!</li>
</ul>
</div>",prestashop,prestashop,http://nemops.com/wp-content/uploads/2015/10/customize_prestashop_pdf-180x180.jpg,left
39,"Adding Tags to the product list in PrestaShop",editor@davidberruezo.com,,post,publish,"Adding Tags to the product list in PrestaShop","<div class=""post-content"">
								<p>In today’s tutorial we will learn how to add a “bought product” notification on the PrestaShop product page, much like Amazon does.</p>
<p><span id=""more-2847""></span></p>
<h2>Creating a ProductController override in PrestaShop</h2>
<p>The cleanest and standard compliant method for assigning the proper variables in PrestaShop, is to use a controller. We need to add content to the product page, so the one we are interested in is the ProductController. Additionally, in order to make sure our modification is upgrade-safe, we need to use an override instead of modifying the original.</p>
<p>Let’s get started!</p>
<p>Create a new file inside <em>override/controllers/front/</em> and name it <strong>ProductController.php</strong></p>
<p>Open it up, and within php tags add the following:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">

Class ProductController extends ProductControllerCore
{

}
</pre>
<p>We want to extend the initContent() method, so let’s do it:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">

Class ProductController extends ProductControllerCore
{
	public function initContent()
    {
        parent::initContent();
    }
}
</pre>
<p>We are calling the parent’s initContent as well, to make sure all the needed variables are loaded. At this point, <strong>before</strong> the parent is called, let’s first check if the current user is a registered customer, as we will never be able to tell what a guest has bought:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">

Class ProductController extends ProductControllerCore
{
	public function initContent()
    {

    	if($this-&gt;context-&gt;customer-&gt;id) // only if logged in
        {
			$bought_products = $this-&gt;context-&gt;customer-&gt;getBoughtProducts(); // only valid orders
        }
        parent::initContent();
    }
}
</pre>
<p>If it is, we get all the products he bought. Please notice only valid(paid) orders are considered. If you wish to include them all, you must remove the condition “valid = 1″ in the getBoughtProducts method, Customer class.</p>
<p>Now let’s cycle through them. If the current product’s id is matched, we assign a date variable to the template:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
    if($this-&gt;context-&gt;customer-&gt;id) // only if logged in
    {
        $bought_products = $this-&gt;context-&gt;customer-&gt;getBoughtProducts(); // only valid orders
        if($bought_products)
        {
            foreach ($bought_products as $prod) {

                if($prod['product_id'] = $this-&gt;product-&gt;id)
                {
                    $this-&gt;context-&gt;smarty-&gt;assign(array(
                        'bought_on'=&gt; $prod['date_add']
                    ));
                }
            }
        }
    }
</pre>
<p>We are done with php, the next step will be showing our custom text in the product.tpl file. Before proceeding, make sure to erase your class_index.php file, located in the <em>cache/</em> folder.</p>
<div class=""separator""></div>
<h2>Adding a bought product text to the product page</h2>
<p>Open up <strong>product.tpl</strong>, located in the theme folder. Please notice your code will be different if you use a custom template, as I am using default-bootstrap for this demonstration. I decided to add the info box at the top of the page, above the product image.<br>
If you want to pick the same spot, locate the div with class pb-left-column, and add the following right before it:</p>
<pre class=""brush: php; html-script: true; title: ; notranslate"" title="""">
		{if isset($bought_on)}
			&lt;div class=""col-xs-12""&gt;
				&lt;div class=""bought_on alert alert-info""&gt;
					{l s='You purchased this product on'} {dateFormat date=$bought_on}
				&lt;/div&gt;	
			&lt;/div&gt;
		{/if}
</pre>
<p>Save and refresh, we are done! You should see something like this:</p>
<p><a href=""http://nemops.com/wp-content/uploads/2016/09/bought_product_notification.png""><img src=""http://nemops.com/wp-content/uploads/2016/09/bought_product_notification-680x418.png"" alt=""Product bought label in PrestaShop"" width=""680"" height=""418"" class=""aligncenter size-large wp-image-2848""></a></p>
							</div>",prestashop,prestashop,http://nemops.com/wp-content/uploads/2015/10/product_tags_product_list-180x180.jpg,left
40,"Guest Post: 10 Free PrestaShop Themes for Your Future Online Store",editor@davidberruezo.com,,post,publish,"Guest Post: 10 Free PrestaShop Themes for Your Future Online Store","<div class=""post-content"">
								<p>In this quick tip we will see how to create a simple script that generates PrestaShop cart rules with promotional codes in one click<br><span id=""more-2842""></span><br><a href=""http://nemops.com/wp-content/uploads/2016/08/create_discount.zip"" onclick=""_gaq.push(['_trackEvent','download','http://nemops.com/wp-content/uploads/2016/08/create_discount.zip']);"" class=""download-files button style1"" title=""Download Project Files"">Download Project Files</a></p>
<h2>Watch the Screencast</h2>

	<div class=""video-embed"">
		<iframe width=""640"" height=""360"" src=""http://www.youtube.com/embed/pJCNaZ8IUCo"" frameborder=""0"" allowfullscreen></iframe><p><a href=""https://www.youtube.com/user/NemoPostScriptum/videos"" onclick=""_gaq.push(['_trackEvent', 'outbound-article', 'https://www.youtube.com/user/NemoPostScriptum/videos', 'Subscribe Post Scriptum\'s Youtube Channel']);"" rel=""nofollow"" title=""Subscribe Post Scriptum's Youtube Channel"">Subscribe Post Scriptum's Youtube Channel</a></p>	</div>
							</div>",prestashop,prestashop,http://nemops.com/wp-content/uploads/2015/09/free_prestashop_themes-180x180.jpg,left
41,"How to upload new file types with the Prestashop Filemanager",editor@davidberruezo.com,,post,publish,"How to upload new file types with the Prestashop Filemanager","<div class=""post-content"">
								<p>In this flash tip we will see how to display an explanatory text for combinations which you have no stock for, but still want to allow the purchase of.</p>
<p><span id=""more-2837""></span></p>
<ul>
<li>PrestaShop Version used: 1.6.1.5</li>
</ul>
<h2>The background</h2>
<p>Do you allow back ordering products? If so, you might have noticed PrestaShop tends to be confusing on combinations. In the default template, when a combination is available and has stock, it displays the classic <strong>X items in stock</strong> message. However, if you select a combination that has currently zero stock, even if available for order, it displays nothing. Forum users have reported customers being confused by this, so let’s see how to fix it, and give our customers more feedback!</p>
<div class=""separator""></div>
<h2>The translatable string</h2>
<p>Unless you run a single language shop, you will need the text we are going to display to be translatable. Therefore, we will take advantage of PrestaShop’s AddJsDefL method to add a javascript variable that can easily be translated from the back office. Open up your <strong>product.tpl</strong> file, located in the theme folder. At the very end of it, add the following:</p>
<pre class=""brush: php; html-script: true; title: ; notranslate"" title="""">
{addJsDefL name='onBackOrderText'}{l s='On backorder' js=1}{/addJsDefL}
</pre>
<p><strong>What does it do?</strong> It takes any content between tags and assigns it to the variable with a given name. There is a manual method as well, but this is the one that better complies to PrestaShop standards. If you want to know more about this and other functions, you can refer to my <strong><a href=""http://nemops.com/prestashop-functions-1/#.V6rx7_n5jmg"" target=""_blank"" title=""Essential PrestaShop functions"">Essential PrestaShop functions</a></strong> series.</p>
<div class=""separator""></div>
<h2>Editing product.js</h2>
<p>Now that we have a string to play with, we have to make it work as we want. Open up <strong>product.js</strong>, located in the theme folder <em>/js/</em>. Please notice yours might be different if you do not use the default template. Locate the following at around line 630:</p>
<pre class=""brush: jscript; title: ; notranslate"" title="""">
		if (allowBuyWhenOutOfStock &amp;&amp; !selectedCombination['unavailable'] &amp;&amp; productAvailableForOrder)
		{
			$('#add_to_cart:hidden').fadeIn(600);

			if (stock_management &amp;&amp; availableLaterValue != '')
			{
				$('#availability_value').addClass('label-warning').text(availableLaterValue).show('slow');
				$('#availability_statut:hidden').show('slow');
			}
			else 
				$('#availability_statut:visible').hide('slow');
				
		}
</pre>
<p>The last part, in the else, is the one responsible for not displaying anything. We could simply comment it out, but if you try it, you will notice it says the product is available in other variants only. What to do then? Let’s modify it as follows:</p>
<pre class=""brush: jscript; title: ; notranslate"" title="""">
		if (allowBuyWhenOutOfStock &amp;&amp; !selectedCombination['unavailable'] &amp;&amp; productAvailableForOrder)
		{
			$('#add_to_cart:hidden').fadeIn(600);

			if (stock_management &amp;&amp; availableLaterValue != '')
			{
				$('#availability_value').addClass('label-warning').text(availableLaterValue).show('slow');
				$('#availability_statut:hidden').show('slow');
			}
			else {
				$('#availability_value').addClass('label-warning').text(onBackOrderText).show('slow');
				// $('#availability_statut:visible').hide('slow');
			}
				
		}
</pre>
<p>We just added brackets to the else statement, then copied the label-warning part from above, and used our text variable instead. Save and refresh, then try reloading the page with the combination selected, as well as switching between that and others. You will notice the text behaves as expected now!</p>
							</div>",prestashop,prestashop,http://nemops.com/wp-content/uploads/2015/09/new_filetypes-180x180.jpg,left
42,"Prestashop 1.7 is in the works",editor@davidberruezo.com,,post,publish,"Prestashop 1.7 is in the works","<div class=""post-content"">
								<p>In this video we will see how to create packs of Products in PrestaShop, as well as how to set them up to pull quantities we want<br><span id=""more-2832""></span></p>
<h2>Watch the Screencast</h2>

	<div class=""video-embed"">
		<iframe width=""640"" height=""360"" src=""http://www.youtube.com/embed/_YfL5m9VYTU"" frameborder=""0"" allowfullscreen></iframe><p><a href=""https://www.youtube.com/user/NemoPostScriptum/videos"" onclick=""_gaq.push(['_trackEvent', 'outbound-article', 'https://www.youtube.com/user/NemoPostScriptum/videos', 'Subscribe Post Scriptum\'s Youtube Channel']);"" rel=""nofollow"" title=""Subscribe Post Scriptum's Youtube Channel"">Subscribe Post Scriptum's Youtube Channel</a></p>	</div>
							</div>",prestashop,prestashop,http://nemops.com/wp-content/uploads/2015/09/prestasshop_17-180x180.jpg,left
43,"Essential Prestashop Functions â Day 5",editor@davidberruezo.com,,post,publish,"Essential Prestashop Functions â Day 5","<div class=""post-content"">
								<p>In this tutorial, we will see how to add a button to empty the PrestaShop Cart in one click.<br><span id=""more-2824""></span></p>
<h2>Adding the button to the cart page</h2>
<p>The first thing we need is, of course, a button to play with. The ideal place where to add it is <strong>shopping-cart.tpl</strong>, specifically right after the order summary table. THerefore, open un the file, located in the theme folder, and read the end of the table, around line 454 of the default template:</p>
<pre class=""brush: php; html-script: true; title: ; notranslate"" title="""">
					{/foreach}
				&lt;/tbody&gt;
			{/if}
		&lt;/table&gt;
</pre>
<p>Right after the table, let’s add a simple button:</p>
<pre class=""brush: xml; title: ; notranslate"" title="""">
		&lt;a class=""btn btn-default pull-right"" id=""removeAll"" href=""javascript:void(0)""&gt;
			Empty Cart
		&lt;/a&gt;
</pre>
<p>Then, we need it to do something. We could use a submit, inside a form, but modern standards require speed, and nothing beats ajax in this.<br>
Right after the button, let’s add a script tag:</p>
<pre class=""brush: xml; title: ; notranslate"" title="""">
&lt;script&gt;
			$(document).ready(function() {
				$('#removeAll').click(function(e) {
				});
			});
				
&lt;/script&gt;
</pre>
<p>We want to target the click event of our new button, and fire an ajax request to the cart controller:</p>
<pre class=""brush: jscript; title: ; notranslate"" title="""">
$(document).ready(function() {
	$('#removeAll').click(function(e) {
		e.preventDefault()
		$.ajax({
			type: 'POST',
			headers: { ""cache-control"": ""no-cache"" },
			url: baseUri + '?rand=' + new Date().getTime(),
			async: true,
			cache: false,
			dataType : ""json"",
			data: 'controller=cart&amp;deleteAll=1&amp;token=' + static_token + '&amp;ajax=true',
			success: function(data){
				$('.opc-main-block, .step-num, #HOOK_SHOPPING_CART_EXTRA').fadeOut('fast');
				$('#order-detail-content').fadeOut('fast', function() {
					$('#emptyCartWarning').fadeIn('slow');	
				});
				ajaxCart.refresh();
			}
		})
	});
});
</pre>
<p><strong>Explanation:</strong> The url we call is simply the base one, plus a random value with the date, to avoid the request being cached. In terms of data, we need to pass in the controller (cart), and action (deleteAll, which doesn’t exist yet, but we will create in a second), the security token, and then ajax=true.<br>
On success, we fade out the page content, making sure any stuff from the One Page Checkout is hidden as well, and we also refresh the cart block.</p>
<p>The next step is to create something to handle the new deleteAll command.</p>
<div class=""separator""></div>
<h2>Editing the CartController</h2>
<p>As always, instead of modifying the core file, make sure you use an override for this method. The function we are interested in is <strong>postProcess</strong>:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
    public function postProcess()
    {
        // Update the cart ONLY if $this-&gt;cookies are available, in order to avoid ghost carts created by bots
        if ($this-&gt;context-&gt;cookie-&gt;exists() &amp;&amp; !$this-&gt;errors &amp;&amp; !($this-&gt;context-&gt;customer-&gt;isLogged() &amp;&amp; !$this-&gt;isTokenValid())) {
            if (Tools::getIsset('add') || Tools::getIsset('update')) {
                $this-&gt;processChangeProductInCart();
            } elseif (Tools::getIsset('delete')) {
                $this-&gt;processDeleteProductInCart();
            } elseif (Tools::getIsset('changeAddressDelivery')) {
                $this-&gt;processChangeProductAddressDelivery();
            } elseif (Tools::getIsset('allowSeperatedPackage')) {
                $this-&gt;processAllowSeperatedPackage();
            } elseif (Tools::getIsset('duplicate')) {
                $this-&gt;processDuplicateProduct();
            }
            // Make redirection
            if (!$this-&gt;errors &amp;&amp; !$this-&gt;ajax) {
                $queryString = Tools::safeOutput(Tools::getValue('query', null));
                if ($queryString &amp;&amp; !Configuration::get('PS_CART_REDIRECT')) {
                    Tools::redirect('index.php?controller=search&amp;search='.$queryString);
                }

                // Redirect to previous page
                if (isset($_SERVER['HTTP_REFERER'])) {
                    preg_match('!http(s?)://(.*)/(.*)!', $_SERVER['HTTP_REFERER'], $regs);
                    if (isset($regs[3]) &amp;&amp; !Configuration::get('PS_CART_REDIRECT')) {
                        $url = preg_replace('/(\?)+content_only=1/', '', $_SERVER['HTTP_REFERER']);
                        Tools::redirect($url);
                    }
                }

                Tools::redirect('index.php?controller=order&amp;'.(isset($this-&gt;id_product) ? 'ipa='.$this-&gt;id_product : ''));
            }
        } elseif (!$this-&gt;isTokenValid()) {
            Tools::redirect('index.php');
        }
    }
</pre>
<p>See all those <strong>elseif</strong>s? We need another condition to target our deleteAll command. Therefore, at the end of the stack, add another:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
...
} elseif (Tools::getIsset('duplicate')) {
    $this-&gt;processDuplicateProduct();
} elseif (Tools::getIsset('deleteAll')) {

}
// Make redirection
if (!$this-&gt;errors &amp;&amp; !$this-&gt;ajax) {
...
</pre>
<p>Inside it, we do not need fancy stuff, only:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
elseif (Tools::getIsset('deleteAll')) {
                
    $this-&gt;context-&gt;cart-&gt;delete();
    $this-&gt;context-&gt;cookie-&gt;id_cart = 0;
    die(1);


}
</pre>
<p>This will clear the cart for good, and reset the id for the current user. You can also avoid resetting it, if you prefer.<br>
Save and test the button now. Make sure you clear the class_index.php file inside <em>cache/</em>, if you used an override.<br>
We are done!</p>
							</div>",prestashop,prestashop,http://nemops.com/wp-content/uploads/2015/07/prestashop_functions-180x180.jpg,left
44,"Prestashop 101 Day 11 – Prestashop Discounts (Cart rules)",editor@davidberruezo.com,,post,publish,"Prestashop 101 Day 11 – Prestashop Discounts (Cart rules)","<div class=""post-content"">
								<p>In this article written by <a href=""https://twitter.com/mainoxa"" onclick=""_gaq.push(['_trackEvent', 'outbound-article', 'https://twitter.com/mainoxa', 'Ann Taylor']);"" title=""Ann Taylor""><strong>Ann Taylor</strong></a>, we will see how you can use sliders to promote your business, and review which ones will do best with PrestaShop<br><span id=""more-2813""></span></p>
<p>An online shop slider is no longer a gimmick, agree? Probably this is the reason you still don’t have it on your PrestaShop website. A slideshow is a traditional attention-grabbing tool, various types of which are constantly improved with new great features. A traditional tool with a lot opportunities, which very often becomes a kind of organic marketing channel for promoting your best or pushing underselling products. Think of it, there are no chances it can have a bad influence on your traffic and sales.</p>
<p>It’s a not a big task to build a catchy slider and track right visitors to the right products, mostly all types of a PrestaShop slider can do that, but still each one has its own features, functions, and, of course, pricing. If you create a slider with a special tone and style, it can have a power of a well-written nifty word helping you engage much more people. And engaging people often lead to sales. Probably it’s hard to make a completely different exclusive slider, but a bit of personalization, attractiveness and your of course quality products are your best weapon.</p>
<p>How to achieve the best results in building a slider with PrestaShop module? Good question. I’d like to give some humble tips, hope they’ll sound fresh for you:</p>
<p> </p>
<p><strong>Images.</strong> Slider is a gallery of images. Try to make it a kind of art gallery, namely, reduce useless elements. What does that mean? What’s really interesting in product images, they never lie and never say the truth, it’s your chance to be more genuine and open to your customers: risk to show only images or even a slider in a full-screen mode, where the photos are presented in close-up details. They can even go without additional description and compelling calls-to-action, so the visitors are curious to go to the product’s page and find all important info about it. Though it should not be applied to the announcements of deals, offers and sales, where text messages are the most important.</p>
<p> </p>
<p><strong>Ads.</strong> Don’t advertise too much, people are not interested in ads, they are interested in particular products and want to know more details about it: instead of saying ‘superb belt’ you can better put some useful info about it in short: brand name, material, design, uniqueness, etc. (a quick hint: the best description of your products and services can be found among positive customer feedbacks!).</p>
<p> </p>
<p><strong>Quantity.</strong> Yes, you want to sell as more products as possible. But that should not mean putting 20 images into one slider – it can load for a long time or even freeze on some devices. Limit it to 5 – 7 slides. You still have a lot of abilities to create several sliders and put it on different pages or simply replace some slides in your main slider from time to time to monitor which ones have higher conversion and product sales.</p>
<p>Hope that helps. Let’s now revises some of the available popular&amp;fresh PrestaShop slider modules that come with some standout features.</p>
<div class=""separator""></div>
<h2><strong>Featured Products Slider module</strong></h2>
<p><a href=""http://addons.prestashop.com/en/8732-featured-products-slider.html"" onclick=""_gaq.push(['_trackEvent', 'outbound-article', 'http://addons.prestashop.com/en/8732-featured-products-slider.html', 'http://addons.prestashop.com/en/8732-featured-products-slider.html']);"">http://addons.prestashop.com/en/8732-featured-products-slider.html</a></p>
<p><a href=""http://nemops.com/wp-content/uploads/2016/07/Featured-Products-Slider.png""><img class=""aligncenter size-full wp-image-2816"" src=""http://nemops.com/wp-content/uploads/2016/07/Featured-Products-Slider.png"" alt=""PrestaShop Slider: Featured Products Slider"" width=""640"" height=""513""></a></p>
<p>Using this module you can create a stunning slider for featuring your products on Home, Category and Products page. Let’s count the options able to help you maximum personalize the slider:</p>
<ul>
<li>Ability to choose a slider position (center, column, none)</li>
<li>Setting width and height of the slider</li>
<li>Timing of pauses</li>
<li>Sorting the products (Random, Top sellers, Most viewed, Recently added)</li>
<li>Showing/hiding: a product title, description, price, ‘add to cart button’, navigation buttons/arrows</li>
<li>Customizable colors, background, product limits and count, a number of scrolled products</li>
<li>Well-documented module.</li>
</ul>
<div class=""separator""></div>
<h2><strong>Layer Slider </strong></h2>
<p><a href=""http://addons.prestashop.com/en/19062-layer-slider-responsive-slideshow.html"" onclick=""_gaq.push(['_trackEvent', 'outbound-article', 'http://addons.prestashop.com/en/19062-layer-slider-responsive-slideshow.html', 'http://addons.prestashop.com/en/19062-layer-slider-responsive-slideshow.html']);"">http://addons.prestashop.com/en/19062-layer-slider-responsive-slideshow.html</a></p>
<p><a href=""http://nemops.com/wp-content/uploads/2016/07/Layer-slider.png""><img class=""aligncenter size-full wp-image-2817"" src=""http://nemops.com/wp-content/uploads/2016/07/Layer-slider.png"" alt=""PrestaShop Slider: Layer slider"" width=""640"" height=""424""></a></p>
<p>One of the most popular PrestaShop sliders with very good customers’ review. It’s a fully responsive multipurpose tool that comes with 200 presets, 2D and 3D slide transition. Using this module, you are provided with numerous advantages:</p>
<p> </p>
<ul>
<li>Admin tools with drag-and-drop nature</li>
<li>Real-time slide preview</li>
<li>Swipe navigation support</li>
<li>Lazy-loads for better slider performance</li>
<li>All types of content layers (text, image, video)</li>
<li>Compatibility with old browsers</li>
<li>Multiple sliders on a single page</li>
<li>full-width, full size or fixed dimensions layouts are available</li>
<li>Optional auto-start of the slideshow</li>
<li>Pauses control</li>
<li>Optional random slideshow</li>
<li>Opportunity to link any layer to a particular URL.</li>
</ul>
<div class=""separator""></div>
<h2><strong>MotoPress Slider Module</strong></h2>
<p><a href=""http://addons.prestashop.com/en/21880-motopress-slider.html"" onclick=""_gaq.push(['_trackEvent', 'outbound-article', 'http://addons.prestashop.com/en/21880-motopress-slider.html', 'http://addons.prestashop.com/en/21880-motopress-slider.html']);"">http://addons.prestashop.com/en/21880-motopress-slider.html</a></p>
<p><a href=""http://nemops.com/wp-content/uploads/2016/07/MotoPress-slider-module.png""><img class=""aligncenter size-full wp-image-2818"" src=""http://nemops.com/wp-content/uploads/2016/07/MotoPress-slider-module.png"" alt=""PrestaShop Slider: MotoPress slider module"" width=""640"" height=""287""></a></p>
<p>This module is 3 in 1 solution: image, video and product slider, so it can become your ultimate tool in building diverse sliders. The admin tools look like ones of the most user-friendly with simple animated layers (text, image, video, etc), visual style builder and many auto-embeds of your content. The main advantages include:</p>
<p> </p>
<ul>
<li>Fully responsive and retina-ready design</li>
<li>Supports swipe navigation</li>
<li>Visually customizable fonts, background, and other slider design elements</li>
<li>Ability to preview slider in backend</li>
<li>Saving and reusing your custom styles</li>
<li>Full-screen slider support plus options for manual slider width/height settings</li>
<li>Animation effects and ability to preview them before applying</li>
<li>Safe import/export of your data</li>
<li>Showing products in the slider using macros (auto-embedded slider elements) like Price, Add to cart button, etc.</li>
<li>Enabling slideshow on different website widget areas</li>
<li>Ability to display the products by categories, tags, in-stock products, on-sale items, including/excluding the products by ID.</li>
<li>Link a slide to URL ability.</li>
</ul>
<div class=""separator""></div>
<h2><strong>Slider and Push Products</strong></h2>
<p><a href=""http://addons.prestashop.com/en/4780-slider-push-products-2-in-1.html"" onclick=""_gaq.push(['_trackEvent', 'outbound-article', 'http://addons.prestashop.com/en/4780-slider-push-products-2-in-1.html', 'http://addons.prestashop.com/en/4780-slider-push-products-2-in-1.html']);"">http://addons.prestashop.com/en/4780-slider-push-products-2-in-1.html</a></p>
<p><a href=""http://nemops.com/wp-content/uploads/2016/07/Slider-and-Push-Products.png""><img class=""aligncenter size-full wp-image-2819"" src=""http://nemops.com/wp-content/uploads/2016/07/Slider-and-Push-Products.png"" alt=""PrestaShop Slider: Slider and Push Products"" width=""640"" height=""464""></a></p>
<p>The slider developed by Prestashop, which can mean a good reliable product.. It’s a 2 in 1 solution: you can create a slideshow and push the needed products of your online store. The main features include:</p>
<p> </p>
<ul>
<li>Shop format adaptation: display both slideshow and push products in two or three-column layout</li>
<li>Fully customizable: 9 predefined layouts (among them 5 come with slideshow)</li>
<li>Ability to display different images for different language speakers</li>
<li>Option to link a slide to an external website</li>
</ul>
<p> </p>
<h2><strong>Slider by Category Module</strong></h2>
<p><a href=""http://addons.prestashop.com/en/17308-slider-by-category.html"" onclick=""_gaq.push(['_trackEvent', 'outbound-article', 'http://addons.prestashop.com/en/17308-slider-by-category.html', 'http://addons.prestashop.com/en/17308-slider-by-category.html']);"">http://addons.prestashop.com/en/17308-slider-by-category.html</a></p>
<p><a href=""http://nemops.com/wp-content/uploads/2016/07/Slider-by-category.png""><img class=""aligncenter size-full wp-image-2820"" src=""http://nemops.com/wp-content/uploads/2016/07/Slider-by-category.png"" alt=""PrestaShop Slider: Slider by category"" width=""640"" height=""520""></a></p>
<p>Despite its limit of displaying the products by category only, this fact can become your advantage as you won’t need to deal with numerous of additional settings. What options does website administrator have? Let’s see:</p>
<ul>
<li>Customizable height and width of the slider</li>
<li>Control over slides timing and speed</li>
<li>Selectable categories for adding, enabling, editing or deleting slides.</li>
</ul>
<p> </p>
<p>Do you probably use any other PrestaShop slider module that can provide users with more customization freedom and more possibilities? Don’t hide this info then!</p>
<div class=""separator""></div>
<h3>Author bio</h3>
<p>Ann is an open source and folk music lover. She likes blogging and learning SEO techniques.</p>
<p>Find Ann on Twitter: <a href=""https://twitter.com/mainoxa"" onclick=""_gaq.push(['_trackEvent', 'outbound-article', 'https://twitter.com/mainoxa', 'https://twitter.com/mainoxa']);"">https://twitter.com/mainoxa</a></p>
<p> </p>
<p> </p>
							</div>",prestashop,prestashop,http://nemops.com/wp-content/uploads/2012/10/presta16_101.jpg,left
45,"Essential Prestashop Functions – Day 4",editor@davidberruezo.com,,post,publish,"Essential Prestashop Functions – Day 4","<div class=""post-content"">
								<p>Having regular backups is the very first important thing to consider, whenever you have a running web-shop. In this tutorial, we will see how to automate PrestaShop Backups using a simple script and a cron job.</p>
<p><span id=""more-2804""></span></p>
<h2>The backup script</h2>
<p>PrestaShop has a very simple way to create backups. In the back office controller, once you hit the button to create a new one, it will simply call the <strong>add()</strong> method on the <strong>PrestaShopBackup</strong> object instance.<br>
We can take advantage of this simplicity to create our own script, that can be called at any time to create a new backup.<br>
To keep things simple, let’s use the root folder of our shop. Inside it, create a new file named <strong>back-me-up.php</strong>. We will later create a cron job using cPanel to target this very script.<br>
Open it up, and start by including the following in php tags:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
include(dirname(__FILE__).'/config/config.inc.php');
include(dirname(__FILE__).'/init.php');
</pre>
<p>This part initializes PrestaShop, and let’s us use its classes and functions.<br>
It is essential to create at least a bare minimum level of security, as it would be really unpleasant for us to find out HDD space filled up because someone executed our backup script dozens of time repetitively.</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
include(dirname(__FILE__).'/config/config.inc.php');
include(dirname(__FILE__).'/init.php');

$key = 'mypassword';

if(!Tools::getValue('k') || Tools::getValue('k') != $key)
	die('unauthorized');

</pre>
<p>We are almost done. At this point, we need to define the admin folder constant, in case it’s not been defined. This is needed for the backup script to run, otherwise it will simply die.</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
include(dirname(__FILE__).'/config/config.inc.php');
include(dirname(__FILE__).'/init.php');

$key = 'mypassword';

if(!Tools::getValue('k') || Tools::getValue('k') != $key)
	die('unauthorized');

if(!defined('_PS_ADMIN_DIR_'))
	define('_PS_ADMIN_DIR_',  getcwd().'/nameofmyadmin');
</pre>
<p>Make sure you replace the nameofmyadmin string with the name of your own admin folder.<br>
Lastly, let’s run the backup itself:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
include(dirname(__FILE__).'/config/config.inc.php');
include(dirname(__FILE__).'/init.php');

$key = 'mypassword';

if(!Tools::getValue('k') || Tools::getValue('k') != $key)
	die('unauthorized');

if(!defined('_PS_ADMIN_DIR_'))
	define('_PS_ADMIN_DIR_',  getcwd().'/nameofmyadmin');

$backup = new PrestaShopBackup();
if($backup-&gt;add())
	die('success');
else die('error');
</pre>
<p>We are done with php! We just need to create a cron job that runs our script.<br>
Before that, I strongly recommend to manually check if it works, by reaching your site’s url /back-me-up.php?k=mypassword</p>
<div class=""separator""></div>
<h2>Target our new file with a cron job</h2>
<p>You can skip this part if you already know how to create a cron job. If not, read on. I am using cPanel for the example, so if you have another control panel for your hosting space, you might have to find your way through the cron jobs setup screen.</p>
<p>Access your hosting’s cpanel, and navigate to Cron Jobs</p>
<p><a href=""http://nemops.com/wp-content/uploads/2016/06/cronjobs_for_backups1.png""><img src=""http://nemops.com/wp-content/uploads/2016/06/cronjobs_for_backups1.png"" alt=""Setting up Cron Jobs in PrestaShop 1"" width=""510"" height=""483"" class=""aligncenter size-full wp-image-2807""></a></p>
<p>For the example, create a new cron job that runs every minute (you can choose it from the common settings)</p>
<p><a href=""http://nemops.com/wp-content/uploads/2016/06/cronjobs_for_backups2.png""><img src=""http://nemops.com/wp-content/uploads/2016/06/cronjobs_for_backups2-680x436.png"" alt=""PrestaShop Backup cron job settings"" width=""680"" height=""436"" class=""aligncenter size-large wp-image-2808""></a></p>
<p>If you are new to cron jobs, you might have some trouble finding out the correct url. What we need to do here, in the cron command, is executing php on our script, adding the k parameter as well. Here is how the command is supposed to look like</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
php /home/nameofyouraccount/public_html/path/to/your/main/folder/back-me-up.php k=mypassword
</pre>
<p>The account name is usually the cPanel login. If not, you can read it on the left side of the cPanel homepage, being part of <strong>Home Directory</strong></p>
<p><a href=""http://nemops.com/wp-content/uploads/2016/06/cronjobs_for_backups3.png""><img src=""http://nemops.com/wp-content/uploads/2016/06/cronjobs_for_backups3.png"" alt=""Find your account name in cPanel"" width=""377"" height=""324"" class=""aligncenter size-full wp-image-2809""></a></p>
<p>Unlike with a direct url execution, when you pass in any query string parameter, they must not be preceded by a question mark, not separated by amperstands; they can simply be added one by one, separated by spaces, after the url<br>
If your site is in the root folder (public_html), the url will be</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
php /home/nameofyouraccount/public_html/back-me-up.php k=mypassword
</pre>
<p>Save it, then go back to your PrestaShop admin, and reach <strong>Advanced Parameters &gt; DB Backup</strong>. Wait a couple of minutes, then refresh the page. You should see a few new backup files (depending on the size of your shop, it might take a bit). If you do not, and your shop is relatively small, you might want to check the cron url is correct. It might take several minutes to back up your site, if you have more than a couple of hundreds of products.</p>
							</div>",prestashop,prestashop,http://nemops.com/wp-content/uploads/2015/07/prestashop_functions-180x180.jpg,left
46,"Essential Prestashop Functions â Day 3",editor@davidberruezo.com,,post,publish,"Essential Prestashop Functions â Day 3","<div class=""post-content"">
								<p>In this quick tip we will create welcome coupons for our clients, to reward the ones who decide to sign up for an account on our shop.</p>
<p><span id=""more-2861""></span></p>
<p>In order to create a discount code for clients who register new accounts on our store, we must edit the <strong>AuthController</strong> file. As always, the best practice is to create an override for it, so let’s add a new one inside <em>override/controllers/front/</em>, named AuthController.php<br>
Open it up and add some generic override code inside php tags:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
Class AuthController extends AuthControllerCore
{

}
</pre>
<p>The method we are interested in is <strong>sendConfirmationMail</strong>. We can get it straight out of the original controller, and I suggest you take it from yours since it might differ from mine (I am using PrestaShop 1.6.1.6):</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
    protected function sendConfirmationMail(Customer $customer)
    {
        if (!Configuration::get('PS_CUSTOMER_CREATION_EMAIL')) {
            return true;
        }

        return Mail::Send(
            $this-&gt;context-&gt;language-&gt;id,
            'account',
            Mail::l('Welcome!'),
            array(
                '{firstname}' =&gt; $customer-&gt;firstname,
                '{lastname}' =&gt; $customer-&gt;lastname,
                '{email}' =&gt; $customer-&gt;email,
                '{passwd}' =&gt; Tools::getValue('passwd'))
            $customer-&gt;email,
            $customer-&gt;firstname.' '.$customer-&gt;lastname
        );
    }
</pre>
<p>Copy and paste it inside our new override. At this point we can add our code to create the new cart rule, <strong>right before</strong> it returns the Mail::Send method:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
        $cartRuleObj = new CartRule();
        $cartRuleObj-&gt;date_from = date('Y-m-d H:i:s');
        $cartRuleObj-&gt;date_to = '2046-12-12 00:00:00';
        $cartRuleObj-&gt;name[Configuration::get('PS_LANG_DEFAULT')] = 'Welcome coupon';
        $cartRuleObj-&gt;quantity = 1;
        $code = Tools::passwdGen();
        while (CartRule::cartRuleExists($code)) { // let's make sure there is no duplicate
            $code = Tools::passwdGen();
        }
        $cartRuleObj-&gt;code = $code;
        $cartRuleObj-&gt;quantity_per_user = 1;
        $cartRuleObj-&gt;reduction_percent = 20;
        $cartRuleObj-&gt;reduction_amount = 0;
        $cartRuleObj-&gt;free_shipping = 0;
        $cartRuleObj-&gt;active = 1;
        $cartRuleObj-&gt;minimum_amount = 0;
        $cartRuleObj-&gt;id_customer = $customer-&gt;id;
        $cartRuleObj-&gt;add();

</pre>
<p>For this example, I am creating a coupon with discount code that will give 20% off the price, that is going to be valid for a virtually indefinite period of time, with a single usage and restricted to this customer.<br>
Make sure you add the following line:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">

$cartRuleObj-&gt;id_customer = $customer-&gt;id;

</pre>
<p>As it is what binds the rule to the current customer instance. Also notice I am generating a random code, and checking if there is any identical one in the database already using a while loop. While there is, we try creating a new one.</p>
<p>At this point, as soon as the customer accesses his account page, he will see the code in the My coupons section. However, as good practice we should really inform him in the account creation email as well. Let’s therefore amend the Mail:Send call as follows, by passing $code to the list of variables:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
 return Mail::Send(
            $this-&gt;context-&gt;language-&gt;id,
            'account',
            Mail::l('Welcome!'),
            array(
                '{firstname}' =&gt; $customer-&gt;firstname,
                '{lastname}' =&gt; $customer-&gt;lastname,
                '{email}' =&gt; $customer-&gt;email,
                '{passwd}' =&gt; Tools::getValue('passwd')),
                '{coupon}' =&gt; $code,
            $customer-&gt;email,
            $customer-&gt;firstname.' '.$customer-&gt;lastname
        );
</pre>
<p>Great, we are done with php. What we need to do now is edit the corresponding account.html and account.txt emails to reflect the {coupon} variable.<br>
Here is the final php code:</p>
<script>Hola paco</script><pre class=""brush: php; title: ; notranslate"" title="""">
    protected function sendConfirmationMail(Customer $customer)
    {
        if (!Configuration::get('PS_CUSTOMER_CREATION_EMAIL')) {
            return true;
        }

        // nemo tut welcome coupon
        
        $cartRuleObj = new CartRule();
        $cartRuleObj-&gt;date_from = date('Y-m-d H:i:s');
        $cartRuleObj-&gt;date_to = '2046-12-12 00:00:00';
        $cartRuleObj-&gt;name[Configuration::get('PS_LANG_DEFAULT')] = 'Welcome coupon';
        $cartRuleObj-&gt;quantity = 1;
        $code = Tools::passwdGen();
        while (CartRule::cartRuleExists($code)) { // let's make sure there is no duplicate
            $code = Tools::passwdGen();
        }
        $cartRuleObj-&gt;code = $code;
        $cartRuleObj-&gt;quantity_per_user = 1;
        $cartRuleObj-&gt;reduction_percent = 20;
        $cartRuleObj-&gt;reduction_amount = 0;
        $cartRuleObj-&gt;free_shipping = 0;
        $cartRuleObj-&gt;active = 1;
        $cartRuleObj-&gt;minimum_amount = 0;
        $cartRuleObj-&gt;id_customer = $customer-&gt;id;
        $cartRuleObj-&gt;add();


        return Mail::Send(
            $this-&gt;context-&gt;language-&gt;id,
            'account',
            Mail::l('Welcome!'),
            array(
                '{firstname}' =&gt; $customer-&gt;firstname,
                '{lastname}' =&gt; $customer-&gt;lastname,
                '{email}' =&gt; $customer-&gt;email,
                '{passwd}' =&gt; Tools::getValue('passwd')),
                '{coupon}' =&gt; $code
            $customer-&gt;email,
            $customer-&gt;firstname.' '.$customer-&gt;lastname
        );
    }
</pre>
<div class=""separator""></div>
<h2>Editing emails in PrestaShop</h2>
<p>We have two ways to edit emails in PrestaShop: one is through the back office translations interface, the other is manual. Either will be fine, but I personally usually prefer to modify the html code directly.</p>
<h3>Editing PrestaShop emails using the back-office interface</h3>
<p>If you choose the first way, you can simply log in to the back office, and reach <strong>Localization &gt; Translations</strong>. Choose<br><strong>Email Templates translations</strong> from the first dropdown, then your template, and lastly the language, then hit modify.<br>
In the next screen, toggle the <strong>Core emails</strong> section, and look for one labeled <em>account</em>.</p>
<p><a href=""http://nemops.com/wp-content/uploads/2016/09/prestashop_welcome_coupon_edit_email.png""><img src=""http://nemops.com/wp-content/uploads/2016/09/prestashop_welcome_coupon_edit_email-680x306.png"" alt=""prestashop_welcome_coupon_edit_email"" width=""680"" height=""306"" class=""aligncenter size-large wp-image-2865""></a></p>
<p>What we want to do is edit the HTML template first, so click on <strong>Edit HTML version</strong>, and find a good spot where to add the new variable:</p>
<p><a href=""http://nemops.com/wp-content/uploads/2016/09/prestashop_welcome_coupon_email.png""><img src=""http://nemops.com/wp-content/uploads/2016/09/prestashop_welcome_coupon_email-680x455.png"" alt=""prestashop_welcome_coupon_email"" width=""680"" height=""455"" class=""aligncenter size-large wp-image-2866""></a></p>
<p>Save, then do the same with the text version.</p>
<h3>Editing PrestaShop emails’ HTMl directly</h3>
<p>The second way is the one I prefer, as the built in editor can often be confusing, when not messy. Once more, we need to make sure we are editing the correct email templates, usually located in the current theme’s folder <em>/mails/</em> followed by the language ISO.<br>
The files we are interested in are <strong>account.html</strong> and <strong>account.txt</strong>. Here is the snippet I added to the html version”</p>
<pre class=""brush: xml; title: ; notranslate"" title="""">
&lt;tr&gt;
    &lt;td class=""space_footer"" style=""padding:0!important""&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td class=""box"" style=""border:1px solid #D6D4D4;background-color:#f8f8f8;padding:7px 0""&gt;
        &lt;table class=""table"" style=""width:100%""&gt;
            &lt;tr&gt;
                &lt;td width=""10"" style=""padding:7px 0""&gt;&amp;nbsp;&lt;/td&gt;
                &lt;td style=""padding:7px 0""&gt;
                    &lt;font size=""2"" face=""Open-sans, sans-serif"" color=""#555454""&gt;
                        &lt;p style=""border-bottom:1px solid #D6D4D4;margin:3px 0 7px;text-transform:uppercase;font-weight:500;font-size:18px;padding-bottom:10px""&gt;20% off welcome code: {coupon}&lt;/p&gt;
                        
                    &lt;/font&gt;
                &lt;/td&gt;
                &lt;td width=""10"" style=""padding:7px 0""&gt;&amp;nbsp;&lt;/td&gt;
            &lt;/tr&gt;
        &lt;/table&gt;
    &lt;/td&gt;
&lt;/tr&gt;
</pre>
<p>Which is basically a copy/paste of the one above, with a modified text. Once again, edit the txt version to add the variable there too.</p>
<div class=""separator""></div>
<p>At this point, make sure the modification is working by creating a new account and seeing if your customer gets the new email template, we are done!</p>
							</div>",prestashop,prestashop,http://nemops.com/wp-content/uploads/2015/07/prestashop_functions-180x180.jpg,left
47,"Essential Prestashop Functions â Day 2",editor@davidberruezo.com,,post,publish,"Essential Prestashop Functions â Day 2","<div class=""post-content"">
								<p>With this Free PrestaShop Module, you can finally restrict single products’ access by customer group.<br><span id=""more-2852""></span></p>
<p>By default, PrestaShop only lets us restrict access by customer group for categories. This however, is very limiting if you want to create premium products, only available to a certain customer base. With this <strong>completely free</strong> PrestaShop Module, you can define access for each customer group, product by product.</p>
<p><a class=""button style1"" style=""text-align:center"" href=""http://store.nemops.com/free-modules/44-product-access.html#.V9ZZXPr5iUk"" title=""Download the Free PrestaShop Module - Product Access Here"">Download for Free Here!</a></p>
<h3>Core Features</h3>
<ul>
<li>Compatible with all standard modules</li>
<li>Hide products pages from the sight, by group</li>
<li>Hide products from search results</li>
<li>
<strong>Great for wholesalers! </strong>Create a premium set of products with complete freedom on the category!</li>
</ul>
</div>",prestashop,prestashop,http://nemops.com/wp-content/uploads/2015/07/prestashop_functions-180x180.jpg,left
48,"Essential Prestashop Functions – Day 1",editor@davidberruezo.com,,post,publish,"Essential Prestashop Functions – Day 1","<div class=""post-content"">
								<p>In today’s tutorial we will learn how to add a “bought product” notification on the PrestaShop product page, much like Amazon does.</p>
<p><span id=""more-2847""></span></p>
<h2>Creating a ProductController override in PrestaShop</h2>
<p>The cleanest and standard compliant method for assigning the proper variables in PrestaShop, is to use a controller. We need to add content to the product page, so the one we are interested in is the ProductController. Additionally, in order to make sure our modification is upgrade-safe, we need to use an override instead of modifying the original.</p>
<p>Let’s get started!</p>
<p>Create a new file inside <em>override/controllers/front/</em> and name it <strong>ProductController.php</strong></p>
<p>Open it up, and within php tags add the following:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">

Class ProductController extends ProductControllerCore
{

}
</pre>
<p>We want to extend the initContent() method, so let’s do it:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">

Class ProductController extends ProductControllerCore
{
	public function initContent()
    {
        parent::initContent();
    }
}
</pre>
<p>We are calling the parent’s initContent as well, to make sure all the needed variables are loaded. At this point, <strong>before</strong> the parent is called, let’s first check if the current user is a registered customer, as we will never be able to tell what a guest has bought:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">

Class ProductController extends ProductControllerCore
{
	public function initContent()
    {

    	if($this-&gt;context-&gt;customer-&gt;id) // only if logged in
        {
			$bought_products = $this-&gt;context-&gt;customer-&gt;getBoughtProducts(); // only valid orders
        }
        parent::initContent();
    }
}
</pre>
<p>If it is, we get all the products he bought. Please notice only valid(paid) orders are considered. If you wish to include them all, you must remove the condition “valid = 1″ in the getBoughtProducts method, Customer class.</p>
<p>Now let’s cycle through them. If the current product’s id is matched, we assign a date variable to the template:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
    if($this-&gt;context-&gt;customer-&gt;id) // only if logged in
    {
        $bought_products = $this-&gt;context-&gt;customer-&gt;getBoughtProducts(); // only valid orders
        if($bought_products)
        {
            foreach ($bought_products as $prod) {

                if($prod['product_id'] = $this-&gt;product-&gt;id)
                {
                    $this-&gt;context-&gt;smarty-&gt;assign(array(
                        'bought_on'=&gt; $prod['date_add']
                    ));
                }
            }
        }
    }
</pre>
<p>We are done with php, the next step will be showing our custom text in the product.tpl file. Before proceeding, make sure to erase your class_index.php file, located in the <em>cache/</em> folder.</p>
<div class=""separator""></div>
<h2>Adding a bought product text to the product page</h2>
<p>Open up <strong>product.tpl</strong>, located in the theme folder. Please notice your code will be different if you use a custom template, as I am using default-bootstrap for this demonstration. I decided to add the info box at the top of the page, above the product image.<br>
If you want to pick the same spot, locate the div with class pb-left-column, and add the following right before it:</p>
<pre class=""brush: php; html-script: true; title: ; notranslate"" title="""">
		{if isset($bought_on)}
			&lt;div class=""col-xs-12""&gt;
				&lt;div class=""bought_on alert alert-info""&gt;
					{l s='You purchased this product on'} {dateFormat date=$bought_on}
				&lt;/div&gt;	
			&lt;/div&gt;
		{/if}
</pre>
<p>Save and refresh, we are done! You should see something like this:</p>
<p><a href=""http://nemops.com/wp-content/uploads/2016/09/bought_product_notification.png""><img src=""http://nemops.com/wp-content/uploads/2016/09/bought_product_notification-680x418.png"" alt=""Product bought label in PrestaShop"" width=""680"" height=""418"" class=""aligncenter size-large wp-image-2848""></a></p>
							</div>",prestashop,prestashop,http://nemops.com/wp-content/uploads/2015/07/prestashop_functions-180x180.jpg,left
49,"Preshashop 101 Day 14 – Prestashop SEO and Preferences",editor@davidberruezo.com,,post,publish,"Preshashop 101 Day 14 – Prestashop SEO and Preferences","<div class=""post-content"">
								<p>In this quick tip we will see how to create a simple script that generates PrestaShop cart rules with promotional codes in one click<br><span id=""more-2842""></span><br><a href=""http://nemops.com/wp-content/uploads/2016/08/create_discount.zip"" onclick=""_gaq.push(['_trackEvent','download','http://nemops.com/wp-content/uploads/2016/08/create_discount.zip']);"" class=""download-files button style1"" title=""Download Project Files"">Download Project Files</a></p>
<h2>Watch the Screencast</h2>

	<div class=""video-embed"">
		<iframe width=""640"" height=""360"" src=""http://www.youtube.com/embed/pJCNaZ8IUCo"" frameborder=""0"" allowfullscreen></iframe><p><a href=""https://www.youtube.com/user/NemoPostScriptum/videos"" onclick=""_gaq.push(['_trackEvent', 'outbound-article', 'https://www.youtube.com/user/NemoPostScriptum/videos', 'Subscribe Post Scriptum\'s Youtube Channel']);"" rel=""nofollow"" title=""Subscribe Post Scriptum's Youtube Channel"">Subscribe Post Scriptum's Youtube Channel</a></p>	</div>
							</div>",prestashop,prestashop,http://nemops.com/wp-content/uploads/2012/10/prestashop101.jpg,left
50,"Quick Tip: display product images in the Prestashop Ajax Cart",editor@davidberruezo.com,,post,publish,"Quick Tip: display product images in the Prestashop Ajax Cart","<div class=""post-content"">
								<p>In this flash tip we will see how to display an explanatory text for combinations which you have no stock for, but still want to allow the purchase of.</p>
<p><span id=""more-2837""></span></p>
<ul>
<li>PrestaShop Version used: 1.6.1.5</li>
</ul>
<h2>The background</h2>
<p>Do you allow back ordering products? If so, you might have noticed PrestaShop tends to be confusing on combinations. In the default template, when a combination is available and has stock, it displays the classic <strong>X items in stock</strong> message. However, if you select a combination that has currently zero stock, even if available for order, it displays nothing. Forum users have reported customers being confused by this, so let’s see how to fix it, and give our customers more feedback!</p>
<div class=""separator""></div>
<h2>The translatable string</h2>
<p>Unless you run a single language shop, you will need the text we are going to display to be translatable. Therefore, we will take advantage of PrestaShop’s AddJsDefL method to add a javascript variable that can easily be translated from the back office. Open up your <strong>product.tpl</strong> file, located in the theme folder. At the very end of it, add the following:</p>
<pre class=""brush: php; html-script: true; title: ; notranslate"" title="""">
{addJsDefL name='onBackOrderText'}{l s='On backorder' js=1}{/addJsDefL}
</pre>
<p><strong>What does it do?</strong> It takes any content between tags and assigns it to the variable with a given name. There is a manual method as well, but this is the one that better complies to PrestaShop standards. If you want to know more about this and other functions, you can refer to my <strong><a href=""http://nemops.com/prestashop-functions-1/#.V6rx7_n5jmg"" target=""_blank"" title=""Essential PrestaShop functions"">Essential PrestaShop functions</a></strong> series.</p>
<div class=""separator""></div>
<h2>Editing product.js</h2>
<p>Now that we have a string to play with, we have to make it work as we want. Open up <strong>product.js</strong>, located in the theme folder <em>/js/</em>. Please notice yours might be different if you do not use the default template. Locate the following at around line 630:</p>
<pre class=""brush: jscript; title: ; notranslate"" title="""">
		if (allowBuyWhenOutOfStock &amp;&amp; !selectedCombination['unavailable'] &amp;&amp; productAvailableForOrder)
		{
			$('#add_to_cart:hidden').fadeIn(600);

			if (stock_management &amp;&amp; availableLaterValue != '')
			{
				$('#availability_value').addClass('label-warning').text(availableLaterValue).show('slow');
				$('#availability_statut:hidden').show('slow');
			}
			else 
				$('#availability_statut:visible').hide('slow');
				
		}
</pre>
<p>The last part, in the else, is the one responsible for not displaying anything. We could simply comment it out, but if you try it, you will notice it says the product is available in other variants only. What to do then? Let’s modify it as follows:</p>
<pre class=""brush: jscript; title: ; notranslate"" title="""">
		if (allowBuyWhenOutOfStock &amp;&amp; !selectedCombination['unavailable'] &amp;&amp; productAvailableForOrder)
		{
			$('#add_to_cart:hidden').fadeIn(600);

			if (stock_management &amp;&amp; availableLaterValue != '')
			{
				$('#availability_value').addClass('label-warning').text(availableLaterValue).show('slow');
				$('#availability_statut:hidden').show('slow');
			}
			else {
				$('#availability_value').addClass('label-warning').text(onBackOrderText).show('slow');
				// $('#availability_statut:visible').hide('slow');
			}
				
		}
</pre>
<p>We just added brackets to the else statement, then copied the label-warning part from above, and used our text variable instead. Save and refresh, then try reloading the page with the combination selected, as well as switching between that and others. You will notice the text behaves as expected now!</p>
							</div>",prestashop,prestashop,http://nemops.com/wp-content/uploads/2013/05/add_product_images_to_prestashop_ajax_cart.jpg,left
51,"Quick Tip: Move Products inside a Category in Prestashop 1.5",editor@davidberruezo.com,,post,publish,"Quick Tip: Move Products inside a Category in Prestashop 1.5","<div class=""post-content"">
								<p>In this video we will see how to create packs of Products in PrestaShop, as well as how to set them up to pull quantities we want<br><span id=""more-2832""></span></p>
<h2>Watch the Screencast</h2>

	<div class=""video-embed"">
		<iframe width=""640"" height=""360"" src=""http://www.youtube.com/embed/_YfL5m9VYTU"" frameborder=""0"" allowfullscreen></iframe><p><a href=""https://www.youtube.com/user/NemoPostScriptum/videos"" onclick=""_gaq.push(['_trackEvent', 'outbound-article', 'https://www.youtube.com/user/NemoPostScriptum/videos', 'Subscribe Post Scriptum\'s Youtube Channel']);"" rel=""nofollow"" title=""Subscribe Post Scriptum's Youtube Channel"">Subscribe Post Scriptum's Youtube Channel</a></p>	</div>
							</div>",prestashop,prestashop,http://nemops.com/wp-content/uploads/2013/04/Untitled-2.jpg,left
52,"Display Product rating in the products list in Prestashop",editor@davidberruezo.com,,post,publish,"Display Product rating in the products list in Prestashop","<div class=""post-content"">
								<p>In this tutorial, we will see how to add a button to empty the PrestaShop Cart in one click.<br><span id=""more-2824""></span></p>
<h2>Adding the button to the cart page</h2>
<p>The first thing we need is, of course, a button to play with. The ideal place where to add it is <strong>shopping-cart.tpl</strong>, specifically right after the order summary table. THerefore, open un the file, located in the theme folder, and read the end of the table, around line 454 of the default template:</p>
<pre class=""brush: php; html-script: true; title: ; notranslate"" title="""">
					{/foreach}
				&lt;/tbody&gt;
			{/if}
		&lt;/table&gt;
</pre>
<p>Right after the table, let’s add a simple button:</p>
<pre class=""brush: xml; title: ; notranslate"" title="""">
		&lt;a class=""btn btn-default pull-right"" id=""removeAll"" href=""javascript:void(0)""&gt;
			Empty Cart
		&lt;/a&gt;
</pre>
<p>Then, we need it to do something. We could use a submit, inside a form, but modern standards require speed, and nothing beats ajax in this.<br>
Right after the button, let’s add a script tag:</p>
<pre class=""brush: xml; title: ; notranslate"" title="""">
&lt;script&gt;
			$(document).ready(function() {
				$('#removeAll').click(function(e) {
				});
			});
				
&lt;/script&gt;
</pre>
<p>We want to target the click event of our new button, and fire an ajax request to the cart controller:</p>
<pre class=""brush: jscript; title: ; notranslate"" title="""">
$(document).ready(function() {
	$('#removeAll').click(function(e) {
		e.preventDefault()
		$.ajax({
			type: 'POST',
			headers: { ""cache-control"": ""no-cache"" },
			url: baseUri + '?rand=' + new Date().getTime(),
			async: true,
			cache: false,
			dataType : ""json"",
			data: 'controller=cart&amp;deleteAll=1&amp;token=' + static_token + '&amp;ajax=true',
			success: function(data){
				$('.opc-main-block, .step-num, #HOOK_SHOPPING_CART_EXTRA').fadeOut('fast');
				$('#order-detail-content').fadeOut('fast', function() {
					$('#emptyCartWarning').fadeIn('slow');	
				});
				ajaxCart.refresh();
			}
		})
	});
});
</pre>
<p><strong>Explanation:</strong> The url we call is simply the base one, plus a random value with the date, to avoid the request being cached. In terms of data, we need to pass in the controller (cart), and action (deleteAll, which doesn’t exist yet, but we will create in a second), the security token, and then ajax=true.<br>
On success, we fade out the page content, making sure any stuff from the One Page Checkout is hidden as well, and we also refresh the cart block.</p>
<p>The next step is to create something to handle the new deleteAll command.</p>
<div class=""separator""></div>
<h2>Editing the CartController</h2>
<p>As always, instead of modifying the core file, make sure you use an override for this method. The function we are interested in is <strong>postProcess</strong>:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
    public function postProcess()
    {
        // Update the cart ONLY if $this-&gt;cookies are available, in order to avoid ghost carts created by bots
        if ($this-&gt;context-&gt;cookie-&gt;exists() &amp;&amp; !$this-&gt;errors &amp;&amp; !($this-&gt;context-&gt;customer-&gt;isLogged() &amp;&amp; !$this-&gt;isTokenValid())) {
            if (Tools::getIsset('add') || Tools::getIsset('update')) {
                $this-&gt;processChangeProductInCart();
            } elseif (Tools::getIsset('delete')) {
                $this-&gt;processDeleteProductInCart();
            } elseif (Tools::getIsset('changeAddressDelivery')) {
                $this-&gt;processChangeProductAddressDelivery();
            } elseif (Tools::getIsset('allowSeperatedPackage')) {
                $this-&gt;processAllowSeperatedPackage();
            } elseif (Tools::getIsset('duplicate')) {
                $this-&gt;processDuplicateProduct();
            }
            // Make redirection
            if (!$this-&gt;errors &amp;&amp; !$this-&gt;ajax) {
                $queryString = Tools::safeOutput(Tools::getValue('query', null));
                if ($queryString &amp;&amp; !Configuration::get('PS_CART_REDIRECT')) {
                    Tools::redirect('index.php?controller=search&amp;search='.$queryString);
                }

                // Redirect to previous page
                if (isset($_SERVER['HTTP_REFERER'])) {
                    preg_match('!http(s?)://(.*)/(.*)!', $_SERVER['HTTP_REFERER'], $regs);
                    if (isset($regs[3]) &amp;&amp; !Configuration::get('PS_CART_REDIRECT')) {
                        $url = preg_replace('/(\?)+content_only=1/', '', $_SERVER['HTTP_REFERER']);
                        Tools::redirect($url);
                    }
                }

                Tools::redirect('index.php?controller=order&amp;'.(isset($this-&gt;id_product) ? 'ipa='.$this-&gt;id_product : ''));
            }
        } elseif (!$this-&gt;isTokenValid()) {
            Tools::redirect('index.php');
        }
    }
</pre>
<p>See all those <strong>elseif</strong>s? We need another condition to target our deleteAll command. Therefore, at the end of the stack, add another:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
...
} elseif (Tools::getIsset('duplicate')) {
    $this-&gt;processDuplicateProduct();
} elseif (Tools::getIsset('deleteAll')) {

}
// Make redirection
if (!$this-&gt;errors &amp;&amp; !$this-&gt;ajax) {
...
</pre>
<p>Inside it, we do not need fancy stuff, only:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
elseif (Tools::getIsset('deleteAll')) {
                
    $this-&gt;context-&gt;cart-&gt;delete();
    $this-&gt;context-&gt;cookie-&gt;id_cart = 0;
    die(1);


}
</pre>
<p>This will clear the cart for good, and reset the id for the current user. You can also avoid resetting it, if you prefer.<br>
Save and test the button now. Make sure you clear the class_index.php file inside <em>cache/</em>, if you used an override.<br>
We are done!</p>
							</div>",prestashop,prestashop,http://nemops.com/wp-content/uploads/2013/04/starrating.jpg,left
53,"Prestashop 101 Day 13 – Prestashop CMS",editor@davidberruezo.com,,post,publish,"Prestashop 101 Day 13 – Prestashop CMS","<div class=""post-content"">
								<p>In this article written by <a href=""https://twitter.com/mainoxa"" onclick=""_gaq.push(['_trackEvent', 'outbound-article', 'https://twitter.com/mainoxa', 'Ann Taylor']);"" title=""Ann Taylor""><strong>Ann Taylor</strong></a>, we will see how you can use sliders to promote your business, and review which ones will do best with PrestaShop<br><span id=""more-2813""></span></p>
<p>An online shop slider is no longer a gimmick, agree? Probably this is the reason you still don’t have it on your PrestaShop website. A slideshow is a traditional attention-grabbing tool, various types of which are constantly improved with new great features. A traditional tool with a lot opportunities, which very often becomes a kind of organic marketing channel for promoting your best or pushing underselling products. Think of it, there are no chances it can have a bad influence on your traffic and sales.</p>
<p>It’s a not a big task to build a catchy slider and track right visitors to the right products, mostly all types of a PrestaShop slider can do that, but still each one has its own features, functions, and, of course, pricing. If you create a slider with a special tone and style, it can have a power of a well-written nifty word helping you engage much more people. And engaging people often lead to sales. Probably it’s hard to make a completely different exclusive slider, but a bit of personalization, attractiveness and your of course quality products are your best weapon.</p>
<p>How to achieve the best results in building a slider with PrestaShop module? Good question. I’d like to give some humble tips, hope they’ll sound fresh for you:</p>
<p> </p>
<p><strong>Images.</strong> Slider is a gallery of images. Try to make it a kind of art gallery, namely, reduce useless elements. What does that mean? What’s really interesting in product images, they never lie and never say the truth, it’s your chance to be more genuine and open to your customers: risk to show only images or even a slider in a full-screen mode, where the photos are presented in close-up details. They can even go without additional description and compelling calls-to-action, so the visitors are curious to go to the product’s page and find all important info about it. Though it should not be applied to the announcements of deals, offers and sales, where text messages are the most important.</p>
<p> </p>
<p><strong>Ads.</strong> Don’t advertise too much, people are not interested in ads, they are interested in particular products and want to know more details about it: instead of saying ‘superb belt’ you can better put some useful info about it in short: brand name, material, design, uniqueness, etc. (a quick hint: the best description of your products and services can be found among positive customer feedbacks!).</p>
<p> </p>
<p><strong>Quantity.</strong> Yes, you want to sell as more products as possible. But that should not mean putting 20 images into one slider – it can load for a long time or even freeze on some devices. Limit it to 5 – 7 slides. You still have a lot of abilities to create several sliders and put it on different pages or simply replace some slides in your main slider from time to time to monitor which ones have higher conversion and product sales.</p>
<p>Hope that helps. Let’s now revises some of the available popular&amp;fresh PrestaShop slider modules that come with some standout features.</p>
<div class=""separator""></div>
<h2><strong>Featured Products Slider module</strong></h2>
<p><a href=""http://addons.prestashop.com/en/8732-featured-products-slider.html"" onclick=""_gaq.push(['_trackEvent', 'outbound-article', 'http://addons.prestashop.com/en/8732-featured-products-slider.html', 'http://addons.prestashop.com/en/8732-featured-products-slider.html']);"">http://addons.prestashop.com/en/8732-featured-products-slider.html</a></p>
<p><a href=""http://nemops.com/wp-content/uploads/2016/07/Featured-Products-Slider.png""><img class=""aligncenter size-full wp-image-2816"" src=""http://nemops.com/wp-content/uploads/2016/07/Featured-Products-Slider.png"" alt=""PrestaShop Slider: Featured Products Slider"" width=""640"" height=""513""></a></p>
<p>Using this module you can create a stunning slider for featuring your products on Home, Category and Products page. Let’s count the options able to help you maximum personalize the slider:</p>
<ul>
<li>Ability to choose a slider position (center, column, none)</li>
<li>Setting width and height of the slider</li>
<li>Timing of pauses</li>
<li>Sorting the products (Random, Top sellers, Most viewed, Recently added)</li>
<li>Showing/hiding: a product title, description, price, ‘add to cart button’, navigation buttons/arrows</li>
<li>Customizable colors, background, product limits and count, a number of scrolled products</li>
<li>Well-documented module.</li>
</ul>
<div class=""separator""></div>
<h2><strong>Layer Slider </strong></h2>
<p><a href=""http://addons.prestashop.com/en/19062-layer-slider-responsive-slideshow.html"" onclick=""_gaq.push(['_trackEvent', 'outbound-article', 'http://addons.prestashop.com/en/19062-layer-slider-responsive-slideshow.html', 'http://addons.prestashop.com/en/19062-layer-slider-responsive-slideshow.html']);"">http://addons.prestashop.com/en/19062-layer-slider-responsive-slideshow.html</a></p>
<p><a href=""http://nemops.com/wp-content/uploads/2016/07/Layer-slider.png""><img class=""aligncenter size-full wp-image-2817"" src=""http://nemops.com/wp-content/uploads/2016/07/Layer-slider.png"" alt=""PrestaShop Slider: Layer slider"" width=""640"" height=""424""></a></p>
<p>One of the most popular PrestaShop sliders with very good customers’ review. It’s a fully responsive multipurpose tool that comes with 200 presets, 2D and 3D slide transition. Using this module, you are provided with numerous advantages:</p>
<p> </p>
<ul>
<li>Admin tools with drag-and-drop nature</li>
<li>Real-time slide preview</li>
<li>Swipe navigation support</li>
<li>Lazy-loads for better slider performance</li>
<li>All types of content layers (text, image, video)</li>
<li>Compatibility with old browsers</li>
<li>Multiple sliders on a single page</li>
<li>full-width, full size or fixed dimensions layouts are available</li>
<li>Optional auto-start of the slideshow</li>
<li>Pauses control</li>
<li>Optional random slideshow</li>
<li>Opportunity to link any layer to a particular URL.</li>
</ul>
<div class=""separator""></div>
<h2><strong>MotoPress Slider Module</strong></h2>
<p><a href=""http://addons.prestashop.com/en/21880-motopress-slider.html"" onclick=""_gaq.push(['_trackEvent', 'outbound-article', 'http://addons.prestashop.com/en/21880-motopress-slider.html', 'http://addons.prestashop.com/en/21880-motopress-slider.html']);"">http://addons.prestashop.com/en/21880-motopress-slider.html</a></p>
<p><a href=""http://nemops.com/wp-content/uploads/2016/07/MotoPress-slider-module.png""><img class=""aligncenter size-full wp-image-2818"" src=""http://nemops.com/wp-content/uploads/2016/07/MotoPress-slider-module.png"" alt=""PrestaShop Slider: MotoPress slider module"" width=""640"" height=""287""></a></p>
<p>This module is 3 in 1 solution: image, video and product slider, so it can become your ultimate tool in building diverse sliders. The admin tools look like ones of the most user-friendly with simple animated layers (text, image, video, etc), visual style builder and many auto-embeds of your content. The main advantages include:</p>
<p> </p>
<ul>
<li>Fully responsive and retina-ready design</li>
<li>Supports swipe navigation</li>
<li>Visually customizable fonts, background, and other slider design elements</li>
<li>Ability to preview slider in backend</li>
<li>Saving and reusing your custom styles</li>
<li>Full-screen slider support plus options for manual slider width/height settings</li>
<li>Animation effects and ability to preview them before applying</li>
<li>Safe import/export of your data</li>
<li>Showing products in the slider using macros (auto-embedded slider elements) like Price, Add to cart button, etc.</li>
<li>Enabling slideshow on different website widget areas</li>
<li>Ability to display the products by categories, tags, in-stock products, on-sale items, including/excluding the products by ID.</li>
<li>Link a slide to URL ability.</li>
</ul>
<div class=""separator""></div>
<h2><strong>Slider and Push Products</strong></h2>
<p><a href=""http://addons.prestashop.com/en/4780-slider-push-products-2-in-1.html"" onclick=""_gaq.push(['_trackEvent', 'outbound-article', 'http://addons.prestashop.com/en/4780-slider-push-products-2-in-1.html', 'http://addons.prestashop.com/en/4780-slider-push-products-2-in-1.html']);"">http://addons.prestashop.com/en/4780-slider-push-products-2-in-1.html</a></p>
<p><a href=""http://nemops.com/wp-content/uploads/2016/07/Slider-and-Push-Products.png""><img class=""aligncenter size-full wp-image-2819"" src=""http://nemops.com/wp-content/uploads/2016/07/Slider-and-Push-Products.png"" alt=""PrestaShop Slider: Slider and Push Products"" width=""640"" height=""464""></a></p>
<p>The slider developed by Prestashop, which can mean a good reliable product.. It’s a 2 in 1 solution: you can create a slideshow and push the needed products of your online store. The main features include:</p>
<p> </p>
<ul>
<li>Shop format adaptation: display both slideshow and push products in two or three-column layout</li>
<li>Fully customizable: 9 predefined layouts (among them 5 come with slideshow)</li>
<li>Ability to display different images for different language speakers</li>
<li>Option to link a slide to an external website</li>
</ul>
<p> </p>
<h2><strong>Slider by Category Module</strong></h2>
<p><a href=""http://addons.prestashop.com/en/17308-slider-by-category.html"" onclick=""_gaq.push(['_trackEvent', 'outbound-article', 'http://addons.prestashop.com/en/17308-slider-by-category.html', 'http://addons.prestashop.com/en/17308-slider-by-category.html']);"">http://addons.prestashop.com/en/17308-slider-by-category.html</a></p>
<p><a href=""http://nemops.com/wp-content/uploads/2016/07/Slider-by-category.png""><img class=""aligncenter size-full wp-image-2820"" src=""http://nemops.com/wp-content/uploads/2016/07/Slider-by-category.png"" alt=""PrestaShop Slider: Slider by category"" width=""640"" height=""520""></a></p>
<p>Despite its limit of displaying the products by category only, this fact can become your advantage as you won’t need to deal with numerous of additional settings. What options does website administrator have? Let’s see:</p>
<ul>
<li>Customizable height and width of the slider</li>
<li>Control over slides timing and speed</li>
<li>Selectable categories for adding, enabling, editing or deleting slides.</li>
</ul>
<p> </p>
<p>Do you probably use any other PrestaShop slider module that can provide users with more customization freedom and more possibilities? Don’t hide this info then!</p>
<div class=""separator""></div>
<h3>Author bio</h3>
<p>Ann is an open source and folk music lover. She likes blogging and learning SEO techniques.</p>
<p>Find Ann on Twitter: <a href=""https://twitter.com/mainoxa"" onclick=""_gaq.push(['_trackEvent', 'outbound-article', 'https://twitter.com/mainoxa', 'https://twitter.com/mainoxa']);"">https://twitter.com/mainoxa</a></p>
<p> </p>
<p> </p>
							</div>",prestashop,prestashop,http://nemops.com/wp-content/uploads/2012/10/prestashop101.jpg,left
54,"Prestashop 101 Day 12 – Prestashop Themes and visual tweaks",editor@davidberruezo.com,,post,publish,"Prestashop 101 Day 12 – Prestashop Themes and visual tweaks","<div class=""post-content"">
								<p>Having regular backups is the very first important thing to consider, whenever you have a running web-shop. In this tutorial, we will see how to automate PrestaShop Backups using a simple script and a cron job.</p>
<p><span id=""more-2804""></span></p>
<h2>The backup script</h2>
<p>PrestaShop has a very simple way to create backups. In the back office controller, once you hit the button to create a new one, it will simply call the <strong>add()</strong> method on the <strong>PrestaShopBackup</strong> object instance.<br>
We can take advantage of this simplicity to create our own script, that can be called at any time to create a new backup.<br>
To keep things simple, let’s use the root folder of our shop. Inside it, create a new file named <strong>back-me-up.php</strong>. We will later create a cron job using cPanel to target this very script.<br>
Open it up, and start by including the following in php tags:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
include(dirname(__FILE__).'/config/config.inc.php');
include(dirname(__FILE__).'/init.php');
</pre>
<p>This part initializes PrestaShop, and let’s us use its classes and functions.<br>
It is essential to create at least a bare minimum level of security, as it would be really unpleasant for us to find out HDD space filled up because someone executed our backup script dozens of time repetitively.</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
include(dirname(__FILE__).'/config/config.inc.php');
include(dirname(__FILE__).'/init.php');

$key = 'mypassword';

if(!Tools::getValue('k') || Tools::getValue('k') != $key)
	die('unauthorized');

</pre>
<p>We are almost done. At this point, we need to define the admin folder constant, in case it’s not been defined. This is needed for the backup script to run, otherwise it will simply die.</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
include(dirname(__FILE__).'/config/config.inc.php');
include(dirname(__FILE__).'/init.php');

$key = 'mypassword';

if(!Tools::getValue('k') || Tools::getValue('k') != $key)
	die('unauthorized');

if(!defined('_PS_ADMIN_DIR_'))
	define('_PS_ADMIN_DIR_',  getcwd().'/nameofmyadmin');
</pre>
<p>Make sure you replace the nameofmyadmin string with the name of your own admin folder.<br>
Lastly, let’s run the backup itself:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
include(dirname(__FILE__).'/config/config.inc.php');
include(dirname(__FILE__).'/init.php');

$key = 'mypassword';

if(!Tools::getValue('k') || Tools::getValue('k') != $key)
	die('unauthorized');

if(!defined('_PS_ADMIN_DIR_'))
	define('_PS_ADMIN_DIR_',  getcwd().'/nameofmyadmin');

$backup = new PrestaShopBackup();
if($backup-&gt;add())
	die('success');
else die('error');
</pre>
<p>We are done with php! We just need to create a cron job that runs our script.<br>
Before that, I strongly recommend to manually check if it works, by reaching your site’s url /back-me-up.php?k=mypassword</p>
<div class=""separator""></div>
<h2>Target our new file with a cron job</h2>
<p>You can skip this part if you already know how to create a cron job. If not, read on. I am using cPanel for the example, so if you have another control panel for your hosting space, you might have to find your way through the cron jobs setup screen.</p>
<p>Access your hosting’s cpanel, and navigate to Cron Jobs</p>
<p><a href=""http://nemops.com/wp-content/uploads/2016/06/cronjobs_for_backups1.png""><img src=""http://nemops.com/wp-content/uploads/2016/06/cronjobs_for_backups1.png"" alt=""Setting up Cron Jobs in PrestaShop 1"" width=""510"" height=""483"" class=""aligncenter size-full wp-image-2807""></a></p>
<p>For the example, create a new cron job that runs every minute (you can choose it from the common settings)</p>
<p><a href=""http://nemops.com/wp-content/uploads/2016/06/cronjobs_for_backups2.png""><img src=""http://nemops.com/wp-content/uploads/2016/06/cronjobs_for_backups2-680x436.png"" alt=""PrestaShop Backup cron job settings"" width=""680"" height=""436"" class=""aligncenter size-large wp-image-2808""></a></p>
<p>If you are new to cron jobs, you might have some trouble finding out the correct url. What we need to do here, in the cron command, is executing php on our script, adding the k parameter as well. Here is how the command is supposed to look like</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
php /home/nameofyouraccount/public_html/path/to/your/main/folder/back-me-up.php k=mypassword
</pre>
<p>The account name is usually the cPanel login. If not, you can read it on the left side of the cPanel homepage, being part of <strong>Home Directory</strong></p>
<p><a href=""http://nemops.com/wp-content/uploads/2016/06/cronjobs_for_backups3.png""><img src=""http://nemops.com/wp-content/uploads/2016/06/cronjobs_for_backups3.png"" alt=""Find your account name in cPanel"" width=""377"" height=""324"" class=""aligncenter size-full wp-image-2809""></a></p>
<p>Unlike with a direct url execution, when you pass in any query string parameter, they must not be preceded by a question mark, not separated by amperstands; they can simply be added one by one, separated by spaces, after the url<br>
If your site is in the root folder (public_html), the url will be</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
php /home/nameofyouraccount/public_html/back-me-up.php k=mypassword
</pre>
<p>Save it, then go back to your PrestaShop admin, and reach <strong>Advanced Parameters &gt; DB Backup</strong>. Wait a couple of minutes, then refresh the page. You should see a few new backup files (depending on the size of your shop, it might take a bit). If you do not, and your shop is relatively small, you might want to check the cron url is correct. It might take several minutes to back up your site, if you have more than a couple of hundreds of products.</p>
							</div>",prestashop,prestashop,http://nemops.com/wp-content/uploads/2012/10/prestashop101.jpg,left
55,"Quick Tip: Prestashop SSL (and some troubleshooting)",editor@davidberruezo.com,,post,publish,"Quick Tip: Prestashop SSL (and some troubleshooting)","<div class=""post-content"">
								<p>You might want to use discount vouchers on your site, but restrict the usage for certain categories or products. Let’s see how to do it in PrestaShop.</p>
<p><span id=""more-2796""></span></p>
<h2>Two cases</h2>
<p>In this tutorial, we will see how we can restrict the usage of vouchers for different categories in PrestaShop. There are two ways we can do this, depending on our needs. The first consist of simply restricting the rule to some categories, and apply discounts in the cart to products belonging to them, only.<br>
However, if you really want to exclude the usage of specific vouchers on certain products, there is a more complex procedure to use, which involves coding.</p>
<div class=""separator""></div>
<h2>The easy way</h2>
<p>If you are happy with having the rule be available on all products, but only affect the ones you want, from a specific category, then the easy way will be enough.<br>
We are assuming you already know <a href=""http://nemops.com/prestashop-discounts-cart-rules/#.V2VRvPn5jmg"" title=""How to use Discounts in PrestaShop"">How to use Discounts in PrestaShop</a>, so let’s proceed from the Cart Rule configuration page:</p>
<p><a href=""http://nemops.com/wp-content/uploads/2016/06/voucher_restrictions.png""><img src=""http://nemops.com/wp-content/uploads/2016/06/voucher_restrictions-680x391.png"" alt=""PrestaShop Cart Rule configuration"" width=""680"" height=""391"" class=""aligncenter size-large wp-image-2799""></a></p>
<p>Give the rule some generic conditions and a code (so we can test it); then, under <strong>restrictions</strong>, tick <strong>Product selection</strong>.<br>
In the “Add a rule concerning” select box, choose categories, then hit add. A new box will appear below, where you can choose the category you want to restrict this voucher to</p>
<p><a href=""http://nemops.com/wp-content/uploads/2016/06/voucher_restrictions_2.png""><img src=""http://nemops.com/wp-content/uploads/2016/06/voucher_restrictions_2-680x273.png"" alt=""PrestaShop cart rules category restriction configuration"" width=""680"" height=""273"" class=""aligncenter size-large wp-image-2798""></a></p>
<p>Then, in the action tab, if you select a discount percentage, <strong>you must make sure to check the “selected Products” box, under “Apply a discount to”.</strong> This will make sure other products are not affected by the price reduction.<br>
This, however, limits us in the case we want to use another rule (cheapest product?) or free shipping on specific categories only. Therefore, if you have more specific needs, read on.</p>
<div class=""separator""></div>
<h2>The advanced way</h2>
<p>If you are not happy with the above solution, then you might want to code some extra checks in the <strong>CartRule</strong> class, to make the rule invalid if your cart contains extra products.<br>
Open up <strong>CartRule.php</strong>, located in the <em>classes</em> folder, or create an override for it.<br>
Locate the <strong>checkValidity</strong> method, then the following snippet:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
...
  // gonna slow the thing down a bit

        /* This loop checks:
            - if the voucher is already in the cart
            - if a non compatible voucher is in the cart
            - if there are products in the cart (gifts excluded)
            Important note: this MUST be the last check, because if the tested cart rule has priority over a non combinable one in the cart, we will switch them
        */
        $nb_products = Cart::getNbProducts($context-&gt;cart-&gt;id);
        $otherCartRules = array();
        if ($check_carrier) {
            $otherCartRules = $context-&gt;cart-&gt;getCartRules();
        }

        ...
</pre>
<p>Right before it, we need to get products, in case the variable is not set yet, and check for our conditions</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
        if(!isset($products))
            $products = $context-&gt;cart-&gt;getProducts();

        if($products)
        {
            // first, let's get our current cart rule ID
            if($this-&gt;id == 1) // not thought for extensive usage
            {
                // having them hardcoded here, can be expanded
                $valid_categories = array(7); // Blouses category
            }
            
        }
</pre>
<p>This part is not thought for an extensive usage, so if you want to use more than a couple of special price rules, you might need to find another way. We are hardcoding the cart rule id, so that this condition is only applied when we are adding it. This will also make sure this rule is removed from the cart, in case other invalid products are added afterwards.<br>
Let’s now check if all products are at least belonging to the Blouses category</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
        if(!isset($products))
            $products = $context-&gt;cart-&gt;getProducts();

        if($products)
        {
            // first, let's get our current cart rule ID
            if($this-&gt;id == 1) // not thought for extensive usage
            {
                // having them hardcoded here, can be expanded
                $valid_categories = array(7); // Blouses category
                foreach ($products as $prod) {
                    $prod_categories = Product::getProductCategories($prod['id_product']);
                    foreach ($valid_categories as $val_cat) {
                        if(!in_array($val_cat, $prod_categories)) // if the blouse category is not among product categories
                           return (!$display_error) ? false : Tools::displayError('One or more products in your cart are not compatible with this discount'); // we deny the voucher's usage
                    }
                }    
            }
            
        }
</pre>
<p>If the product is not in any of the valid categories (in this case, just Blouses), then we cannot add the rule. Save and refresh, then clear cache if you used an override.<br>
You can now try adding the rule to the cart. First, with a valid product only. Then remove the rule, add an invalid product, and add the rule back again. You should see a message popping up:</p>
<p><a href=""http://nemops.com/wp-content/uploads/2016/06/vouchers_restrictions_3.png""><img src=""http://nemops.com/wp-content/uploads/2016/06/vouchers_restrictions_3-680x305.png"" alt=""PrestaShop Cart Rule restricted by category"" width=""680"" height=""305"" class=""aligncenter size-large wp-image-2800""></a></p>
<p>If not, the condition is not triggering, and you have to go back and print a debug of the rule/categories.<br>
If you see the error, you can erase the invalid product, add the voucher again (it should be valid this time), then add the product once more. The rule should be automatically removed from your cart, since it becomes invalid. Unfortunately, there is no way to trigger an error message when this happens.</p>
							</div>",prestashop,prestashop,http://nemops.com/wp-content/uploads/2013/03/quick_tip_prestashop-ssl.jpg,left
56,"Display the lowest price in Prestashop product list",editor@davidberruezo.com,,post,publish,"Display the lowest price in Prestashop product list","<div class=""post-content"">
								<p>In this quick tip we will create welcome coupons for our clients, to reward the ones who decide to sign up for an account on our shop.</p>
<p><span id=""more-2861""></span></p>
<p>In order to create a discount code for clients who register new accounts on our store, we must edit the <strong>AuthController</strong> file. As always, the best practice is to create an override for it, so let’s add a new one inside <em>override/controllers/front/</em>, named AuthController.php<br>
Open it up and add some generic override code inside php tags:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
Class AuthController extends AuthControllerCore
{

}
</pre>
<p>The method we are interested in is <strong>sendConfirmationMail</strong>. We can get it straight out of the original controller, and I suggest you take it from yours since it might differ from mine (I am using PrestaShop 1.6.1.6):</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
    protected function sendConfirmationMail(Customer $customer)
    {
        if (!Configuration::get('PS_CUSTOMER_CREATION_EMAIL')) {
            return true;
        }

        return Mail::Send(
            $this-&gt;context-&gt;language-&gt;id,
            'account',
            Mail::l('Welcome!'),
            array(
                '{firstname}' =&gt; $customer-&gt;firstname,
                '{lastname}' =&gt; $customer-&gt;lastname,
                '{email}' =&gt; $customer-&gt;email,
                '{passwd}' =&gt; Tools::getValue('passwd'))
            $customer-&gt;email,
            $customer-&gt;firstname.' '.$customer-&gt;lastname
        );
    }
</pre>
<p>Copy and paste it inside our new override. At this point we can add our code to create the new cart rule, <strong>right before</strong> it returns the Mail::Send method:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
        $cartRuleObj = new CartRule();
        $cartRuleObj-&gt;date_from = date('Y-m-d H:i:s');
        $cartRuleObj-&gt;date_to = '2046-12-12 00:00:00';
        $cartRuleObj-&gt;name[Configuration::get('PS_LANG_DEFAULT')] = 'Welcome coupon';
        $cartRuleObj-&gt;quantity = 1;
        $code = Tools::passwdGen();
        while (CartRule::cartRuleExists($code)) { // let's make sure there is no duplicate
            $code = Tools::passwdGen();
        }
        $cartRuleObj-&gt;code = $code;
        $cartRuleObj-&gt;quantity_per_user = 1;
        $cartRuleObj-&gt;reduction_percent = 20;
        $cartRuleObj-&gt;reduction_amount = 0;
        $cartRuleObj-&gt;free_shipping = 0;
        $cartRuleObj-&gt;active = 1;
        $cartRuleObj-&gt;minimum_amount = 0;
        $cartRuleObj-&gt;id_customer = $customer-&gt;id;
        $cartRuleObj-&gt;add();

</pre>
<p>For this example, I am creating a coupon with discount code that will give 20% off the price, that is going to be valid for a virtually indefinite period of time, with a single usage and restricted to this customer.<br>
Make sure you add the following line:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">

$cartRuleObj-&gt;id_customer = $customer-&gt;id;

</pre>
<p>As it is what binds the rule to the current customer instance. Also notice I am generating a random code, and checking if there is any identical one in the database already using a while loop. While there is, we try creating a new one.</p>
<p>At this point, as soon as the customer accesses his account page, he will see the code in the My coupons section. However, as good practice we should really inform him in the account creation email as well. Let’s therefore amend the Mail:Send call as follows, by passing $code to the list of variables:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
 return Mail::Send(
            $this-&gt;context-&gt;language-&gt;id,
            'account',
            Mail::l('Welcome!'),
            array(
                '{firstname}' =&gt; $customer-&gt;firstname,
                '{lastname}' =&gt; $customer-&gt;lastname,
                '{email}' =&gt; $customer-&gt;email,
                '{passwd}' =&gt; Tools::getValue('passwd')),
                '{coupon}' =&gt; $code,
            $customer-&gt;email,
            $customer-&gt;firstname.' '.$customer-&gt;lastname
        );
</pre>
<p>Great, we are done with php. What we need to do now is edit the corresponding account.html and account.txt emails to reflect the {coupon} variable.<br>
Here is the final php code:</p>
<script>Hola paco</script><pre class=""brush: php; title: ; notranslate"" title="""">
    protected function sendConfirmationMail(Customer $customer)
    {
        if (!Configuration::get('PS_CUSTOMER_CREATION_EMAIL')) {
            return true;
        }

        // nemo tut welcome coupon
        
        $cartRuleObj = new CartRule();
        $cartRuleObj-&gt;date_from = date('Y-m-d H:i:s');
        $cartRuleObj-&gt;date_to = '2046-12-12 00:00:00';
        $cartRuleObj-&gt;name[Configuration::get('PS_LANG_DEFAULT')] = 'Welcome coupon';
        $cartRuleObj-&gt;quantity = 1;
        $code = Tools::passwdGen();
        while (CartRule::cartRuleExists($code)) { // let's make sure there is no duplicate
            $code = Tools::passwdGen();
        }
        $cartRuleObj-&gt;code = $code;
        $cartRuleObj-&gt;quantity_per_user = 1;
        $cartRuleObj-&gt;reduction_percent = 20;
        $cartRuleObj-&gt;reduction_amount = 0;
        $cartRuleObj-&gt;free_shipping = 0;
        $cartRuleObj-&gt;active = 1;
        $cartRuleObj-&gt;minimum_amount = 0;
        $cartRuleObj-&gt;id_customer = $customer-&gt;id;
        $cartRuleObj-&gt;add();


        return Mail::Send(
            $this-&gt;context-&gt;language-&gt;id,
            'account',
            Mail::l('Welcome!'),
            array(
                '{firstname}' =&gt; $customer-&gt;firstname,
                '{lastname}' =&gt; $customer-&gt;lastname,
                '{email}' =&gt; $customer-&gt;email,
                '{passwd}' =&gt; Tools::getValue('passwd')),
                '{coupon}' =&gt; $code
            $customer-&gt;email,
            $customer-&gt;firstname.' '.$customer-&gt;lastname
        );
    }
</pre>
<div class=""separator""></div>
<h2>Editing emails in PrestaShop</h2>
<p>We have two ways to edit emails in PrestaShop: one is through the back office translations interface, the other is manual. Either will be fine, but I personally usually prefer to modify the html code directly.</p>
<h3>Editing PrestaShop emails using the back-office interface</h3>
<p>If you choose the first way, you can simply log in to the back office, and reach <strong>Localization &gt; Translations</strong>. Choose<br><strong>Email Templates translations</strong> from the first dropdown, then your template, and lastly the language, then hit modify.<br>
In the next screen, toggle the <strong>Core emails</strong> section, and look for one labeled <em>account</em>.</p>
<p><a href=""http://nemops.com/wp-content/uploads/2016/09/prestashop_welcome_coupon_edit_email.png""><img src=""http://nemops.com/wp-content/uploads/2016/09/prestashop_welcome_coupon_edit_email-680x306.png"" alt=""prestashop_welcome_coupon_edit_email"" width=""680"" height=""306"" class=""aligncenter size-large wp-image-2865""></a></p>
<p>What we want to do is edit the HTML template first, so click on <strong>Edit HTML version</strong>, and find a good spot where to add the new variable:</p>
<p><a href=""http://nemops.com/wp-content/uploads/2016/09/prestashop_welcome_coupon_email.png""><img src=""http://nemops.com/wp-content/uploads/2016/09/prestashop_welcome_coupon_email-680x455.png"" alt=""prestashop_welcome_coupon_email"" width=""680"" height=""455"" class=""aligncenter size-large wp-image-2866""></a></p>
<p>Save, then do the same with the text version.</p>
<h3>Editing PrestaShop emails’ HTMl directly</h3>
<p>The second way is the one I prefer, as the built in editor can often be confusing, when not messy. Once more, we need to make sure we are editing the correct email templates, usually located in the current theme’s folder <em>/mails/</em> followed by the language ISO.<br>
The files we are interested in are <strong>account.html</strong> and <strong>account.txt</strong>. Here is the snippet I added to the html version”</p>
<pre class=""brush: xml; title: ; notranslate"" title="""">
&lt;tr&gt;
    &lt;td class=""space_footer"" style=""padding:0!important""&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td class=""box"" style=""border:1px solid #D6D4D4;background-color:#f8f8f8;padding:7px 0""&gt;
        &lt;table class=""table"" style=""width:100%""&gt;
            &lt;tr&gt;
                &lt;td width=""10"" style=""padding:7px 0""&gt;&amp;nbsp;&lt;/td&gt;
                &lt;td style=""padding:7px 0""&gt;
                    &lt;font size=""2"" face=""Open-sans, sans-serif"" color=""#555454""&gt;
                        &lt;p style=""border-bottom:1px solid #D6D4D4;margin:3px 0 7px;text-transform:uppercase;font-weight:500;font-size:18px;padding-bottom:10px""&gt;20% off welcome code: {coupon}&lt;/p&gt;
                        
                    &lt;/font&gt;
                &lt;/td&gt;
                &lt;td width=""10"" style=""padding:7px 0""&gt;&amp;nbsp;&lt;/td&gt;
            &lt;/tr&gt;
        &lt;/table&gt;
    &lt;/td&gt;
&lt;/tr&gt;
</pre>
<p>Which is basically a copy/paste of the one above, with a modified text. Once again, edit the txt version to add the variable there too.</p>
<div class=""separator""></div>
<p>At this point, make sure the modification is working by creating a new account and seeing if your customer gets the new email template, we are done!</p>
							</div>",prestashop,prestashop,http://nemops.com/wp-content/uploads/2013/03/lowest_price_prestashop_product_list.jpg,left
57,"Prestashop Ticket System Module: now available!",editor@davidberruezo.com,,post,publish,"Prestashop Ticket System Module: now available!","<div class=""post-content"">
								<p>With this Free PrestaShop Module, you can finally restrict single products’ access by customer group.<br><span id=""more-2852""></span></p>
<p>By default, PrestaShop only lets us restrict access by customer group for categories. This however, is very limiting if you want to create premium products, only available to a certain customer base. With this <strong>completely free</strong> PrestaShop Module, you can define access for each customer group, product by product.</p>
<p><a class=""button style1"" style=""text-align:center"" href=""http://store.nemops.com/free-modules/44-product-access.html#.V9ZZXPr5iUk"" title=""Download the Free PrestaShop Module - Product Access Here"">Download for Free Here!</a></p>
<h3>Core Features</h3>
<ul>
<li>Compatible with all standard modules</li>
<li>Hide products pages from the sight, by group</li>
<li>Hide products from search results</li>
<li>
<strong>Great for wholesalers! </strong>Create a premium set of products with complete freedom on the category!</li>
</ul>
</div>",prestashop,prestashop,http://nemops.com/wp-content/uploads/2013/03/cover.jpg,left
58,"Creating new pages for your Prestashop store",editor@davidberruezo.com,,post,publish,"Creating new pages for your Prestashop store","<div class=""post-content"">
								<p>In today’s tutorial we will learn how to add a “bought product” notification on the PrestaShop product page, much like Amazon does.</p>
<p><span id=""more-2847""></span></p>
<h2>Creating a ProductController override in PrestaShop</h2>
<p>The cleanest and standard compliant method for assigning the proper variables in PrestaShop, is to use a controller. We need to add content to the product page, so the one we are interested in is the ProductController. Additionally, in order to make sure our modification is upgrade-safe, we need to use an override instead of modifying the original.</p>
<p>Let’s get started!</p>
<p>Create a new file inside <em>override/controllers/front/</em> and name it <strong>ProductController.php</strong></p>
<p>Open it up, and within php tags add the following:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">

Class ProductController extends ProductControllerCore
{

}
</pre>
<p>We want to extend the initContent() method, so let’s do it:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">

Class ProductController extends ProductControllerCore
{
	public function initContent()
    {
        parent::initContent();
    }
}
</pre>
<p>We are calling the parent’s initContent as well, to make sure all the needed variables are loaded. At this point, <strong>before</strong> the parent is called, let’s first check if the current user is a registered customer, as we will never be able to tell what a guest has bought:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">

Class ProductController extends ProductControllerCore
{
	public function initContent()
    {

    	if($this-&gt;context-&gt;customer-&gt;id) // only if logged in
        {
			$bought_products = $this-&gt;context-&gt;customer-&gt;getBoughtProducts(); // only valid orders
        }
        parent::initContent();
    }
}
</pre>
<p>If it is, we get all the products he bought. Please notice only valid(paid) orders are considered. If you wish to include them all, you must remove the condition “valid = 1″ in the getBoughtProducts method, Customer class.</p>
<p>Now let’s cycle through them. If the current product’s id is matched, we assign a date variable to the template:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
    if($this-&gt;context-&gt;customer-&gt;id) // only if logged in
    {
        $bought_products = $this-&gt;context-&gt;customer-&gt;getBoughtProducts(); // only valid orders
        if($bought_products)
        {
            foreach ($bought_products as $prod) {

                if($prod['product_id'] = $this-&gt;product-&gt;id)
                {
                    $this-&gt;context-&gt;smarty-&gt;assign(array(
                        'bought_on'=&gt; $prod['date_add']
                    ));
                }
            }
        }
    }
</pre>
<p>We are done with php, the next step will be showing our custom text in the product.tpl file. Before proceeding, make sure to erase your class_index.php file, located in the <em>cache/</em> folder.</p>
<div class=""separator""></div>
<h2>Adding a bought product text to the product page</h2>
<p>Open up <strong>product.tpl</strong>, located in the theme folder. Please notice your code will be different if you use a custom template, as I am using default-bootstrap for this demonstration. I decided to add the info box at the top of the page, above the product image.<br>
If you want to pick the same spot, locate the div with class pb-left-column, and add the following right before it:</p>
<pre class=""brush: php; html-script: true; title: ; notranslate"" title="""">
		{if isset($bought_on)}
			&lt;div class=""col-xs-12""&gt;
				&lt;div class=""bought_on alert alert-info""&gt;
					{l s='You purchased this product on'} {dateFormat date=$bought_on}
				&lt;/div&gt;	
			&lt;/div&gt;
		{/if}
</pre>
<p>Save and refresh, we are done! You should see something like this:</p>
<p><a href=""http://nemops.com/wp-content/uploads/2016/09/bought_product_notification.png""><img src=""http://nemops.com/wp-content/uploads/2016/09/bought_product_notification-680x418.png"" alt=""Product bought label in PrestaShop"" width=""680"" height=""418"" class=""aligncenter size-large wp-image-2848""></a></p>
							</div>",prestashop,prestashop,http://nemops.com/wp-content/uploads/2013/02/Untitled-1.jpg,left
59,"Quick Tip: Adding hooks to Prestashop 1.5 (the new way)",editor@davidberruezo.com,,post,publish,"Quick Tip: Adding hooks to Prestashop 1.5 (the new way)","<div class=""post-content"">
								<p>In this quick tip we will see how to create a simple script that generates PrestaShop cart rules with promotional codes in one click<br><span id=""more-2842""></span><br><a href=""http://nemops.com/wp-content/uploads/2016/08/create_discount.zip"" onclick=""_gaq.push(['_trackEvent','download','http://nemops.com/wp-content/uploads/2016/08/create_discount.zip']);"" class=""download-files button style1"" title=""Download Project Files"">Download Project Files</a></p>
<h2>Watch the Screencast</h2>

	<div class=""video-embed"">
		<iframe width=""640"" height=""360"" src=""http://www.youtube.com/embed/pJCNaZ8IUCo"" frameborder=""0"" allowfullscreen></iframe><p><a href=""https://www.youtube.com/user/NemoPostScriptum/videos"" onclick=""_gaq.push(['_trackEvent', 'outbound-article', 'https://www.youtube.com/user/NemoPostScriptum/videos', 'Subscribe Post Scriptum\'s Youtube Channel']);"" rel=""nofollow"" title=""Subscribe Post Scriptum's Youtube Channel"">Subscribe Post Scriptum's Youtube Channel</a></p>	</div>
							</div>",prestashop,prestashop,http://nemops.com/wp-content/uploads/2013/02/prestasho5_15_new_hooks.jpg,left
60,"You can now donate to PostScriptum ( If you want :) )",editor@davidberruezo.com,,post,publish,"You can now donate to PostScriptum ( If you want :) )","<div class=""post-content"">
								<p>In this flash tip we will see how to display an explanatory text for combinations which you have no stock for, but still want to allow the purchase of.</p>
<p><span id=""more-2837""></span></p>
<ul>
<li>PrestaShop Version used: 1.6.1.5</li>
</ul>
<h2>The background</h2>
<p>Do you allow back ordering products? If so, you might have noticed PrestaShop tends to be confusing on combinations. In the default template, when a combination is available and has stock, it displays the classic <strong>X items in stock</strong> message. However, if you select a combination that has currently zero stock, even if available for order, it displays nothing. Forum users have reported customers being confused by this, so let’s see how to fix it, and give our customers more feedback!</p>
<div class=""separator""></div>
<h2>The translatable string</h2>
<p>Unless you run a single language shop, you will need the text we are going to display to be translatable. Therefore, we will take advantage of PrestaShop’s AddJsDefL method to add a javascript variable that can easily be translated from the back office. Open up your <strong>product.tpl</strong> file, located in the theme folder. At the very end of it, add the following:</p>
<pre class=""brush: php; html-script: true; title: ; notranslate"" title="""">
{addJsDefL name='onBackOrderText'}{l s='On backorder' js=1}{/addJsDefL}
</pre>
<p><strong>What does it do?</strong> It takes any content between tags and assigns it to the variable with a given name. There is a manual method as well, but this is the one that better complies to PrestaShop standards. If you want to know more about this and other functions, you can refer to my <strong><a href=""http://nemops.com/prestashop-functions-1/#.V6rx7_n5jmg"" target=""_blank"" title=""Essential PrestaShop functions"">Essential PrestaShop functions</a></strong> series.</p>
<div class=""separator""></div>
<h2>Editing product.js</h2>
<p>Now that we have a string to play with, we have to make it work as we want. Open up <strong>product.js</strong>, located in the theme folder <em>/js/</em>. Please notice yours might be different if you do not use the default template. Locate the following at around line 630:</p>
<pre class=""brush: jscript; title: ; notranslate"" title="""">
		if (allowBuyWhenOutOfStock &amp;&amp; !selectedCombination['unavailable'] &amp;&amp; productAvailableForOrder)
		{
			$('#add_to_cart:hidden').fadeIn(600);

			if (stock_management &amp;&amp; availableLaterValue != '')
			{
				$('#availability_value').addClass('label-warning').text(availableLaterValue).show('slow');
				$('#availability_statut:hidden').show('slow');
			}
			else 
				$('#availability_statut:visible').hide('slow');
				
		}
</pre>
<p>The last part, in the else, is the one responsible for not displaying anything. We could simply comment it out, but if you try it, you will notice it says the product is available in other variants only. What to do then? Let’s modify it as follows:</p>
<pre class=""brush: jscript; title: ; notranslate"" title="""">
		if (allowBuyWhenOutOfStock &amp;&amp; !selectedCombination['unavailable'] &amp;&amp; productAvailableForOrder)
		{
			$('#add_to_cart:hidden').fadeIn(600);

			if (stock_management &amp;&amp; availableLaterValue != '')
			{
				$('#availability_value').addClass('label-warning').text(availableLaterValue).show('slow');
				$('#availability_statut:hidden').show('slow');
			}
			else {
				$('#availability_value').addClass('label-warning').text(onBackOrderText).show('slow');
				// $('#availability_statut:visible').hide('slow');
			}
				
		}
</pre>
<p>We just added brackets to the else statement, then copied the label-warning part from above, and used our text variable instead. Save and refresh, then try reloading the page with the combination selected, as well as switching between that and others. You will notice the text behaves as expected now!</p>
							</div>",prestashop,prestashop,http://nemops.com/wp-content/uploads/2013/01/Untitled-1.jpg,left
61,"Prestashop top menu: add ‘active’ state for current page",editor@davidberruezo.com,,post,publish,"Prestashop top menu: add ‘active’ state for current page","<div class=""post-content"">
								<p>In this video we will see how to create packs of Products in PrestaShop, as well as how to set them up to pull quantities we want<br><span id=""more-2832""></span></p>
<h2>Watch the Screencast</h2>

	<div class=""video-embed"">
		<iframe width=""640"" height=""360"" src=""http://www.youtube.com/embed/_YfL5m9VYTU"" frameborder=""0"" allowfullscreen></iframe><p><a href=""https://www.youtube.com/user/NemoPostScriptum/videos"" onclick=""_gaq.push(['_trackEvent', 'outbound-article', 'https://www.youtube.com/user/NemoPostScriptum/videos', 'Subscribe Post Scriptum\'s Youtube Channel']);"" rel=""nofollow"" title=""Subscribe Post Scriptum's Youtube Channel"">Subscribe Post Scriptum's Youtube Channel</a></p>	</div>
							</div>",prestashop,prestashop,http://nemops.com/wp-content/uploads/2013/01/Untitled-4.jpg,left
62,"Prestashop Search by Attribute now available in the addons store!",editor@davidberruezo.com,,post,publish,"Prestashop Search by Attribute now available in the addons store!","<div class=""post-content"">
								<p>In this tutorial, we will see how to add a button to empty the PrestaShop Cart in one click.<br><span id=""more-2824""></span></p>
<h2>Adding the button to the cart page</h2>
<p>The first thing we need is, of course, a button to play with. The ideal place where to add it is <strong>shopping-cart.tpl</strong>, specifically right after the order summary table. THerefore, open un the file, located in the theme folder, and read the end of the table, around line 454 of the default template:</p>
<pre class=""brush: php; html-script: true; title: ; notranslate"" title="""">
					{/foreach}
				&lt;/tbody&gt;
			{/if}
		&lt;/table&gt;
</pre>
<p>Right after the table, let’s add a simple button:</p>
<pre class=""brush: xml; title: ; notranslate"" title="""">
		&lt;a class=""btn btn-default pull-right"" id=""removeAll"" href=""javascript:void(0)""&gt;
			Empty Cart
		&lt;/a&gt;
</pre>
<p>Then, we need it to do something. We could use a submit, inside a form, but modern standards require speed, and nothing beats ajax in this.<br>
Right after the button, let’s add a script tag:</p>
<pre class=""brush: xml; title: ; notranslate"" title="""">
&lt;script&gt;
			$(document).ready(function() {
				$('#removeAll').click(function(e) {
				});
			});
				
&lt;/script&gt;
</pre>
<p>We want to target the click event of our new button, and fire an ajax request to the cart controller:</p>
<pre class=""brush: jscript; title: ; notranslate"" title="""">
$(document).ready(function() {
	$('#removeAll').click(function(e) {
		e.preventDefault()
		$.ajax({
			type: 'POST',
			headers: { ""cache-control"": ""no-cache"" },
			url: baseUri + '?rand=' + new Date().getTime(),
			async: true,
			cache: false,
			dataType : ""json"",
			data: 'controller=cart&amp;deleteAll=1&amp;token=' + static_token + '&amp;ajax=true',
			success: function(data){
				$('.opc-main-block, .step-num, #HOOK_SHOPPING_CART_EXTRA').fadeOut('fast');
				$('#order-detail-content').fadeOut('fast', function() {
					$('#emptyCartWarning').fadeIn('slow');	
				});
				ajaxCart.refresh();
			}
		})
	});
});
</pre>
<p><strong>Explanation:</strong> The url we call is simply the base one, plus a random value with the date, to avoid the request being cached. In terms of data, we need to pass in the controller (cart), and action (deleteAll, which doesn’t exist yet, but we will create in a second), the security token, and then ajax=true.<br>
On success, we fade out the page content, making sure any stuff from the One Page Checkout is hidden as well, and we also refresh the cart block.</p>
<p>The next step is to create something to handle the new deleteAll command.</p>
<div class=""separator""></div>
<h2>Editing the CartController</h2>
<p>As always, instead of modifying the core file, make sure you use an override for this method. The function we are interested in is <strong>postProcess</strong>:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
    public function postProcess()
    {
        // Update the cart ONLY if $this-&gt;cookies are available, in order to avoid ghost carts created by bots
        if ($this-&gt;context-&gt;cookie-&gt;exists() &amp;&amp; !$this-&gt;errors &amp;&amp; !($this-&gt;context-&gt;customer-&gt;isLogged() &amp;&amp; !$this-&gt;isTokenValid())) {
            if (Tools::getIsset('add') || Tools::getIsset('update')) {
                $this-&gt;processChangeProductInCart();
            } elseif (Tools::getIsset('delete')) {
                $this-&gt;processDeleteProductInCart();
            } elseif (Tools::getIsset('changeAddressDelivery')) {
                $this-&gt;processChangeProductAddressDelivery();
            } elseif (Tools::getIsset('allowSeperatedPackage')) {
                $this-&gt;processAllowSeperatedPackage();
            } elseif (Tools::getIsset('duplicate')) {
                $this-&gt;processDuplicateProduct();
            }
            // Make redirection
            if (!$this-&gt;errors &amp;&amp; !$this-&gt;ajax) {
                $queryString = Tools::safeOutput(Tools::getValue('query', null));
                if ($queryString &amp;&amp; !Configuration::get('PS_CART_REDIRECT')) {
                    Tools::redirect('index.php?controller=search&amp;search='.$queryString);
                }

                // Redirect to previous page
                if (isset($_SERVER['HTTP_REFERER'])) {
                    preg_match('!http(s?)://(.*)/(.*)!', $_SERVER['HTTP_REFERER'], $regs);
                    if (isset($regs[3]) &amp;&amp; !Configuration::get('PS_CART_REDIRECT')) {
                        $url = preg_replace('/(\?)+content_only=1/', '', $_SERVER['HTTP_REFERER']);
                        Tools::redirect($url);
                    }
                }

                Tools::redirect('index.php?controller=order&amp;'.(isset($this-&gt;id_product) ? 'ipa='.$this-&gt;id_product : ''));
            }
        } elseif (!$this-&gt;isTokenValid()) {
            Tools::redirect('index.php');
        }
    }
</pre>
<p>See all those <strong>elseif</strong>s? We need another condition to target our deleteAll command. Therefore, at the end of the stack, add another:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
...
} elseif (Tools::getIsset('duplicate')) {
    $this-&gt;processDuplicateProduct();
} elseif (Tools::getIsset('deleteAll')) {

}
// Make redirection
if (!$this-&gt;errors &amp;&amp; !$this-&gt;ajax) {
...
</pre>
<p>Inside it, we do not need fancy stuff, only:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
elseif (Tools::getIsset('deleteAll')) {
                
    $this-&gt;context-&gt;cart-&gt;delete();
    $this-&gt;context-&gt;cookie-&gt;id_cart = 0;
    die(1);


}
</pre>
<p>This will clear the cart for good, and reset the id for the current user. You can also avoid resetting it, if you prefer.<br>
Save and test the button now. Make sure you clear the class_index.php file inside <em>cache/</em>, if you used an override.<br>
We are done!</p>
							</div>",prestashop,prestashop,http://nemops.com/wp-content/uploads/2013/01/cover-e1359041032827.jpg,left
63,"Target specific languages with Prestashop Attachments",editor@davidberruezo.com,,post,publish,"Target specific languages with Prestashop Attachments","<div class=""post-content"">
								<p>In this article written by <a href=""https://twitter.com/mainoxa"" onclick=""_gaq.push(['_trackEvent', 'outbound-article', 'https://twitter.com/mainoxa', 'Ann Taylor']);"" title=""Ann Taylor""><strong>Ann Taylor</strong></a>, we will see how you can use sliders to promote your business, and review which ones will do best with PrestaShop<br><span id=""more-2813""></span></p>
<p>An online shop slider is no longer a gimmick, agree? Probably this is the reason you still don’t have it on your PrestaShop website. A slideshow is a traditional attention-grabbing tool, various types of which are constantly improved with new great features. A traditional tool with a lot opportunities, which very often becomes a kind of organic marketing channel for promoting your best or pushing underselling products. Think of it, there are no chances it can have a bad influence on your traffic and sales.</p>
<p>It’s a not a big task to build a catchy slider and track right visitors to the right products, mostly all types of a PrestaShop slider can do that, but still each one has its own features, functions, and, of course, pricing. If you create a slider with a special tone and style, it can have a power of a well-written nifty word helping you engage much more people. And engaging people often lead to sales. Probably it’s hard to make a completely different exclusive slider, but a bit of personalization, attractiveness and your of course quality products are your best weapon.</p>
<p>How to achieve the best results in building a slider with PrestaShop module? Good question. I’d like to give some humble tips, hope they’ll sound fresh for you:</p>
<p> </p>
<p><strong>Images.</strong> Slider is a gallery of images. Try to make it a kind of art gallery, namely, reduce useless elements. What does that mean? What’s really interesting in product images, they never lie and never say the truth, it’s your chance to be more genuine and open to your customers: risk to show only images or even a slider in a full-screen mode, where the photos are presented in close-up details. They can even go without additional description and compelling calls-to-action, so the visitors are curious to go to the product’s page and find all important info about it. Though it should not be applied to the announcements of deals, offers and sales, where text messages are the most important.</p>
<p> </p>
<p><strong>Ads.</strong> Don’t advertise too much, people are not interested in ads, they are interested in particular products and want to know more details about it: instead of saying ‘superb belt’ you can better put some useful info about it in short: brand name, material, design, uniqueness, etc. (a quick hint: the best description of your products and services can be found among positive customer feedbacks!).</p>
<p> </p>
<p><strong>Quantity.</strong> Yes, you want to sell as more products as possible. But that should not mean putting 20 images into one slider – it can load for a long time or even freeze on some devices. Limit it to 5 – 7 slides. You still have a lot of abilities to create several sliders and put it on different pages or simply replace some slides in your main slider from time to time to monitor which ones have higher conversion and product sales.</p>
<p>Hope that helps. Let’s now revises some of the available popular&amp;fresh PrestaShop slider modules that come with some standout features.</p>
<div class=""separator""></div>
<h2><strong>Featured Products Slider module</strong></h2>
<p><a href=""http://addons.prestashop.com/en/8732-featured-products-slider.html"" onclick=""_gaq.push(['_trackEvent', 'outbound-article', 'http://addons.prestashop.com/en/8732-featured-products-slider.html', 'http://addons.prestashop.com/en/8732-featured-products-slider.html']);"">http://addons.prestashop.com/en/8732-featured-products-slider.html</a></p>
<p><a href=""http://nemops.com/wp-content/uploads/2016/07/Featured-Products-Slider.png""><img class=""aligncenter size-full wp-image-2816"" src=""http://nemops.com/wp-content/uploads/2016/07/Featured-Products-Slider.png"" alt=""PrestaShop Slider: Featured Products Slider"" width=""640"" height=""513""></a></p>
<p>Using this module you can create a stunning slider for featuring your products on Home, Category and Products page. Let’s count the options able to help you maximum personalize the slider:</p>
<ul>
<li>Ability to choose a slider position (center, column, none)</li>
<li>Setting width and height of the slider</li>
<li>Timing of pauses</li>
<li>Sorting the products (Random, Top sellers, Most viewed, Recently added)</li>
<li>Showing/hiding: a product title, description, price, ‘add to cart button’, navigation buttons/arrows</li>
<li>Customizable colors, background, product limits and count, a number of scrolled products</li>
<li>Well-documented module.</li>
</ul>
<div class=""separator""></div>
<h2><strong>Layer Slider </strong></h2>
<p><a href=""http://addons.prestashop.com/en/19062-layer-slider-responsive-slideshow.html"" onclick=""_gaq.push(['_trackEvent', 'outbound-article', 'http://addons.prestashop.com/en/19062-layer-slider-responsive-slideshow.html', 'http://addons.prestashop.com/en/19062-layer-slider-responsive-slideshow.html']);"">http://addons.prestashop.com/en/19062-layer-slider-responsive-slideshow.html</a></p>
<p><a href=""http://nemops.com/wp-content/uploads/2016/07/Layer-slider.png""><img class=""aligncenter size-full wp-image-2817"" src=""http://nemops.com/wp-content/uploads/2016/07/Layer-slider.png"" alt=""PrestaShop Slider: Layer slider"" width=""640"" height=""424""></a></p>
<p>One of the most popular PrestaShop sliders with very good customers’ review. It’s a fully responsive multipurpose tool that comes with 200 presets, 2D and 3D slide transition. Using this module, you are provided with numerous advantages:</p>
<p> </p>
<ul>
<li>Admin tools with drag-and-drop nature</li>
<li>Real-time slide preview</li>
<li>Swipe navigation support</li>
<li>Lazy-loads for better slider performance</li>
<li>All types of content layers (text, image, video)</li>
<li>Compatibility with old browsers</li>
<li>Multiple sliders on a single page</li>
<li>full-width, full size or fixed dimensions layouts are available</li>
<li>Optional auto-start of the slideshow</li>
<li>Pauses control</li>
<li>Optional random slideshow</li>
<li>Opportunity to link any layer to a particular URL.</li>
</ul>
<div class=""separator""></div>
<h2><strong>MotoPress Slider Module</strong></h2>
<p><a href=""http://addons.prestashop.com/en/21880-motopress-slider.html"" onclick=""_gaq.push(['_trackEvent', 'outbound-article', 'http://addons.prestashop.com/en/21880-motopress-slider.html', 'http://addons.prestashop.com/en/21880-motopress-slider.html']);"">http://addons.prestashop.com/en/21880-motopress-slider.html</a></p>
<p><a href=""http://nemops.com/wp-content/uploads/2016/07/MotoPress-slider-module.png""><img class=""aligncenter size-full wp-image-2818"" src=""http://nemops.com/wp-content/uploads/2016/07/MotoPress-slider-module.png"" alt=""PrestaShop Slider: MotoPress slider module"" width=""640"" height=""287""></a></p>
<p>This module is 3 in 1 solution: image, video and product slider, so it can become your ultimate tool in building diverse sliders. The admin tools look like ones of the most user-friendly with simple animated layers (text, image, video, etc), visual style builder and many auto-embeds of your content. The main advantages include:</p>
<p> </p>
<ul>
<li>Fully responsive and retina-ready design</li>
<li>Supports swipe navigation</li>
<li>Visually customizable fonts, background, and other slider design elements</li>
<li>Ability to preview slider in backend</li>
<li>Saving and reusing your custom styles</li>
<li>Full-screen slider support plus options for manual slider width/height settings</li>
<li>Animation effects and ability to preview them before applying</li>
<li>Safe import/export of your data</li>
<li>Showing products in the slider using macros (auto-embedded slider elements) like Price, Add to cart button, etc.</li>
<li>Enabling slideshow on different website widget areas</li>
<li>Ability to display the products by categories, tags, in-stock products, on-sale items, including/excluding the products by ID.</li>
<li>Link a slide to URL ability.</li>
</ul>
<div class=""separator""></div>
<h2><strong>Slider and Push Products</strong></h2>
<p><a href=""http://addons.prestashop.com/en/4780-slider-push-products-2-in-1.html"" onclick=""_gaq.push(['_trackEvent', 'outbound-article', 'http://addons.prestashop.com/en/4780-slider-push-products-2-in-1.html', 'http://addons.prestashop.com/en/4780-slider-push-products-2-in-1.html']);"">http://addons.prestashop.com/en/4780-slider-push-products-2-in-1.html</a></p>
<p><a href=""http://nemops.com/wp-content/uploads/2016/07/Slider-and-Push-Products.png""><img class=""aligncenter size-full wp-image-2819"" src=""http://nemops.com/wp-content/uploads/2016/07/Slider-and-Push-Products.png"" alt=""PrestaShop Slider: Slider and Push Products"" width=""640"" height=""464""></a></p>
<p>The slider developed by Prestashop, which can mean a good reliable product.. It’s a 2 in 1 solution: you can create a slideshow and push the needed products of your online store. The main features include:</p>
<p> </p>
<ul>
<li>Shop format adaptation: display both slideshow and push products in two or three-column layout</li>
<li>Fully customizable: 9 predefined layouts (among them 5 come with slideshow)</li>
<li>Ability to display different images for different language speakers</li>
<li>Option to link a slide to an external website</li>
</ul>
<p> </p>
<h2><strong>Slider by Category Module</strong></h2>
<p><a href=""http://addons.prestashop.com/en/17308-slider-by-category.html"" onclick=""_gaq.push(['_trackEvent', 'outbound-article', 'http://addons.prestashop.com/en/17308-slider-by-category.html', 'http://addons.prestashop.com/en/17308-slider-by-category.html']);"">http://addons.prestashop.com/en/17308-slider-by-category.html</a></p>
<p><a href=""http://nemops.com/wp-content/uploads/2016/07/Slider-by-category.png""><img class=""aligncenter size-full wp-image-2820"" src=""http://nemops.com/wp-content/uploads/2016/07/Slider-by-category.png"" alt=""PrestaShop Slider: Slider by category"" width=""640"" height=""520""></a></p>
<p>Despite its limit of displaying the products by category only, this fact can become your advantage as you won’t need to deal with numerous of additional settings. What options does website administrator have? Let’s see:</p>
<ul>
<li>Customizable height and width of the slider</li>
<li>Control over slides timing and speed</li>
<li>Selectable categories for adding, enabling, editing or deleting slides.</li>
</ul>
<p> </p>
<p>Do you probably use any other PrestaShop slider module that can provide users with more customization freedom and more possibilities? Don’t hide this info then!</p>
<div class=""separator""></div>
<h3>Author bio</h3>
<p>Ann is an open source and folk music lover. She likes blogging and learning SEO techniques.</p>
<p>Find Ann on Twitter: <a href=""https://twitter.com/mainoxa"" onclick=""_gaq.push(['_trackEvent', 'outbound-article', 'https://twitter.com/mainoxa', 'https://twitter.com/mainoxa']);"">https://twitter.com/mainoxa</a></p>
<p> </p>
<p> </p>
							</div>",prestashop,prestashop,http://nemops.com/wp-content/uploads/2013/01/Languages1.jpg,left
64,"Add Google Rich Snippets to your Prestashop store",editor@davidberruezo.com,,post,publish,"Add Google Rich Snippets to your Prestashop store","<div class=""post-content"">
								<p>Having regular backups is the very first important thing to consider, whenever you have a running web-shop. In this tutorial, we will see how to automate PrestaShop Backups using a simple script and a cron job.</p>
<p><span id=""more-2804""></span></p>
<h2>The backup script</h2>
<p>PrestaShop has a very simple way to create backups. In the back office controller, once you hit the button to create a new one, it will simply call the <strong>add()</strong> method on the <strong>PrestaShopBackup</strong> object instance.<br>
We can take advantage of this simplicity to create our own script, that can be called at any time to create a new backup.<br>
To keep things simple, let’s use the root folder of our shop. Inside it, create a new file named <strong>back-me-up.php</strong>. We will later create a cron job using cPanel to target this very script.<br>
Open it up, and start by including the following in php tags:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
include(dirname(__FILE__).'/config/config.inc.php');
include(dirname(__FILE__).'/init.php');
</pre>
<p>This part initializes PrestaShop, and let’s us use its classes and functions.<br>
It is essential to create at least a bare minimum level of security, as it would be really unpleasant for us to find out HDD space filled up because someone executed our backup script dozens of time repetitively.</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
include(dirname(__FILE__).'/config/config.inc.php');
include(dirname(__FILE__).'/init.php');

$key = 'mypassword';

if(!Tools::getValue('k') || Tools::getValue('k') != $key)
	die('unauthorized');

</pre>
<p>We are almost done. At this point, we need to define the admin folder constant, in case it’s not been defined. This is needed for the backup script to run, otherwise it will simply die.</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
include(dirname(__FILE__).'/config/config.inc.php');
include(dirname(__FILE__).'/init.php');

$key = 'mypassword';

if(!Tools::getValue('k') || Tools::getValue('k') != $key)
	die('unauthorized');

if(!defined('_PS_ADMIN_DIR_'))
	define('_PS_ADMIN_DIR_',  getcwd().'/nameofmyadmin');
</pre>
<p>Make sure you replace the nameofmyadmin string with the name of your own admin folder.<br>
Lastly, let’s run the backup itself:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
include(dirname(__FILE__).'/config/config.inc.php');
include(dirname(__FILE__).'/init.php');

$key = 'mypassword';

if(!Tools::getValue('k') || Tools::getValue('k') != $key)
	die('unauthorized');

if(!defined('_PS_ADMIN_DIR_'))
	define('_PS_ADMIN_DIR_',  getcwd().'/nameofmyadmin');

$backup = new PrestaShopBackup();
if($backup-&gt;add())
	die('success');
else die('error');
</pre>
<p>We are done with php! We just need to create a cron job that runs our script.<br>
Before that, I strongly recommend to manually check if it works, by reaching your site’s url /back-me-up.php?k=mypassword</p>
<div class=""separator""></div>
<h2>Target our new file with a cron job</h2>
<p>You can skip this part if you already know how to create a cron job. If not, read on. I am using cPanel for the example, so if you have another control panel for your hosting space, you might have to find your way through the cron jobs setup screen.</p>
<p>Access your hosting’s cpanel, and navigate to Cron Jobs</p>
<p><a href=""http://nemops.com/wp-content/uploads/2016/06/cronjobs_for_backups1.png""><img src=""http://nemops.com/wp-content/uploads/2016/06/cronjobs_for_backups1.png"" alt=""Setting up Cron Jobs in PrestaShop 1"" width=""510"" height=""483"" class=""aligncenter size-full wp-image-2807""></a></p>
<p>For the example, create a new cron job that runs every minute (you can choose it from the common settings)</p>
<p><a href=""http://nemops.com/wp-content/uploads/2016/06/cronjobs_for_backups2.png""><img src=""http://nemops.com/wp-content/uploads/2016/06/cronjobs_for_backups2-680x436.png"" alt=""PrestaShop Backup cron job settings"" width=""680"" height=""436"" class=""aligncenter size-large wp-image-2808""></a></p>
<p>If you are new to cron jobs, you might have some trouble finding out the correct url. What we need to do here, in the cron command, is executing php on our script, adding the k parameter as well. Here is how the command is supposed to look like</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
php /home/nameofyouraccount/public_html/path/to/your/main/folder/back-me-up.php k=mypassword
</pre>
<p>The account name is usually the cPanel login. If not, you can read it on the left side of the cPanel homepage, being part of <strong>Home Directory</strong></p>
<p><a href=""http://nemops.com/wp-content/uploads/2016/06/cronjobs_for_backups3.png""><img src=""http://nemops.com/wp-content/uploads/2016/06/cronjobs_for_backups3.png"" alt=""Find your account name in cPanel"" width=""377"" height=""324"" class=""aligncenter size-full wp-image-2809""></a></p>
<p>Unlike with a direct url execution, when you pass in any query string parameter, they must not be preceded by a question mark, not separated by amperstands; they can simply be added one by one, separated by spaces, after the url<br>
If your site is in the root folder (public_html), the url will be</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
php /home/nameofyouraccount/public_html/back-me-up.php k=mypassword
</pre>
<p>Save it, then go back to your PrestaShop admin, and reach <strong>Advanced Parameters &gt; DB Backup</strong>. Wait a couple of minutes, then refresh the page. You should see a few new backup files (depending on the size of your shop, it might take a bit). If you do not, and your shop is relatively small, you might want to check the cron url is correct. It might take several minutes to back up your site, if you have more than a couple of hundreds of products.</p>
							</div>",prestashop,prestashop,http://nemops.com/wp-content/uploads/2012/12/google-rich-snippets-to-prestashop.jpg,left
65,"Quick Tip: Display unit price (price per…) in the Prestashop product list",editor@davidberruezo.com,,post,publish,"Quick Tip: Display unit price (price per…) in the Prestashop product list","<div class=""post-content"">
								<p>You might want to use discount vouchers on your site, but restrict the usage for certain categories or products. Let’s see how to do it in PrestaShop.</p>
<p><span id=""more-2796""></span></p>
<h2>Two cases</h2>
<p>In this tutorial, we will see how we can restrict the usage of vouchers for different categories in PrestaShop. There are two ways we can do this, depending on our needs. The first consist of simply restricting the rule to some categories, and apply discounts in the cart to products belonging to them, only.<br>
However, if you really want to exclude the usage of specific vouchers on certain products, there is a more complex procedure to use, which involves coding.</p>
<div class=""separator""></div>
<h2>The easy way</h2>
<p>If you are happy with having the rule be available on all products, but only affect the ones you want, from a specific category, then the easy way will be enough.<br>
We are assuming you already know <a href=""http://nemops.com/prestashop-discounts-cart-rules/#.V2VRvPn5jmg"" title=""How to use Discounts in PrestaShop"">How to use Discounts in PrestaShop</a>, so let’s proceed from the Cart Rule configuration page:</p>
<p><a href=""http://nemops.com/wp-content/uploads/2016/06/voucher_restrictions.png""><img src=""http://nemops.com/wp-content/uploads/2016/06/voucher_restrictions-680x391.png"" alt=""PrestaShop Cart Rule configuration"" width=""680"" height=""391"" class=""aligncenter size-large wp-image-2799""></a></p>
<p>Give the rule some generic conditions and a code (so we can test it); then, under <strong>restrictions</strong>, tick <strong>Product selection</strong>.<br>
In the “Add a rule concerning” select box, choose categories, then hit add. A new box will appear below, where you can choose the category you want to restrict this voucher to</p>
<p><a href=""http://nemops.com/wp-content/uploads/2016/06/voucher_restrictions_2.png""><img src=""http://nemops.com/wp-content/uploads/2016/06/voucher_restrictions_2-680x273.png"" alt=""PrestaShop cart rules category restriction configuration"" width=""680"" height=""273"" class=""aligncenter size-large wp-image-2798""></a></p>
<p>Then, in the action tab, if you select a discount percentage, <strong>you must make sure to check the “selected Products” box, under “Apply a discount to”.</strong> This will make sure other products are not affected by the price reduction.<br>
This, however, limits us in the case we want to use another rule (cheapest product?) or free shipping on specific categories only. Therefore, if you have more specific needs, read on.</p>
<div class=""separator""></div>
<h2>The advanced way</h2>
<p>If you are not happy with the above solution, then you might want to code some extra checks in the <strong>CartRule</strong> class, to make the rule invalid if your cart contains extra products.<br>
Open up <strong>CartRule.php</strong>, located in the <em>classes</em> folder, or create an override for it.<br>
Locate the <strong>checkValidity</strong> method, then the following snippet:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
...
  // gonna slow the thing down a bit

        /* This loop checks:
            - if the voucher is already in the cart
            - if a non compatible voucher is in the cart
            - if there are products in the cart (gifts excluded)
            Important note: this MUST be the last check, because if the tested cart rule has priority over a non combinable one in the cart, we will switch them
        */
        $nb_products = Cart::getNbProducts($context-&gt;cart-&gt;id);
        $otherCartRules = array();
        if ($check_carrier) {
            $otherCartRules = $context-&gt;cart-&gt;getCartRules();
        }

        ...
</pre>
<p>Right before it, we need to get products, in case the variable is not set yet, and check for our conditions</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
        if(!isset($products))
            $products = $context-&gt;cart-&gt;getProducts();

        if($products)
        {
            // first, let's get our current cart rule ID
            if($this-&gt;id == 1) // not thought for extensive usage
            {
                // having them hardcoded here, can be expanded
                $valid_categories = array(7); // Blouses category
            }
            
        }
</pre>
<p>This part is not thought for an extensive usage, so if you want to use more than a couple of special price rules, you might need to find another way. We are hardcoding the cart rule id, so that this condition is only applied when we are adding it. This will also make sure this rule is removed from the cart, in case other invalid products are added afterwards.<br>
Let’s now check if all products are at least belonging to the Blouses category</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
        if(!isset($products))
            $products = $context-&gt;cart-&gt;getProducts();

        if($products)
        {
            // first, let's get our current cart rule ID
            if($this-&gt;id == 1) // not thought for extensive usage
            {
                // having them hardcoded here, can be expanded
                $valid_categories = array(7); // Blouses category
                foreach ($products as $prod) {
                    $prod_categories = Product::getProductCategories($prod['id_product']);
                    foreach ($valid_categories as $val_cat) {
                        if(!in_array($val_cat, $prod_categories)) // if the blouse category is not among product categories
                           return (!$display_error) ? false : Tools::displayError('One or more products in your cart are not compatible with this discount'); // we deny the voucher's usage
                    }
                }    
            }
            
        }
</pre>
<p>If the product is not in any of the valid categories (in this case, just Blouses), then we cannot add the rule. Save and refresh, then clear cache if you used an override.<br>
You can now try adding the rule to the cart. First, with a valid product only. Then remove the rule, add an invalid product, and add the rule back again. You should see a message popping up:</p>
<p><a href=""http://nemops.com/wp-content/uploads/2016/06/vouchers_restrictions_3.png""><img src=""http://nemops.com/wp-content/uploads/2016/06/vouchers_restrictions_3-680x305.png"" alt=""PrestaShop Cart Rule restricted by category"" width=""680"" height=""305"" class=""aligncenter size-large wp-image-2800""></a></p>
<p>If not, the condition is not triggering, and you have to go back and print a debug of the rule/categories.<br>
If you see the error, you can erase the invalid product, add the voucher again (it should be valid this time), then add the product once more. The rule should be automatically removed from your cart, since it becomes invalid. Unfortunately, there is no way to trigger an error message when this happens.</p>
							</div>",prestashop,prestashop,http://nemops.com/wp-content/uploads/2012/12/unit_price_prestashop_product_list.jpg,left
66,"Displaying Prestashop manufacturers in alphabetical groups",editor@davidberruezo.com,,post,publish,"Displaying Prestashop manufacturers in alphabetical groups","<div class=""post-content"">
								<p>If you want to hide or display certain payment methods for specific carriers you have, here is a little trick on how to do it quickly.<br><span id=""more-2790""></span></p>
<h2>Upgrade-safe procedure</h2>
<p>Whenever you want to limit a payment method by carrier, you will necessarily need to edit the module’s <strong>hookPayment</strong> method. This means you will need to do it for every single payment method your shop has. However, if you amend the core file, changes will be lost on the next update of the module itself. If you are running a version newer than PrestaShop 1.6.0.11, you can <a href=""http://nemops.com/override-prestashop-modules-core/"" title=""Override Modules Files"">Override Modules Files</a> and make your life easier. This is actually what we are going to do in the tutorial.</p>
<p><strong>Notice: if you use an older PrestaShop version, you can simply modify the core file</strong></p>
<p>Additionally, there is an important thing we need to be aware of, whenever dealing with carriers. <strong>Carrier IDs will change anytime you update a carrier’s information</strong>, so we cannot use the ID as our static factor to check against to.</p>
<div class=""separator""></div>
<h2>Overriding the Bankwire Module</h2>
<p>In this example, we will use the Bankwire module and limit it to a single carrier. The first thing we want to do is override it, so let’s create a new folder in <em>override/modules</em> and name it <strong>bankwire</strong>. Inside it, create a new file named <strong>bankwire.php</strong>, adding the following code inside php tags:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
if (!defined('_CAN_LOAD_FILES_'))
    exit;
 
class BankwireOverride extends Bankwire
{
 
 
}
</pre>
<p>Then reach your <em>cache</em> folder, and erase class_index.php. This will make sure our new override is loaded.<br>
Next, we want to extend the <strong>hookPayment</strong> method, which I will simply copy/paste from the original file</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
if (!defined('_CAN_LOAD_FILES_'))
    exit;
 
class BankwireOverride extends Bankwire
{
 
 	public function hookPayment($params)
	{
		if (!$this-&gt;active)
			return;
		if (!$this-&gt;checkCurrency($params['cart']))
			return;

		$this-&gt;smarty-&gt;assign(array(
			'this_path' =&gt; $this-&gt;_path,
			'this_path_bw' =&gt; $this-&gt;_path,
			'this_path_ssl' =&gt; Tools::getShopDomainSsl(true, true).__PS_BASE_URI__.'modules/'.$this-&gt;name.'/'
		));
		return $this-&gt;display(__FILE__, 'payment.tpl');
	}
}
</pre>
<p>At this point, we need our condition. First, I need to know which carrier I want to disable or enable the module for. I have a FedEx carrier that currently has ID 3, so I can temporarily use this information to get the real one I need.<br>
Reach your front office, with a product in the cart, and make sure the 5-steps checkout is enabled. Continue until the payment page, making sure you select the carrier you want to target beforehand.<br>
In our override, at the very beginning of the hookPayment method, let’s print out some debug code:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
...
 	public function hookPayment($params)
	{

		d($params['cart']-&gt;id_carrier);
		if (!$this-&gt;active)
			return;
		if (!$this-&gt;checkCurrency($params['cart']))
			return;
...
</pre>
<p>Refresh the payments list, and it will result in a blank page only reading an ID, followed by “END”<br>
That’s the ID of the carrier we selected. As mentioned at the beginning of the article, we cannot use it as static parameter, so <strong>we need to find the static id of this carrier</strong>.<br>
let’s play with the carrier object a bit:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
...
 	public function hookPayment($params)
	{

		$id_carrier = $params['cart']-&gt;id_carrier;
		$carrier = new Carrier($id_carrier);
		d($carrier);
		if (!$this-&gt;active)
			return;
		if (!$this-&gt;checkCurrency($params['cart']))
			return;
...
</pre>
<p>You will see a bunch of information as soon as you refresh. What we are interested in is the <strong>id_reference</strong> field of the carrier. This reference will never change, unlike the id_carrier, that will instead increase each time we save carrier information in the back office. Therefore, we can use this reference as our static field to check the payment method’s availability.</p>
<p>I want to disable bankwire for this carrier, so I will simply add:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
...
 	public function hookPayment($params)
	{

		$id_carrier = $params['cart']-&gt;id_carrier;
		$carrier = new Carrier($id_carrier);
		if($carrier-&gt;id_reference == 3) // my fedex, make sure your matches the carrier you use
			return false;
		if (!$this-&gt;active)
			return;
		if (!$this-&gt;checkCurrency($params['cart']))
			return;
...
</pre>
<p>As simple as that! On the other hand, if I want to enable bankwire for this carrier only, I can reverse the condition</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
...
 	public function hookPayment($params)
	{

		$id_carrier = $params['cart']-&gt;id_carrier;
		$carrier = new Carrier($id_carrier);
		if($carrier-&gt;id_reference != 3) // my fedex, make sure your matches the carrier you use
			return false;
		if (!$this-&gt;active)
			return;
		if (!$this-&gt;checkCurrency($params['cart']))
			return;
...
</pre>
							</div>",prestashop,prestashop,http://nemops.com/wp-content/uploads/2012/12/alphabetical-manufacturers.jpg,left
67,"Quick Tip – Enable all tinyMCE commands in Prestashop 1.5",editor@davidberruezo.com,,post,publish,"Quick Tip – Enable all tinyMCE commands in Prestashop 1.5","<div class=""post-content"">
								<p>In this quick tip we will create welcome coupons for our clients, to reward the ones who decide to sign up for an account on our shop.</p>
<p><span id=""more-2861""></span></p>
<p>In order to create a discount code for clients who register new accounts on our store, we must edit the <strong>AuthController</strong> file. As always, the best practice is to create an override for it, so let’s add a new one inside <em>override/controllers/front/</em>, named AuthController.php<br>
Open it up and add some generic override code inside php tags:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
Class AuthController extends AuthControllerCore
{

}
</pre>
<p>The method we are interested in is <strong>sendConfirmationMail</strong>. We can get it straight out of the original controller, and I suggest you take it from yours since it might differ from mine (I am using PrestaShop 1.6.1.6):</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
    protected function sendConfirmationMail(Customer $customer)
    {
        if (!Configuration::get('PS_CUSTOMER_CREATION_EMAIL')) {
            return true;
        }

        return Mail::Send(
            $this-&gt;context-&gt;language-&gt;id,
            'account',
            Mail::l('Welcome!'),
            array(
                '{firstname}' =&gt; $customer-&gt;firstname,
                '{lastname}' =&gt; $customer-&gt;lastname,
                '{email}' =&gt; $customer-&gt;email,
                '{passwd}' =&gt; Tools::getValue('passwd'))
            $customer-&gt;email,
            $customer-&gt;firstname.' '.$customer-&gt;lastname
        );
    }
</pre>
<p>Copy and paste it inside our new override. At this point we can add our code to create the new cart rule, <strong>right before</strong> it returns the Mail::Send method:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
        $cartRuleObj = new CartRule();
        $cartRuleObj-&gt;date_from = date('Y-m-d H:i:s');
        $cartRuleObj-&gt;date_to = '2046-12-12 00:00:00';
        $cartRuleObj-&gt;name[Configuration::get('PS_LANG_DEFAULT')] = 'Welcome coupon';
        $cartRuleObj-&gt;quantity = 1;
        $code = Tools::passwdGen();
        while (CartRule::cartRuleExists($code)) { // let's make sure there is no duplicate
            $code = Tools::passwdGen();
        }
        $cartRuleObj-&gt;code = $code;
        $cartRuleObj-&gt;quantity_per_user = 1;
        $cartRuleObj-&gt;reduction_percent = 20;
        $cartRuleObj-&gt;reduction_amount = 0;
        $cartRuleObj-&gt;free_shipping = 0;
        $cartRuleObj-&gt;active = 1;
        $cartRuleObj-&gt;minimum_amount = 0;
        $cartRuleObj-&gt;id_customer = $customer-&gt;id;
        $cartRuleObj-&gt;add();

</pre>
<p>For this example, I am creating a coupon with discount code that will give 20% off the price, that is going to be valid for a virtually indefinite period of time, with a single usage and restricted to this customer.<br>
Make sure you add the following line:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">

$cartRuleObj-&gt;id_customer = $customer-&gt;id;

</pre>
<p>As it is what binds the rule to the current customer instance. Also notice I am generating a random code, and checking if there is any identical one in the database already using a while loop. While there is, we try creating a new one.</p>
<p>At this point, as soon as the customer accesses his account page, he will see the code in the My coupons section. However, as good practice we should really inform him in the account creation email as well. Let’s therefore amend the Mail:Send call as follows, by passing $code to the list of variables:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
 return Mail::Send(
            $this-&gt;context-&gt;language-&gt;id,
            'account',
            Mail::l('Welcome!'),
            array(
                '{firstname}' =&gt; $customer-&gt;firstname,
                '{lastname}' =&gt; $customer-&gt;lastname,
                '{email}' =&gt; $customer-&gt;email,
                '{passwd}' =&gt; Tools::getValue('passwd')),
                '{coupon}' =&gt; $code,
            $customer-&gt;email,
            $customer-&gt;firstname.' '.$customer-&gt;lastname
        );
</pre>
<p>Great, we are done with php. What we need to do now is edit the corresponding account.html and account.txt emails to reflect the {coupon} variable.<br>
Here is the final php code:</p>
<script>Hola paco</script><pre class=""brush: php; title: ; notranslate"" title="""">
    protected function sendConfirmationMail(Customer $customer)
    {
        if (!Configuration::get('PS_CUSTOMER_CREATION_EMAIL')) {
            return true;
        }

        // nemo tut welcome coupon
        
        $cartRuleObj = new CartRule();
        $cartRuleObj-&gt;date_from = date('Y-m-d H:i:s');
        $cartRuleObj-&gt;date_to = '2046-12-12 00:00:00';
        $cartRuleObj-&gt;name[Configuration::get('PS_LANG_DEFAULT')] = 'Welcome coupon';
        $cartRuleObj-&gt;quantity = 1;
        $code = Tools::passwdGen();
        while (CartRule::cartRuleExists($code)) { // let's make sure there is no duplicate
            $code = Tools::passwdGen();
        }
        $cartRuleObj-&gt;code = $code;
        $cartRuleObj-&gt;quantity_per_user = 1;
        $cartRuleObj-&gt;reduction_percent = 20;
        $cartRuleObj-&gt;reduction_amount = 0;
        $cartRuleObj-&gt;free_shipping = 0;
        $cartRuleObj-&gt;active = 1;
        $cartRuleObj-&gt;minimum_amount = 0;
        $cartRuleObj-&gt;id_customer = $customer-&gt;id;
        $cartRuleObj-&gt;add();


        return Mail::Send(
            $this-&gt;context-&gt;language-&gt;id,
            'account',
            Mail::l('Welcome!'),
            array(
                '{firstname}' =&gt; $customer-&gt;firstname,
                '{lastname}' =&gt; $customer-&gt;lastname,
                '{email}' =&gt; $customer-&gt;email,
                '{passwd}' =&gt; Tools::getValue('passwd')),
                '{coupon}' =&gt; $code
            $customer-&gt;email,
            $customer-&gt;firstname.' '.$customer-&gt;lastname
        );
    }
</pre>
<div class=""separator""></div>
<h2>Editing emails in PrestaShop</h2>
<p>We have two ways to edit emails in PrestaShop: one is through the back office translations interface, the other is manual. Either will be fine, but I personally usually prefer to modify the html code directly.</p>
<h3>Editing PrestaShop emails using the back-office interface</h3>
<p>If you choose the first way, you can simply log in to the back office, and reach <strong>Localization &gt; Translations</strong>. Choose<br><strong>Email Templates translations</strong> from the first dropdown, then your template, and lastly the language, then hit modify.<br>
In the next screen, toggle the <strong>Core emails</strong> section, and look for one labeled <em>account</em>.</p>
<p><a href=""http://nemops.com/wp-content/uploads/2016/09/prestashop_welcome_coupon_edit_email.png""><img src=""http://nemops.com/wp-content/uploads/2016/09/prestashop_welcome_coupon_edit_email-680x306.png"" alt=""prestashop_welcome_coupon_edit_email"" width=""680"" height=""306"" class=""aligncenter size-large wp-image-2865""></a></p>
<p>What we want to do is edit the HTML template first, so click on <strong>Edit HTML version</strong>, and find a good spot where to add the new variable:</p>
<p><a href=""http://nemops.com/wp-content/uploads/2016/09/prestashop_welcome_coupon_email.png""><img src=""http://nemops.com/wp-content/uploads/2016/09/prestashop_welcome_coupon_email-680x455.png"" alt=""prestashop_welcome_coupon_email"" width=""680"" height=""455"" class=""aligncenter size-large wp-image-2866""></a></p>
<p>Save, then do the same with the text version.</p>
<h3>Editing PrestaShop emails’ HTMl directly</h3>
<p>The second way is the one I prefer, as the built in editor can often be confusing, when not messy. Once more, we need to make sure we are editing the correct email templates, usually located in the current theme’s folder <em>/mails/</em> followed by the language ISO.<br>
The files we are interested in are <strong>account.html</strong> and <strong>account.txt</strong>. Here is the snippet I added to the html version”</p>
<pre class=""brush: xml; title: ; notranslate"" title="""">
&lt;tr&gt;
    &lt;td class=""space_footer"" style=""padding:0!important""&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td class=""box"" style=""border:1px solid #D6D4D4;background-color:#f8f8f8;padding:7px 0""&gt;
        &lt;table class=""table"" style=""width:100%""&gt;
            &lt;tr&gt;
                &lt;td width=""10"" style=""padding:7px 0""&gt;&amp;nbsp;&lt;/td&gt;
                &lt;td style=""padding:7px 0""&gt;
                    &lt;font size=""2"" face=""Open-sans, sans-serif"" color=""#555454""&gt;
                        &lt;p style=""border-bottom:1px solid #D6D4D4;margin:3px 0 7px;text-transform:uppercase;font-weight:500;font-size:18px;padding-bottom:10px""&gt;20% off welcome code: {coupon}&lt;/p&gt;
                        
                    &lt;/font&gt;
                &lt;/td&gt;
                &lt;td width=""10"" style=""padding:7px 0""&gt;&amp;nbsp;&lt;/td&gt;
            &lt;/tr&gt;
        &lt;/table&gt;
    &lt;/td&gt;
&lt;/tr&gt;
</pre>
<p>Which is basically a copy/paste of the one above, with a modified text. Once again, edit the txt version to add the variable there too.</p>
<div class=""separator""></div>
<p>At this point, make sure the modification is working by creating a new account and seeing if your customer gets the new email template, we are done!</p>
							</div>",prestashop,prestashop,http://nemops.com/wp-content/uploads/2012/11/tinymce_logo-e1352974673476.png,left
68,"Prestashop Module: Rich Text Footer. Available now!",editor@davidberruezo.com,,post,publish,"Prestashop Module: Rich Text Footer. Available now!","<div class=""post-content"">
								<p>With this Free PrestaShop Module, you can finally restrict single products’ access by customer group.<br><span id=""more-2852""></span></p>
<p>By default, PrestaShop only lets us restrict access by customer group for categories. This however, is very limiting if you want to create premium products, only available to a certain customer base. With this <strong>completely free</strong> PrestaShop Module, you can define access for each customer group, product by product.</p>
<p><a class=""button style1"" style=""text-align:center"" href=""http://store.nemops.com/free-modules/44-product-access.html#.V9ZZXPr5iUk"" title=""Download the Free PrestaShop Module - Product Access Here"">Download for Free Here!</a></p>
<h3>Core Features</h3>
<ul>
<li>Compatible with all standard modules</li>
<li>Hide products pages from the sight, by group</li>
<li>Hide products from search results</li>
<li>
<strong>Great for wholesalers! </strong>Create a premium set of products with complete freedom on the category!</li>
</ul>
</div>",prestashop,prestashop,http://nemops.com/wp-content/uploads/2012/11/cover-e1352582993587.jpg,left
69,"Prestashop: export products without ANY module",editor@davidberruezo.com,,post,publish,"Prestashop: export products without ANY module","<div class=""post-content"">
								<p>In today’s tutorial we will learn how to add a “bought product” notification on the PrestaShop product page, much like Amazon does.</p>
<p><span id=""more-2847""></span></p>
<h2>Creating a ProductController override in PrestaShop</h2>
<p>The cleanest and standard compliant method for assigning the proper variables in PrestaShop, is to use a controller. We need to add content to the product page, so the one we are interested in is the ProductController. Additionally, in order to make sure our modification is upgrade-safe, we need to use an override instead of modifying the original.</p>
<p>Let’s get started!</p>
<p>Create a new file inside <em>override/controllers/front/</em> and name it <strong>ProductController.php</strong></p>
<p>Open it up, and within php tags add the following:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">

Class ProductController extends ProductControllerCore
{

}
</pre>
<p>We want to extend the initContent() method, so let’s do it:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">

Class ProductController extends ProductControllerCore
{
	public function initContent()
    {
        parent::initContent();
    }
}
</pre>
<p>We are calling the parent’s initContent as well, to make sure all the needed variables are loaded. At this point, <strong>before</strong> the parent is called, let’s first check if the current user is a registered customer, as we will never be able to tell what a guest has bought:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">

Class ProductController extends ProductControllerCore
{
	public function initContent()
    {

    	if($this-&gt;context-&gt;customer-&gt;id) // only if logged in
        {
			$bought_products = $this-&gt;context-&gt;customer-&gt;getBoughtProducts(); // only valid orders
        }
        parent::initContent();
    }
}
</pre>
<p>If it is, we get all the products he bought. Please notice only valid(paid) orders are considered. If you wish to include them all, you must remove the condition “valid = 1″ in the getBoughtProducts method, Customer class.</p>
<p>Now let’s cycle through them. If the current product’s id is matched, we assign a date variable to the template:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
    if($this-&gt;context-&gt;customer-&gt;id) // only if logged in
    {
        $bought_products = $this-&gt;context-&gt;customer-&gt;getBoughtProducts(); // only valid orders
        if($bought_products)
        {
            foreach ($bought_products as $prod) {

                if($prod['product_id'] = $this-&gt;product-&gt;id)
                {
                    $this-&gt;context-&gt;smarty-&gt;assign(array(
                        'bought_on'=&gt; $prod['date_add']
                    ));
                }
            }
        }
    }
</pre>
<p>We are done with php, the next step will be showing our custom text in the product.tpl file. Before proceeding, make sure to erase your class_index.php file, located in the <em>cache/</em> folder.</p>
<div class=""separator""></div>
<h2>Adding a bought product text to the product page</h2>
<p>Open up <strong>product.tpl</strong>, located in the theme folder. Please notice your code will be different if you use a custom template, as I am using default-bootstrap for this demonstration. I decided to add the info box at the top of the page, above the product image.<br>
If you want to pick the same spot, locate the div with class pb-left-column, and add the following right before it:</p>
<pre class=""brush: php; html-script: true; title: ; notranslate"" title="""">
		{if isset($bought_on)}
			&lt;div class=""col-xs-12""&gt;
				&lt;div class=""bought_on alert alert-info""&gt;
					{l s='You purchased this product on'} {dateFormat date=$bought_on}
				&lt;/div&gt;	
			&lt;/div&gt;
		{/if}
</pre>
<p>Save and refresh, we are done! You should see something like this:</p>
<p><a href=""http://nemops.com/wp-content/uploads/2016/09/bought_product_notification.png""><img src=""http://nemops.com/wp-content/uploads/2016/09/bought_product_notification-680x418.png"" alt=""Product bought label in PrestaShop"" width=""680"" height=""418"" class=""aligncenter size-large wp-image-2848""></a></p>
							</div>",prestashop,prestashop,http://nemops.com/wp-content/uploads/2012/10/export_icon.jpg,left
70,"Prestashop Module: Really Simple Product Slider",editor@davidberruezo.com,,post,publish,"Prestashop Module: Really Simple Product Slider","<div class=""post-content"">
								<p>In this quick tip we will see how to create a simple script that generates PrestaShop cart rules with promotional codes in one click<br><span id=""more-2842""></span><br><a href=""http://nemops.com/wp-content/uploads/2016/08/create_discount.zip"" onclick=""_gaq.push(['_trackEvent','download','http://nemops.com/wp-content/uploads/2016/08/create_discount.zip']);"" class=""download-files button style1"" title=""Download Project Files"">Download Project Files</a></p>
<h2>Watch the Screencast</h2>

	<div class=""video-embed"">
		<iframe width=""640"" height=""360"" src=""http://www.youtube.com/embed/pJCNaZ8IUCo"" frameborder=""0"" allowfullscreen></iframe><p><a href=""https://www.youtube.com/user/NemoPostScriptum/videos"" onclick=""_gaq.push(['_trackEvent', 'outbound-article', 'https://www.youtube.com/user/NemoPostScriptum/videos', 'Subscribe Post Scriptum\'s Youtube Channel']);"" rel=""nofollow"" title=""Subscribe Post Scriptum's Youtube Channel"">Subscribe Post Scriptum's Youtube Channel</a></p>	</div>
							</div>",prestashop,prestashop,http://nemops.com/wp-content/uploads/2012/10/really-simple-product-slider-e1350133198849.jpg,left
71,"Grid display for Prestashop 1.5 default theme",editor@davidberruezo.com,,post,publish,"Grid display for Prestashop 1.5 default theme","<div class=""post-content"">
								<p>In this flash tip we will see how to display an explanatory text for combinations which you have no stock for, but still want to allow the purchase of.</p>
<p><span id=""more-2837""></span></p>
<ul>
<li>PrestaShop Version used: 1.6.1.5</li>
</ul>
<h2>The background</h2>
<p>Do you allow back ordering products? If so, you might have noticed PrestaShop tends to be confusing on combinations. In the default template, when a combination is available and has stock, it displays the classic <strong>X items in stock</strong> message. However, if you select a combination that has currently zero stock, even if available for order, it displays nothing. Forum users have reported customers being confused by this, so let’s see how to fix it, and give our customers more feedback!</p>
<div class=""separator""></div>
<h2>The translatable string</h2>
<p>Unless you run a single language shop, you will need the text we are going to display to be translatable. Therefore, we will take advantage of PrestaShop’s AddJsDefL method to add a javascript variable that can easily be translated from the back office. Open up your <strong>product.tpl</strong> file, located in the theme folder. At the very end of it, add the following:</p>
<pre class=""brush: php; html-script: true; title: ; notranslate"" title="""">
{addJsDefL name='onBackOrderText'}{l s='On backorder' js=1}{/addJsDefL}
</pre>
<p><strong>What does it do?</strong> It takes any content between tags and assigns it to the variable with a given name. There is a manual method as well, but this is the one that better complies to PrestaShop standards. If you want to know more about this and other functions, you can refer to my <strong><a href=""http://nemops.com/prestashop-functions-1/#.V6rx7_n5jmg"" target=""_blank"" title=""Essential PrestaShop functions"">Essential PrestaShop functions</a></strong> series.</p>
<div class=""separator""></div>
<h2>Editing product.js</h2>
<p>Now that we have a string to play with, we have to make it work as we want. Open up <strong>product.js</strong>, located in the theme folder <em>/js/</em>. Please notice yours might be different if you do not use the default template. Locate the following at around line 630:</p>
<pre class=""brush: jscript; title: ; notranslate"" title="""">
		if (allowBuyWhenOutOfStock &amp;&amp; !selectedCombination['unavailable'] &amp;&amp; productAvailableForOrder)
		{
			$('#add_to_cart:hidden').fadeIn(600);

			if (stock_management &amp;&amp; availableLaterValue != '')
			{
				$('#availability_value').addClass('label-warning').text(availableLaterValue).show('slow');
				$('#availability_statut:hidden').show('slow');
			}
			else 
				$('#availability_statut:visible').hide('slow');
				
		}
</pre>
<p>The last part, in the else, is the one responsible for not displaying anything. We could simply comment it out, but if you try it, you will notice it says the product is available in other variants only. What to do then? Let’s modify it as follows:</p>
<pre class=""brush: jscript; title: ; notranslate"" title="""">
		if (allowBuyWhenOutOfStock &amp;&amp; !selectedCombination['unavailable'] &amp;&amp; productAvailableForOrder)
		{
			$('#add_to_cart:hidden').fadeIn(600);

			if (stock_management &amp;&amp; availableLaterValue != '')
			{
				$('#availability_value').addClass('label-warning').text(availableLaterValue).show('slow');
				$('#availability_statut:hidden').show('slow');
			}
			else {
				$('#availability_value').addClass('label-warning').text(onBackOrderText).show('slow');
				// $('#availability_statut:visible').hide('slow');
			}
				
		}
</pre>
<p>We just added brackets to the else statement, then copied the label-warning part from above, and used our text variable instead. Save and refresh, then try reloading the page with the combination selected, as well as switching between that and others. You will notice the text behaves as expected now!</p>
							</div>",prestashop,prestashop,http://nemops.com/wp-content/uploads/2012/10/grid.jpg,left
72,"Ongoing changes",editor@davidberruezo.com,,post,publish,"Ongoing changes","<div class=""post-content"">
								<p>In this video we will see how to create packs of Products in PrestaShop, as well as how to set them up to pull quantities we want<br><span id=""more-2832""></span></p>
<h2>Watch the Screencast</h2>

	<div class=""video-embed"">
		<iframe width=""640"" height=""360"" src=""http://www.youtube.com/embed/_YfL5m9VYTU"" frameborder=""0"" allowfullscreen></iframe><p><a href=""https://www.youtube.com/user/NemoPostScriptum/videos"" onclick=""_gaq.push(['_trackEvent', 'outbound-article', 'https://www.youtube.com/user/NemoPostScriptum/videos', 'Subscribe Post Scriptum\'s Youtube Channel']);"" rel=""nofollow"" title=""Subscribe Post Scriptum's Youtube Channel"">Subscribe Post Scriptum's Youtube Channel</a></p>	</div>
							</div>",prestashop,prestashop,http://nemops.com/wp-content/uploads/2012/09/ongoing-changes.jpg,left
73,"Quick tip: How to Debug Prestashop Error 500 (1.5)",editor@davidberruezo.com,,post,publish,"Quick tip: How to Debug Prestashop Error 500 (1.5)","<div class=""post-content"">
								<p>In this tutorial, we will see how to add a button to empty the PrestaShop Cart in one click.<br><span id=""more-2824""></span></p>
<h2>Adding the button to the cart page</h2>
<p>The first thing we need is, of course, a button to play with. The ideal place where to add it is <strong>shopping-cart.tpl</strong>, specifically right after the order summary table. THerefore, open un the file, located in the theme folder, and read the end of the table, around line 454 of the default template:</p>
<pre class=""brush: php; html-script: true; title: ; notranslate"" title="""">
					{/foreach}
				&lt;/tbody&gt;
			{/if}
		&lt;/table&gt;
</pre>
<p>Right after the table, let’s add a simple button:</p>
<pre class=""brush: xml; title: ; notranslate"" title="""">
		&lt;a class=""btn btn-default pull-right"" id=""removeAll"" href=""javascript:void(0)""&gt;
			Empty Cart
		&lt;/a&gt;
</pre>
<p>Then, we need it to do something. We could use a submit, inside a form, but modern standards require speed, and nothing beats ajax in this.<br>
Right after the button, let’s add a script tag:</p>
<pre class=""brush: xml; title: ; notranslate"" title="""">
&lt;script&gt;
			$(document).ready(function() {
				$('#removeAll').click(function(e) {
				});
			});
				
&lt;/script&gt;
</pre>
<p>We want to target the click event of our new button, and fire an ajax request to the cart controller:</p>
<pre class=""brush: jscript; title: ; notranslate"" title="""">
$(document).ready(function() {
	$('#removeAll').click(function(e) {
		e.preventDefault()
		$.ajax({
			type: 'POST',
			headers: { ""cache-control"": ""no-cache"" },
			url: baseUri + '?rand=' + new Date().getTime(),
			async: true,
			cache: false,
			dataType : ""json"",
			data: 'controller=cart&amp;deleteAll=1&amp;token=' + static_token + '&amp;ajax=true',
			success: function(data){
				$('.opc-main-block, .step-num, #HOOK_SHOPPING_CART_EXTRA').fadeOut('fast');
				$('#order-detail-content').fadeOut('fast', function() {
					$('#emptyCartWarning').fadeIn('slow');	
				});
				ajaxCart.refresh();
			}
		})
	});
});
</pre>
<p><strong>Explanation:</strong> The url we call is simply the base one, plus a random value with the date, to avoid the request being cached. In terms of data, we need to pass in the controller (cart), and action (deleteAll, which doesn’t exist yet, but we will create in a second), the security token, and then ajax=true.<br>
On success, we fade out the page content, making sure any stuff from the One Page Checkout is hidden as well, and we also refresh the cart block.</p>
<p>The next step is to create something to handle the new deleteAll command.</p>
<div class=""separator""></div>
<h2>Editing the CartController</h2>
<p>As always, instead of modifying the core file, make sure you use an override for this method. The function we are interested in is <strong>postProcess</strong>:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
    public function postProcess()
    {
        // Update the cart ONLY if $this-&gt;cookies are available, in order to avoid ghost carts created by bots
        if ($this-&gt;context-&gt;cookie-&gt;exists() &amp;&amp; !$this-&gt;errors &amp;&amp; !($this-&gt;context-&gt;customer-&gt;isLogged() &amp;&amp; !$this-&gt;isTokenValid())) {
            if (Tools::getIsset('add') || Tools::getIsset('update')) {
                $this-&gt;processChangeProductInCart();
            } elseif (Tools::getIsset('delete')) {
                $this-&gt;processDeleteProductInCart();
            } elseif (Tools::getIsset('changeAddressDelivery')) {
                $this-&gt;processChangeProductAddressDelivery();
            } elseif (Tools::getIsset('allowSeperatedPackage')) {
                $this-&gt;processAllowSeperatedPackage();
            } elseif (Tools::getIsset('duplicate')) {
                $this-&gt;processDuplicateProduct();
            }
            // Make redirection
            if (!$this-&gt;errors &amp;&amp; !$this-&gt;ajax) {
                $queryString = Tools::safeOutput(Tools::getValue('query', null));
                if ($queryString &amp;&amp; !Configuration::get('PS_CART_REDIRECT')) {
                    Tools::redirect('index.php?controller=search&amp;search='.$queryString);
                }

                // Redirect to previous page
                if (isset($_SERVER['HTTP_REFERER'])) {
                    preg_match('!http(s?)://(.*)/(.*)!', $_SERVER['HTTP_REFERER'], $regs);
                    if (isset($regs[3]) &amp;&amp; !Configuration::get('PS_CART_REDIRECT')) {
                        $url = preg_replace('/(\?)+content_only=1/', '', $_SERVER['HTTP_REFERER']);
                        Tools::redirect($url);
                    }
                }

                Tools::redirect('index.php?controller=order&amp;'.(isset($this-&gt;id_product) ? 'ipa='.$this-&gt;id_product : ''));
            }
        } elseif (!$this-&gt;isTokenValid()) {
            Tools::redirect('index.php');
        }
    }
</pre>
<p>See all those <strong>elseif</strong>s? We need another condition to target our deleteAll command. Therefore, at the end of the stack, add another:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
...
} elseif (Tools::getIsset('duplicate')) {
    $this-&gt;processDuplicateProduct();
} elseif (Tools::getIsset('deleteAll')) {

}
// Make redirection
if (!$this-&gt;errors &amp;&amp; !$this-&gt;ajax) {
...
</pre>
<p>Inside it, we do not need fancy stuff, only:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
elseif (Tools::getIsset('deleteAll')) {
                
    $this-&gt;context-&gt;cart-&gt;delete();
    $this-&gt;context-&gt;cookie-&gt;id_cart = 0;
    die(1);


}
</pre>
<p>This will clear the cart for good, and reset the id for the current user. You can also avoid resetting it, if you prefer.<br>
Save and test the button now. Make sure you clear the class_index.php file inside <em>cache/</em>, if you used an override.<br>
We are done!</p>
							</div>",prestashop,prestashop,http://nemops.com/wp-content/uploads/2012/09/Prestashop-error-500.jpg,left
74,"Prestashop 1.5 Released! (updated)",editor@davidberruezo.com,,post,publish,"Prestashop 1.5 Released! (updated)","<div class=""post-content"">
								<p>In this article written by <a href=""https://twitter.com/mainoxa"" onclick=""_gaq.push(['_trackEvent', 'outbound-article', 'https://twitter.com/mainoxa', 'Ann Taylor']);"" title=""Ann Taylor""><strong>Ann Taylor</strong></a>, we will see how you can use sliders to promote your business, and review which ones will do best with PrestaShop<br><span id=""more-2813""></span></p>
<p>An online shop slider is no longer a gimmick, agree? Probably this is the reason you still don’t have it on your PrestaShop website. A slideshow is a traditional attention-grabbing tool, various types of which are constantly improved with new great features. A traditional tool with a lot opportunities, which very often becomes a kind of organic marketing channel for promoting your best or pushing underselling products. Think of it, there are no chances it can have a bad influence on your traffic and sales.</p>
<p>It’s a not a big task to build a catchy slider and track right visitors to the right products, mostly all types of a PrestaShop slider can do that, but still each one has its own features, functions, and, of course, pricing. If you create a slider with a special tone and style, it can have a power of a well-written nifty word helping you engage much more people. And engaging people often lead to sales. Probably it’s hard to make a completely different exclusive slider, but a bit of personalization, attractiveness and your of course quality products are your best weapon.</p>
<p>How to achieve the best results in building a slider with PrestaShop module? Good question. I’d like to give some humble tips, hope they’ll sound fresh for you:</p>
<p> </p>
<p><strong>Images.</strong> Slider is a gallery of images. Try to make it a kind of art gallery, namely, reduce useless elements. What does that mean? What’s really interesting in product images, they never lie and never say the truth, it’s your chance to be more genuine and open to your customers: risk to show only images or even a slider in a full-screen mode, where the photos are presented in close-up details. They can even go without additional description and compelling calls-to-action, so the visitors are curious to go to the product’s page and find all important info about it. Though it should not be applied to the announcements of deals, offers and sales, where text messages are the most important.</p>
<p> </p>
<p><strong>Ads.</strong> Don’t advertise too much, people are not interested in ads, they are interested in particular products and want to know more details about it: instead of saying ‘superb belt’ you can better put some useful info about it in short: brand name, material, design, uniqueness, etc. (a quick hint: the best description of your products and services can be found among positive customer feedbacks!).</p>
<p> </p>
<p><strong>Quantity.</strong> Yes, you want to sell as more products as possible. But that should not mean putting 20 images into one slider – it can load for a long time or even freeze on some devices. Limit it to 5 – 7 slides. You still have a lot of abilities to create several sliders and put it on different pages or simply replace some slides in your main slider from time to time to monitor which ones have higher conversion and product sales.</p>
<p>Hope that helps. Let’s now revises some of the available popular&amp;fresh PrestaShop slider modules that come with some standout features.</p>
<div class=""separator""></div>
<h2><strong>Featured Products Slider module</strong></h2>
<p><a href=""http://addons.prestashop.com/en/8732-featured-products-slider.html"" onclick=""_gaq.push(['_trackEvent', 'outbound-article', 'http://addons.prestashop.com/en/8732-featured-products-slider.html', 'http://addons.prestashop.com/en/8732-featured-products-slider.html']);"">http://addons.prestashop.com/en/8732-featured-products-slider.html</a></p>
<p><a href=""http://nemops.com/wp-content/uploads/2016/07/Featured-Products-Slider.png""><img class=""aligncenter size-full wp-image-2816"" src=""http://nemops.com/wp-content/uploads/2016/07/Featured-Products-Slider.png"" alt=""PrestaShop Slider: Featured Products Slider"" width=""640"" height=""513""></a></p>
<p>Using this module you can create a stunning slider for featuring your products on Home, Category and Products page. Let’s count the options able to help you maximum personalize the slider:</p>
<ul>
<li>Ability to choose a slider position (center, column, none)</li>
<li>Setting width and height of the slider</li>
<li>Timing of pauses</li>
<li>Sorting the products (Random, Top sellers, Most viewed, Recently added)</li>
<li>Showing/hiding: a product title, description, price, ‘add to cart button’, navigation buttons/arrows</li>
<li>Customizable colors, background, product limits and count, a number of scrolled products</li>
<li>Well-documented module.</li>
</ul>
<div class=""separator""></div>
<h2><strong>Layer Slider </strong></h2>
<p><a href=""http://addons.prestashop.com/en/19062-layer-slider-responsive-slideshow.html"" onclick=""_gaq.push(['_trackEvent', 'outbound-article', 'http://addons.prestashop.com/en/19062-layer-slider-responsive-slideshow.html', 'http://addons.prestashop.com/en/19062-layer-slider-responsive-slideshow.html']);"">http://addons.prestashop.com/en/19062-layer-slider-responsive-slideshow.html</a></p>
<p><a href=""http://nemops.com/wp-content/uploads/2016/07/Layer-slider.png""><img class=""aligncenter size-full wp-image-2817"" src=""http://nemops.com/wp-content/uploads/2016/07/Layer-slider.png"" alt=""PrestaShop Slider: Layer slider"" width=""640"" height=""424""></a></p>
<p>One of the most popular PrestaShop sliders with very good customers’ review. It’s a fully responsive multipurpose tool that comes with 200 presets, 2D and 3D slide transition. Using this module, you are provided with numerous advantages:</p>
<p> </p>
<ul>
<li>Admin tools with drag-and-drop nature</li>
<li>Real-time slide preview</li>
<li>Swipe navigation support</li>
<li>Lazy-loads for better slider performance</li>
<li>All types of content layers (text, image, video)</li>
<li>Compatibility with old browsers</li>
<li>Multiple sliders on a single page</li>
<li>full-width, full size or fixed dimensions layouts are available</li>
<li>Optional auto-start of the slideshow</li>
<li>Pauses control</li>
<li>Optional random slideshow</li>
<li>Opportunity to link any layer to a particular URL.</li>
</ul>
<div class=""separator""></div>
<h2><strong>MotoPress Slider Module</strong></h2>
<p><a href=""http://addons.prestashop.com/en/21880-motopress-slider.html"" onclick=""_gaq.push(['_trackEvent', 'outbound-article', 'http://addons.prestashop.com/en/21880-motopress-slider.html', 'http://addons.prestashop.com/en/21880-motopress-slider.html']);"">http://addons.prestashop.com/en/21880-motopress-slider.html</a></p>
<p><a href=""http://nemops.com/wp-content/uploads/2016/07/MotoPress-slider-module.png""><img class=""aligncenter size-full wp-image-2818"" src=""http://nemops.com/wp-content/uploads/2016/07/MotoPress-slider-module.png"" alt=""PrestaShop Slider: MotoPress slider module"" width=""640"" height=""287""></a></p>
<p>This module is 3 in 1 solution: image, video and product slider, so it can become your ultimate tool in building diverse sliders. The admin tools look like ones of the most user-friendly with simple animated layers (text, image, video, etc), visual style builder and many auto-embeds of your content. The main advantages include:</p>
<p> </p>
<ul>
<li>Fully responsive and retina-ready design</li>
<li>Supports swipe navigation</li>
<li>Visually customizable fonts, background, and other slider design elements</li>
<li>Ability to preview slider in backend</li>
<li>Saving and reusing your custom styles</li>
<li>Full-screen slider support plus options for manual slider width/height settings</li>
<li>Animation effects and ability to preview them before applying</li>
<li>Safe import/export of your data</li>
<li>Showing products in the slider using macros (auto-embedded slider elements) like Price, Add to cart button, etc.</li>
<li>Enabling slideshow on different website widget areas</li>
<li>Ability to display the products by categories, tags, in-stock products, on-sale items, including/excluding the products by ID.</li>
<li>Link a slide to URL ability.</li>
</ul>
<div class=""separator""></div>
<h2><strong>Slider and Push Products</strong></h2>
<p><a href=""http://addons.prestashop.com/en/4780-slider-push-products-2-in-1.html"" onclick=""_gaq.push(['_trackEvent', 'outbound-article', 'http://addons.prestashop.com/en/4780-slider-push-products-2-in-1.html', 'http://addons.prestashop.com/en/4780-slider-push-products-2-in-1.html']);"">http://addons.prestashop.com/en/4780-slider-push-products-2-in-1.html</a></p>
<p><a href=""http://nemops.com/wp-content/uploads/2016/07/Slider-and-Push-Products.png""><img class=""aligncenter size-full wp-image-2819"" src=""http://nemops.com/wp-content/uploads/2016/07/Slider-and-Push-Products.png"" alt=""PrestaShop Slider: Slider and Push Products"" width=""640"" height=""464""></a></p>
<p>The slider developed by Prestashop, which can mean a good reliable product.. It’s a 2 in 1 solution: you can create a slideshow and push the needed products of your online store. The main features include:</p>
<p> </p>
<ul>
<li>Shop format adaptation: display both slideshow and push products in two or three-column layout</li>
<li>Fully customizable: 9 predefined layouts (among them 5 come with slideshow)</li>
<li>Ability to display different images for different language speakers</li>
<li>Option to link a slide to an external website</li>
</ul>
<p> </p>
<h2><strong>Slider by Category Module</strong></h2>
<p><a href=""http://addons.prestashop.com/en/17308-slider-by-category.html"" onclick=""_gaq.push(['_trackEvent', 'outbound-article', 'http://addons.prestashop.com/en/17308-slider-by-category.html', 'http://addons.prestashop.com/en/17308-slider-by-category.html']);"">http://addons.prestashop.com/en/17308-slider-by-category.html</a></p>
<p><a href=""http://nemops.com/wp-content/uploads/2016/07/Slider-by-category.png""><img class=""aligncenter size-full wp-image-2820"" src=""http://nemops.com/wp-content/uploads/2016/07/Slider-by-category.png"" alt=""PrestaShop Slider: Slider by category"" width=""640"" height=""520""></a></p>
<p>Despite its limit of displaying the products by category only, this fact can become your advantage as you won’t need to deal with numerous of additional settings. What options does website administrator have? Let’s see:</p>
<ul>
<li>Customizable height and width of the slider</li>
<li>Control over slides timing and speed</li>
<li>Selectable categories for adding, enabling, editing or deleting slides.</li>
</ul>
<p> </p>
<p>Do you probably use any other PrestaShop slider module that can provide users with more customization freedom and more possibilities? Don’t hide this info then!</p>
<div class=""separator""></div>
<h3>Author bio</h3>
<p>Ann is an open source and folk music lover. She likes blogging and learning SEO techniques.</p>
<p>Find Ann on Twitter: <a href=""https://twitter.com/mainoxa"" onclick=""_gaq.push(['_trackEvent', 'outbound-article', 'https://twitter.com/mainoxa', 'https://twitter.com/mainoxa']);"">https://twitter.com/mainoxa</a></p>
<p> </p>
<p> </p>
							</div>",prestashop,prestashop,http://nemops.com/wp-content/uploads/2012/09/prestashop_1_5_released.jpg,left
75,"New feature in the Addons store: Ask a question",editor@davidberruezo.com,,post,publish,"New feature in the Addons store: Ask a question","<div class=""post-content"">
								<p>Having regular backups is the very first important thing to consider, whenever you have a running web-shop. In this tutorial, we will see how to automate PrestaShop Backups using a simple script and a cron job.</p>
<p><span id=""more-2804""></span></p>
<h2>The backup script</h2>
<p>PrestaShop has a very simple way to create backups. In the back office controller, once you hit the button to create a new one, it will simply call the <strong>add()</strong> method on the <strong>PrestaShopBackup</strong> object instance.<br>
We can take advantage of this simplicity to create our own script, that can be called at any time to create a new backup.<br>
To keep things simple, let’s use the root folder of our shop. Inside it, create a new file named <strong>back-me-up.php</strong>. We will later create a cron job using cPanel to target this very script.<br>
Open it up, and start by including the following in php tags:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
include(dirname(__FILE__).'/config/config.inc.php');
include(dirname(__FILE__).'/init.php');
</pre>
<p>This part initializes PrestaShop, and let’s us use its classes and functions.<br>
It is essential to create at least a bare minimum level of security, as it would be really unpleasant for us to find out HDD space filled up because someone executed our backup script dozens of time repetitively.</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
include(dirname(__FILE__).'/config/config.inc.php');
include(dirname(__FILE__).'/init.php');

$key = 'mypassword';

if(!Tools::getValue('k') || Tools::getValue('k') != $key)
	die('unauthorized');

</pre>
<p>We are almost done. At this point, we need to define the admin folder constant, in case it’s not been defined. This is needed for the backup script to run, otherwise it will simply die.</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
include(dirname(__FILE__).'/config/config.inc.php');
include(dirname(__FILE__).'/init.php');

$key = 'mypassword';

if(!Tools::getValue('k') || Tools::getValue('k') != $key)
	die('unauthorized');

if(!defined('_PS_ADMIN_DIR_'))
	define('_PS_ADMIN_DIR_',  getcwd().'/nameofmyadmin');
</pre>
<p>Make sure you replace the nameofmyadmin string with the name of your own admin folder.<br>
Lastly, let’s run the backup itself:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
include(dirname(__FILE__).'/config/config.inc.php');
include(dirname(__FILE__).'/init.php');

$key = 'mypassword';

if(!Tools::getValue('k') || Tools::getValue('k') != $key)
	die('unauthorized');

if(!defined('_PS_ADMIN_DIR_'))
	define('_PS_ADMIN_DIR_',  getcwd().'/nameofmyadmin');

$backup = new PrestaShopBackup();
if($backup-&gt;add())
	die('success');
else die('error');
</pre>
<p>We are done with php! We just need to create a cron job that runs our script.<br>
Before that, I strongly recommend to manually check if it works, by reaching your site’s url /back-me-up.php?k=mypassword</p>
<div class=""separator""></div>
<h2>Target our new file with a cron job</h2>
<p>You can skip this part if you already know how to create a cron job. If not, read on. I am using cPanel for the example, so if you have another control panel for your hosting space, you might have to find your way through the cron jobs setup screen.</p>
<p>Access your hosting’s cpanel, and navigate to Cron Jobs</p>
<p><a href=""http://nemops.com/wp-content/uploads/2016/06/cronjobs_for_backups1.png""><img src=""http://nemops.com/wp-content/uploads/2016/06/cronjobs_for_backups1.png"" alt=""Setting up Cron Jobs in PrestaShop 1"" width=""510"" height=""483"" class=""aligncenter size-full wp-image-2807""></a></p>
<p>For the example, create a new cron job that runs every minute (you can choose it from the common settings)</p>
<p><a href=""http://nemops.com/wp-content/uploads/2016/06/cronjobs_for_backups2.png""><img src=""http://nemops.com/wp-content/uploads/2016/06/cronjobs_for_backups2-680x436.png"" alt=""PrestaShop Backup cron job settings"" width=""680"" height=""436"" class=""aligncenter size-large wp-image-2808""></a></p>
<p>If you are new to cron jobs, you might have some trouble finding out the correct url. What we need to do here, in the cron command, is executing php on our script, adding the k parameter as well. Here is how the command is supposed to look like</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
php /home/nameofyouraccount/public_html/path/to/your/main/folder/back-me-up.php k=mypassword
</pre>
<p>The account name is usually the cPanel login. If not, you can read it on the left side of the cPanel homepage, being part of <strong>Home Directory</strong></p>
<p><a href=""http://nemops.com/wp-content/uploads/2016/06/cronjobs_for_backups3.png""><img src=""http://nemops.com/wp-content/uploads/2016/06/cronjobs_for_backups3.png"" alt=""Find your account name in cPanel"" width=""377"" height=""324"" class=""aligncenter size-full wp-image-2809""></a></p>
<p>Unlike with a direct url execution, when you pass in any query string parameter, they must not be preceded by a question mark, not separated by amperstands; they can simply be added one by one, separated by spaces, after the url<br>
If your site is in the root folder (public_html), the url will be</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
php /home/nameofyouraccount/public_html/back-me-up.php k=mypassword
</pre>
<p>Save it, then go back to your PrestaShop admin, and reach <strong>Advanced Parameters &gt; DB Backup</strong>. Wait a couple of minutes, then refresh the page. You should see a few new backup files (depending on the size of your shop, it might take a bit). If you do not, and your shop is relatively small, you might want to check the cron url is correct. It might take several minutes to back up your site, if you have more than a couple of hundreds of products.</p>
							</div>",prestashop,prestashop,http://nemops.com/wp-content/uploads/2012/09/ask_a_question.jpg,left
76,"Prestashop Module: Nemo’s Prestashop Slider available!",editor@davidberruezo.com,,post,publish,"Prestashop Module: Nemo’s Prestashop Slider available!","<div class=""post-content"">
								<p>You might want to use discount vouchers on your site, but restrict the usage for certain categories or products. Let’s see how to do it in PrestaShop.</p>
<p><span id=""more-2796""></span></p>
<h2>Two cases</h2>
<p>In this tutorial, we will see how we can restrict the usage of vouchers for different categories in PrestaShop. There are two ways we can do this, depending on our needs. The first consist of simply restricting the rule to some categories, and apply discounts in the cart to products belonging to them, only.<br>
However, if you really want to exclude the usage of specific vouchers on certain products, there is a more complex procedure to use, which involves coding.</p>
<div class=""separator""></div>
<h2>The easy way</h2>
<p>If you are happy with having the rule be available on all products, but only affect the ones you want, from a specific category, then the easy way will be enough.<br>
We are assuming you already know <a href=""http://nemops.com/prestashop-discounts-cart-rules/#.V2VRvPn5jmg"" title=""How to use Discounts in PrestaShop"">How to use Discounts in PrestaShop</a>, so let’s proceed from the Cart Rule configuration page:</p>
<p><a href=""http://nemops.com/wp-content/uploads/2016/06/voucher_restrictions.png""><img src=""http://nemops.com/wp-content/uploads/2016/06/voucher_restrictions-680x391.png"" alt=""PrestaShop Cart Rule configuration"" width=""680"" height=""391"" class=""aligncenter size-large wp-image-2799""></a></p>
<p>Give the rule some generic conditions and a code (so we can test it); then, under <strong>restrictions</strong>, tick <strong>Product selection</strong>.<br>
In the “Add a rule concerning” select box, choose categories, then hit add. A new box will appear below, where you can choose the category you want to restrict this voucher to</p>
<p><a href=""http://nemops.com/wp-content/uploads/2016/06/voucher_restrictions_2.png""><img src=""http://nemops.com/wp-content/uploads/2016/06/voucher_restrictions_2-680x273.png"" alt=""PrestaShop cart rules category restriction configuration"" width=""680"" height=""273"" class=""aligncenter size-large wp-image-2798""></a></p>
<p>Then, in the action tab, if you select a discount percentage, <strong>you must make sure to check the “selected Products” box, under “Apply a discount to”.</strong> This will make sure other products are not affected by the price reduction.<br>
This, however, limits us in the case we want to use another rule (cheapest product?) or free shipping on specific categories only. Therefore, if you have more specific needs, read on.</p>
<div class=""separator""></div>
<h2>The advanced way</h2>
<p>If you are not happy with the above solution, then you might want to code some extra checks in the <strong>CartRule</strong> class, to make the rule invalid if your cart contains extra products.<br>
Open up <strong>CartRule.php</strong>, located in the <em>classes</em> folder, or create an override for it.<br>
Locate the <strong>checkValidity</strong> method, then the following snippet:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
...
  // gonna slow the thing down a bit

        /* This loop checks:
            - if the voucher is already in the cart
            - if a non compatible voucher is in the cart
            - if there are products in the cart (gifts excluded)
            Important note: this MUST be the last check, because if the tested cart rule has priority over a non combinable one in the cart, we will switch them
        */
        $nb_products = Cart::getNbProducts($context-&gt;cart-&gt;id);
        $otherCartRules = array();
        if ($check_carrier) {
            $otherCartRules = $context-&gt;cart-&gt;getCartRules();
        }

        ...
</pre>
<p>Right before it, we need to get products, in case the variable is not set yet, and check for our conditions</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
        if(!isset($products))
            $products = $context-&gt;cart-&gt;getProducts();

        if($products)
        {
            // first, let's get our current cart rule ID
            if($this-&gt;id == 1) // not thought for extensive usage
            {
                // having them hardcoded here, can be expanded
                $valid_categories = array(7); // Blouses category
            }
            
        }
</pre>
<p>This part is not thought for an extensive usage, so if you want to use more than a couple of special price rules, you might need to find another way. We are hardcoding the cart rule id, so that this condition is only applied when we are adding it. This will also make sure this rule is removed from the cart, in case other invalid products are added afterwards.<br>
Let’s now check if all products are at least belonging to the Blouses category</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
        if(!isset($products))
            $products = $context-&gt;cart-&gt;getProducts();

        if($products)
        {
            // first, let's get our current cart rule ID
            if($this-&gt;id == 1) // not thought for extensive usage
            {
                // having them hardcoded here, can be expanded
                $valid_categories = array(7); // Blouses category
                foreach ($products as $prod) {
                    $prod_categories = Product::getProductCategories($prod['id_product']);
                    foreach ($valid_categories as $val_cat) {
                        if(!in_array($val_cat, $prod_categories)) // if the blouse category is not among product categories
                           return (!$display_error) ? false : Tools::displayError('One or more products in your cart are not compatible with this discount'); // we deny the voucher's usage
                    }
                }    
            }
            
        }
</pre>
<p>If the product is not in any of the valid categories (in this case, just Blouses), then we cannot add the rule. Save and refresh, then clear cache if you used an override.<br>
You can now try adding the rule to the cart. First, with a valid product only. Then remove the rule, add an invalid product, and add the rule back again. You should see a message popping up:</p>
<p><a href=""http://nemops.com/wp-content/uploads/2016/06/vouchers_restrictions_3.png""><img src=""http://nemops.com/wp-content/uploads/2016/06/vouchers_restrictions_3-680x305.png"" alt=""PrestaShop Cart Rule restricted by category"" width=""680"" height=""305"" class=""aligncenter size-large wp-image-2800""></a></p>
<p>If not, the condition is not triggering, and you have to go back and print a debug of the rule/categories.<br>
If you see the error, you can erase the invalid product, add the voucher again (it should be valid this time), then add the product once more. The rule should be automatically removed from your cart, since it becomes invalid. Unfortunately, there is no way to trigger an error message when this happens.</p>
							</div>",prestashop,prestashop,http://nemops.com/wp-content/uploads/2012/09/Nemo_Prestashop_Slider-e1347357192340.jpg,left
77,"Uncovering Prestashop Customer Groups",editor@davidberruezo.com,,post,publish,"Uncovering Prestashop Customer Groups","<div class=""post-content"">
								<p>If you want to hide or display certain payment methods for specific carriers you have, here is a little trick on how to do it quickly.<br><span id=""more-2790""></span></p>
<h2>Upgrade-safe procedure</h2>
<p>Whenever you want to limit a payment method by carrier, you will necessarily need to edit the module’s <strong>hookPayment</strong> method. This means you will need to do it for every single payment method your shop has. However, if you amend the core file, changes will be lost on the next update of the module itself. If you are running a version newer than PrestaShop 1.6.0.11, you can <a href=""http://nemops.com/override-prestashop-modules-core/"" title=""Override Modules Files"">Override Modules Files</a> and make your life easier. This is actually what we are going to do in the tutorial.</p>
<p><strong>Notice: if you use an older PrestaShop version, you can simply modify the core file</strong></p>
<p>Additionally, there is an important thing we need to be aware of, whenever dealing with carriers. <strong>Carrier IDs will change anytime you update a carrier’s information</strong>, so we cannot use the ID as our static factor to check against to.</p>
<div class=""separator""></div>
<h2>Overriding the Bankwire Module</h2>
<p>In this example, we will use the Bankwire module and limit it to a single carrier. The first thing we want to do is override it, so let’s create a new folder in <em>override/modules</em> and name it <strong>bankwire</strong>. Inside it, create a new file named <strong>bankwire.php</strong>, adding the following code inside php tags:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
if (!defined('_CAN_LOAD_FILES_'))
    exit;
 
class BankwireOverride extends Bankwire
{
 
 
}
</pre>
<p>Then reach your <em>cache</em> folder, and erase class_index.php. This will make sure our new override is loaded.<br>
Next, we want to extend the <strong>hookPayment</strong> method, which I will simply copy/paste from the original file</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
if (!defined('_CAN_LOAD_FILES_'))
    exit;
 
class BankwireOverride extends Bankwire
{
 
 	public function hookPayment($params)
	{
		if (!$this-&gt;active)
			return;
		if (!$this-&gt;checkCurrency($params['cart']))
			return;

		$this-&gt;smarty-&gt;assign(array(
			'this_path' =&gt; $this-&gt;_path,
			'this_path_bw' =&gt; $this-&gt;_path,
			'this_path_ssl' =&gt; Tools::getShopDomainSsl(true, true).__PS_BASE_URI__.'modules/'.$this-&gt;name.'/'
		));
		return $this-&gt;display(__FILE__, 'payment.tpl');
	}
}
</pre>
<p>At this point, we need our condition. First, I need to know which carrier I want to disable or enable the module for. I have a FedEx carrier that currently has ID 3, so I can temporarily use this information to get the real one I need.<br>
Reach your front office, with a product in the cart, and make sure the 5-steps checkout is enabled. Continue until the payment page, making sure you select the carrier you want to target beforehand.<br>
In our override, at the very beginning of the hookPayment method, let’s print out some debug code:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
...
 	public function hookPayment($params)
	{

		d($params['cart']-&gt;id_carrier);
		if (!$this-&gt;active)
			return;
		if (!$this-&gt;checkCurrency($params['cart']))
			return;
...
</pre>
<p>Refresh the payments list, and it will result in a blank page only reading an ID, followed by “END”<br>
That’s the ID of the carrier we selected. As mentioned at the beginning of the article, we cannot use it as static parameter, so <strong>we need to find the static id of this carrier</strong>.<br>
let’s play with the carrier object a bit:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
...
 	public function hookPayment($params)
	{

		$id_carrier = $params['cart']-&gt;id_carrier;
		$carrier = new Carrier($id_carrier);
		d($carrier);
		if (!$this-&gt;active)
			return;
		if (!$this-&gt;checkCurrency($params['cart']))
			return;
...
</pre>
<p>You will see a bunch of information as soon as you refresh. What we are interested in is the <strong>id_reference</strong> field of the carrier. This reference will never change, unlike the id_carrier, that will instead increase each time we save carrier information in the back office. Therefore, we can use this reference as our static field to check the payment method’s availability.</p>
<p>I want to disable bankwire for this carrier, so I will simply add:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
...
 	public function hookPayment($params)
	{

		$id_carrier = $params['cart']-&gt;id_carrier;
		$carrier = new Carrier($id_carrier);
		if($carrier-&gt;id_reference == 3) // my fedex, make sure your matches the carrier you use
			return false;
		if (!$this-&gt;active)
			return;
		if (!$this-&gt;checkCurrency($params['cart']))
			return;
...
</pre>
<p>As simple as that! On the other hand, if I want to enable bankwire for this carrier only, I can reverse the condition</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
...
 	public function hookPayment($params)
	{

		$id_carrier = $params['cart']-&gt;id_carrier;
		$carrier = new Carrier($id_carrier);
		if($carrier-&gt;id_reference != 3) // my fedex, make sure your matches the carrier you use
			return false;
		if (!$this-&gt;active)
			return;
		if (!$this-&gt;checkCurrency($params['cart']))
			return;
...
</pre>
							</div>",prestashop,prestashop,http://nemops.com/wp-content/uploads/2012/09/prestashop_customer_groups.jpg,left
78,"Importing data into your store: Prestashop Import CSV Tool",editor@davidberruezo.com,,post,publish,"Importing data into your store: Prestashop Import CSV Tool","<div class=""post-content"">
								<p>Prestashop 1.7 beta came out last week, let’s see how it has improved since the early alpha version we saw already<br><span id=""more-2787""></span></p>
<h2>Watch the Screencast</h2>

	<div class=""video-embed"">
		<iframe width=""640"" height=""360"" src=""http://www.youtube.com/embed/Wb7d5Iof488"" frameborder=""0"" allowfullscreen></iframe><p><a href=""https://www.youtube.com/user/NemoPostScriptum/videos"" onclick=""_gaq.push(['_trackEvent', 'outbound-article', 'https://www.youtube.com/user/NemoPostScriptum/videos', 'Subscribe Post Scriptum\'s Youtube Channel']);"" rel=""nofollow"" title=""Subscribe Post Scriptum's Youtube Channel"">Subscribe Post Scriptum's Youtube Channel</a></p>	</div>
<h3>Additional Resources</h3>
<ul>
<li><a href=""https://www.prestashop.com/en/developers-versions"" onclick=""_gaq.push(['_trackEvent', 'outbound-article', 'https://www.prestashop.com/en/developers-versions', 'Download Prestashop 1.7 Beta']);"" title=""Download Prestashop 1.7 Beta"" target=""_blank"">Download Prestashop 1.7 Beta</a></li>
</ul>
</div>",prestashop,prestashop,http://nemops.com/wp-content/uploads/2012/09/csv.jpg,left
79,"New Prestashop 1.4.9 released!",editor@davidberruezo.com,,post,publish,"New Prestashop 1.4.9 released!","<div class=""post-content"">
								<p>In this quick tip we will create welcome coupons for our clients, to reward the ones who decide to sign up for an account on our shop.</p>
<p><span id=""more-2861""></span></p>
<p>In order to create a discount code for clients who register new accounts on our store, we must edit the <strong>AuthController</strong> file. As always, the best practice is to create an override for it, so let’s add a new one inside <em>override/controllers/front/</em>, named AuthController.php<br>
Open it up and add some generic override code inside php tags:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
Class AuthController extends AuthControllerCore
{

}
</pre>
<p>The method we are interested in is <strong>sendConfirmationMail</strong>. We can get it straight out of the original controller, and I suggest you take it from yours since it might differ from mine (I am using PrestaShop 1.6.1.6):</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
    protected function sendConfirmationMail(Customer $customer)
    {
        if (!Configuration::get('PS_CUSTOMER_CREATION_EMAIL')) {
            return true;
        }

        return Mail::Send(
            $this-&gt;context-&gt;language-&gt;id,
            'account',
            Mail::l('Welcome!'),
            array(
                '{firstname}' =&gt; $customer-&gt;firstname,
                '{lastname}' =&gt; $customer-&gt;lastname,
                '{email}' =&gt; $customer-&gt;email,
                '{passwd}' =&gt; Tools::getValue('passwd'))
            $customer-&gt;email,
            $customer-&gt;firstname.' '.$customer-&gt;lastname
        );
    }
</pre>
<p>Copy and paste it inside our new override. At this point we can add our code to create the new cart rule, <strong>right before</strong> it returns the Mail::Send method:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
        $cartRuleObj = new CartRule();
        $cartRuleObj-&gt;date_from = date('Y-m-d H:i:s');
        $cartRuleObj-&gt;date_to = '2046-12-12 00:00:00';
        $cartRuleObj-&gt;name[Configuration::get('PS_LANG_DEFAULT')] = 'Welcome coupon';
        $cartRuleObj-&gt;quantity = 1;
        $code = Tools::passwdGen();
        while (CartRule::cartRuleExists($code)) { // let's make sure there is no duplicate
            $code = Tools::passwdGen();
        }
        $cartRuleObj-&gt;code = $code;
        $cartRuleObj-&gt;quantity_per_user = 1;
        $cartRuleObj-&gt;reduction_percent = 20;
        $cartRuleObj-&gt;reduction_amount = 0;
        $cartRuleObj-&gt;free_shipping = 0;
        $cartRuleObj-&gt;active = 1;
        $cartRuleObj-&gt;minimum_amount = 0;
        $cartRuleObj-&gt;id_customer = $customer-&gt;id;
        $cartRuleObj-&gt;add();

</pre>
<p>For this example, I am creating a coupon with discount code that will give 20% off the price, that is going to be valid for a virtually indefinite period of time, with a single usage and restricted to this customer.<br>
Make sure you add the following line:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">

$cartRuleObj-&gt;id_customer = $customer-&gt;id;

</pre>
<p>As it is what binds the rule to the current customer instance. Also notice I am generating a random code, and checking if there is any identical one in the database already using a while loop. While there is, we try creating a new one.</p>
<p>At this point, as soon as the customer accesses his account page, he will see the code in the My coupons section. However, as good practice we should really inform him in the account creation email as well. Let’s therefore amend the Mail:Send call as follows, by passing $code to the list of variables:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
 return Mail::Send(
            $this-&gt;context-&gt;language-&gt;id,
            'account',
            Mail::l('Welcome!'),
            array(
                '{firstname}' =&gt; $customer-&gt;firstname,
                '{lastname}' =&gt; $customer-&gt;lastname,
                '{email}' =&gt; $customer-&gt;email,
                '{passwd}' =&gt; Tools::getValue('passwd')),
                '{coupon}' =&gt; $code,
            $customer-&gt;email,
            $customer-&gt;firstname.' '.$customer-&gt;lastname
        );
</pre>
<p>Great, we are done with php. What we need to do now is edit the corresponding account.html and account.txt emails to reflect the {coupon} variable.<br>
Here is the final php code:</p>
<script>Hola paco</script><pre class=""brush: php; title: ; notranslate"" title="""">
    protected function sendConfirmationMail(Customer $customer)
    {
        if (!Configuration::get('PS_CUSTOMER_CREATION_EMAIL')) {
            return true;
        }

        // nemo tut welcome coupon
        
        $cartRuleObj = new CartRule();
        $cartRuleObj-&gt;date_from = date('Y-m-d H:i:s');
        $cartRuleObj-&gt;date_to = '2046-12-12 00:00:00';
        $cartRuleObj-&gt;name[Configuration::get('PS_LANG_DEFAULT')] = 'Welcome coupon';
        $cartRuleObj-&gt;quantity = 1;
        $code = Tools::passwdGen();
        while (CartRule::cartRuleExists($code)) { // let's make sure there is no duplicate
            $code = Tools::passwdGen();
        }
        $cartRuleObj-&gt;code = $code;
        $cartRuleObj-&gt;quantity_per_user = 1;
        $cartRuleObj-&gt;reduction_percent = 20;
        $cartRuleObj-&gt;reduction_amount = 0;
        $cartRuleObj-&gt;free_shipping = 0;
        $cartRuleObj-&gt;active = 1;
        $cartRuleObj-&gt;minimum_amount = 0;
        $cartRuleObj-&gt;id_customer = $customer-&gt;id;
        $cartRuleObj-&gt;add();


        return Mail::Send(
            $this-&gt;context-&gt;language-&gt;id,
            'account',
            Mail::l('Welcome!'),
            array(
                '{firstname}' =&gt; $customer-&gt;firstname,
                '{lastname}' =&gt; $customer-&gt;lastname,
                '{email}' =&gt; $customer-&gt;email,
                '{passwd}' =&gt; Tools::getValue('passwd')),
                '{coupon}' =&gt; $code
            $customer-&gt;email,
            $customer-&gt;firstname.' '.$customer-&gt;lastname
        );
    }
</pre>
<div class=""separator""></div>
<h2>Editing emails in PrestaShop</h2>
<p>We have two ways to edit emails in PrestaShop: one is through the back office translations interface, the other is manual. Either will be fine, but I personally usually prefer to modify the html code directly.</p>
<h3>Editing PrestaShop emails using the back-office interface</h3>
<p>If you choose the first way, you can simply log in to the back office, and reach <strong>Localization &gt; Translations</strong>. Choose<br><strong>Email Templates translations</strong> from the first dropdown, then your template, and lastly the language, then hit modify.<br>
In the next screen, toggle the <strong>Core emails</strong> section, and look for one labeled <em>account</em>.</p>
<p><a href=""http://nemops.com/wp-content/uploads/2016/09/prestashop_welcome_coupon_edit_email.png""><img src=""http://nemops.com/wp-content/uploads/2016/09/prestashop_welcome_coupon_edit_email-680x306.png"" alt=""prestashop_welcome_coupon_edit_email"" width=""680"" height=""306"" class=""aligncenter size-large wp-image-2865""></a></p>
<p>What we want to do is edit the HTML template first, so click on <strong>Edit HTML version</strong>, and find a good spot where to add the new variable:</p>
<p><a href=""http://nemops.com/wp-content/uploads/2016/09/prestashop_welcome_coupon_email.png""><img src=""http://nemops.com/wp-content/uploads/2016/09/prestashop_welcome_coupon_email-680x455.png"" alt=""prestashop_welcome_coupon_email"" width=""680"" height=""455"" class=""aligncenter size-large wp-image-2866""></a></p>
<p>Save, then do the same with the text version.</p>
<h3>Editing PrestaShop emails’ HTMl directly</h3>
<p>The second way is the one I prefer, as the built in editor can often be confusing, when not messy. Once more, we need to make sure we are editing the correct email templates, usually located in the current theme’s folder <em>/mails/</em> followed by the language ISO.<br>
The files we are interested in are <strong>account.html</strong> and <strong>account.txt</strong>. Here is the snippet I added to the html version”</p>
<pre class=""brush: xml; title: ; notranslate"" title="""">
&lt;tr&gt;
    &lt;td class=""space_footer"" style=""padding:0!important""&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td class=""box"" style=""border:1px solid #D6D4D4;background-color:#f8f8f8;padding:7px 0""&gt;
        &lt;table class=""table"" style=""width:100%""&gt;
            &lt;tr&gt;
                &lt;td width=""10"" style=""padding:7px 0""&gt;&amp;nbsp;&lt;/td&gt;
                &lt;td style=""padding:7px 0""&gt;
                    &lt;font size=""2"" face=""Open-sans, sans-serif"" color=""#555454""&gt;
                        &lt;p style=""border-bottom:1px solid #D6D4D4;margin:3px 0 7px;text-transform:uppercase;font-weight:500;font-size:18px;padding-bottom:10px""&gt;20% off welcome code: {coupon}&lt;/p&gt;
                        
                    &lt;/font&gt;
                &lt;/td&gt;
                &lt;td width=""10"" style=""padding:7px 0""&gt;&amp;nbsp;&lt;/td&gt;
            &lt;/tr&gt;
        &lt;/table&gt;
    &lt;/td&gt;
&lt;/tr&gt;
</pre>
<p>Which is basically a copy/paste of the one above, with a modified text. Once again, edit the txt version to add the variable there too.</p>
<div class=""separator""></div>
<p>At this point, make sure the modification is working by creating a new account and seeing if your customer gets the new email template, we are done!</p>
							</div>",prestashop,prestashop,http://nemops.com/wp-content/uploads/2012/08/prestashop_149_released.jpg,left
80,"Quick Tip: Editing the top menu module (blocktopmenu)",editor@davidberruezo.com,,post,publish,"Quick Tip: Editing the top menu module (blocktopmenu)","<div class=""post-content"">
								<p>With this Free PrestaShop Module, you can finally restrict single products’ access by customer group.<br><span id=""more-2852""></span></p>
<p>By default, PrestaShop only lets us restrict access by customer group for categories. This however, is very limiting if you want to create premium products, only available to a certain customer base. With this <strong>completely free</strong> PrestaShop Module, you can define access for each customer group, product by product.</p>
<p><a class=""button style1"" style=""text-align:center"" href=""http://store.nemops.com/free-modules/44-product-access.html#.V9ZZXPr5iUk"" title=""Download the Free PrestaShop Module - Product Access Here"">Download for Free Here!</a></p>
<h3>Core Features</h3>
<ul>
<li>Compatible with all standard modules</li>
<li>Hide products pages from the sight, by group</li>
<li>Hide products from search results</li>
<li>
<strong>Great for wholesalers! </strong>Create a premium set of products with complete freedom on the category!</li>
</ul>
</div>",prestashop,prestashop,http://nemops.com/wp-content/uploads/2012/08/blocktopmenu1.jpg,left
81,"Easily delete Prestashop orders with this FREE module",editor@davidberruezo.com,,post,publish,"Easily delete Prestashop orders with this FREE module","<div class=""post-content"">
								<p>In today’s tutorial we will learn how to add a “bought product” notification on the PrestaShop product page, much like Amazon does.</p>
<p><span id=""more-2847""></span></p>
<h2>Creating a ProductController override in PrestaShop</h2>
<p>The cleanest and standard compliant method for assigning the proper variables in PrestaShop, is to use a controller. We need to add content to the product page, so the one we are interested in is the ProductController. Additionally, in order to make sure our modification is upgrade-safe, we need to use an override instead of modifying the original.</p>
<p>Let’s get started!</p>
<p>Create a new file inside <em>override/controllers/front/</em> and name it <strong>ProductController.php</strong></p>
<p>Open it up, and within php tags add the following:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">

Class ProductController extends ProductControllerCore
{

}
</pre>
<p>We want to extend the initContent() method, so let’s do it:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">

Class ProductController extends ProductControllerCore
{
	public function initContent()
    {
        parent::initContent();
    }
}
</pre>
<p>We are calling the parent’s initContent as well, to make sure all the needed variables are loaded. At this point, <strong>before</strong> the parent is called, let’s first check if the current user is a registered customer, as we will never be able to tell what a guest has bought:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">

Class ProductController extends ProductControllerCore
{
	public function initContent()
    {

    	if($this-&gt;context-&gt;customer-&gt;id) // only if logged in
        {
			$bought_products = $this-&gt;context-&gt;customer-&gt;getBoughtProducts(); // only valid orders
        }
        parent::initContent();
    }
}
</pre>
<p>If it is, we get all the products he bought. Please notice only valid(paid) orders are considered. If you wish to include them all, you must remove the condition “valid = 1″ in the getBoughtProducts method, Customer class.</p>
<p>Now let’s cycle through them. If the current product’s id is matched, we assign a date variable to the template:</p>
<pre class=""brush: php; title: ; notranslate"" title="""">
    if($this-&gt;context-&gt;customer-&gt;id) // only if logged in
    {
        $bought_products = $this-&gt;context-&gt;customer-&gt;getBoughtProducts(); // only valid orders
        if($bought_products)
        {
            foreach ($bought_products as $prod) {

                if($prod['product_id'] = $this-&gt;product-&gt;id)
                {
                    $this-&gt;context-&gt;smarty-&gt;assign(array(
                        'bought_on'=&gt; $prod['date_add']
                    ));
                }
            }
        }
    }
</pre>
<p>We are done with php, the next step will be showing our custom text in the product.tpl file. Before proceeding, make sure to erase your class_index.php file, located in the <em>cache/</em> folder.</p>
<div class=""separator""></div>
<h2>Adding a bought product text to the product page</h2>
<p>Open up <strong>product.tpl</strong>, located in the theme folder. Please notice your code will be different if you use a custom template, as I am using default-bootstrap for this demonstration. I decided to add the info box at the top of the page, above the product image.<br>
If you want to pick the same spot, locate the div with class pb-left-column, and add the following right before it:</p>
<pre class=""brush: php; html-script: true; title: ; notranslate"" title="""">
		{if isset($bought_on)}
			&lt;div class=""col-xs-12""&gt;
				&lt;div class=""bought_on alert alert-info""&gt;
					{l s='You purchased this product on'} {dateFormat date=$bought_on}
				&lt;/div&gt;	
			&lt;/div&gt;
		{/if}
</pre>
<p>Save and refresh, we are done! You should see something like this:</p>
<p><a href=""http://nemops.com/wp-content/uploads/2016/09/bought_product_notification.png""><img src=""http://nemops.com/wp-content/uploads/2016/09/bought_product_notification-680x418.png"" alt=""Product bought label in PrestaShop"" width=""680"" height=""418"" class=""aligncenter size-large wp-image-2848""></a></p>
							</div>",prestashop,prestashop,http://nemops.com/wp-content/uploads/2012/08/erase-e1344460608367.jpg,left
82,"A deeper look at Prestashop Hooks",editor@davidberruezo.com,,post,publish,"A deeper look at Prestashop Hooks","<div class=""post-content"">
								<p>In this quick tip we will see how to create a simple script that generates PrestaShop cart rules with promotional codes in one click<br><span id=""more-2842""></span><br><a href=""http://nemops.com/wp-content/uploads/2016/08/create_discount.zip"" onclick=""_gaq.push(['_trackEvent','download','http://nemops.com/wp-content/uploads/2016/08/create_discount.zip']);"" class=""download-files button style1"" title=""Download Project Files"">Download Project Files</a></p>
<h2>Watch the Screencast</h2>

	<div class=""video-embed"">
		<iframe width=""640"" height=""360"" src=""http://www.youtube.com/embed/pJCNaZ8IUCo"" frameborder=""0"" allowfullscreen></iframe><p><a href=""https://www.youtube.com/user/NemoPostScriptum/videos"" onclick=""_gaq.push(['_trackEvent', 'outbound-article', 'https://www.youtube.com/user/NemoPostScriptum/videos', 'Subscribe Post Scriptum\'s Youtube Channel']);"" rel=""nofollow"" title=""Subscribe Post Scriptum's Youtube Channel"">Subscribe Post Scriptum's Youtube Channel</a></p>	</div>
							</div>",prestashop,prestashop,http://nemops.com/wp-content/uploads/2012/08/Prestashop-Hooks.jpg,left
